{
	"info": {
		"_postman_id": "4bc7d61d-2b02-483c-b012-4ab3624f9c0f",
		"name": "L3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "154688-4bc7d61d-2b02-483c-b012-4ab3624f9c0f"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "0b807878-67f8-4e81-ab69-788ff3b3a4b2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a87ae7d0-197f-47a2-ba6d-a2eb66c8f126"
							}
						}
					],
					"id": "f05054b6-4d46-4158-b691-278effc62bdd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "8df22a52-e0db-4953-80e5-03b932757323"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "6f0ae9aa-07b7-4242-91b1-6258137b85bb"
							}
						}
					],
					"id": "061b5fa5-0d2e-4527-a320-7217f6766727",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "15f1ea21-adaf-4a22-a814-abc124409fce"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "56752e18-f8c2-4e89-aaef-57351881900c"
							}
						}
					],
					"id": "a05b0653-ce9a-4f21-b7da-aaa3ebc51ff8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "619e6664-8070-4704-b2f8-951bc13eb819"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6e7552a8-48f1-494e-804f-15b1c4dba6b3"
							}
						}
					],
					"id": "518bc233-d275-4de3-93cb-4be69b5cf38f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "f5c8ee9a-33fb-4008-b72b-fbc6bb643545"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ad6ed1ef-78eb-4421-8011-4b8dd013210a"
							}
						}
					],
					"id": "e72c94fc-b488-4d1b-8221-7b35165de941",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "e5b953d5-9b09-4a74-b33b-a87c59f0477a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "90c74820-d968-43d7-94e4-7939063a02be"
							}
						}
					],
					"id": "901524a2-e234-4815-a17c-ff520796fa7e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f20780ad-5738-4ffe-9bdd-37a74d70c02c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8358a757-74fa-4612-ae7e-22e09f1e69a9"
							}
						}
					],
					"id": "4256860d-04d7-4abd-a5ca-e27d9fd9d38d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "e57f25a1-7bab-4b97-929b-b04e433cc75b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "7f445d0a-ae4a-49a7-aaad-a85d0d5cf757"
							}
						}
					],
					"id": "7c645316-e925-484a-a013-fc0becccb551",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "7a42db90-0f19-448e-90ac-90dfebea3fbb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2aa8e4f0-5e7a-412a-9222-f195da1e264c"
							}
						}
					],
					"id": "dc38afda-5a74-4e55-a767-d344a9b53a2a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "d1a49feb-920e-4c59-8195-1aee8dd2c9d1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3acff75f-100e-4133-b7b7-d48276a9ec49"
							}
						}
					],
					"id": "92766acf-e4c6-473e-8e74-61157d3d4187",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "794c65ef-96d0-4275-8c52-050aae58ce4b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "51ba5105-2766-4b3d-9895-d01eacdafa5f"
							}
						}
					],
					"id": "9c059d50-9514-417e-9fc7-a27e4656363e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "cc9cf2b2-ebc7-43cf-a2bc-343283f751c8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "22874155-584d-4188-93a0-adde78a7a8f6"
							}
						}
					],
					"id": "e861fcc2-d22a-48a2-9f97-bbf51bfbc79e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "2b600f1b-933c-4f36-ac0d-a13c3c9ccca0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4fb52243-be6f-4050-9eae-a41e8f5a1463"
							}
						}
					],
					"id": "ea10db73-9219-446e-a3b1-6cc96b423c41",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "2d7333e9-2a71-4177-8bc8-5e5737290666"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "70930ecb-ed70-4fb4-91c1-d92060f04bcf"
							}
						}
					],
					"id": "6ed24b71-1d71-426b-b6e8-4d735b7fcc57",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "9df09633-6eed-46b0-90c3-64e2f1b27eec"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b159d0de-a477-4f86-b3de-cf4f6708db0e"
							}
						}
					],
					"id": "6b6f0467-be78-46c5-a54e-ce8f93911986",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "32844761-7257-4e7d-82b5-aca485f5965a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "022d5172-295b-4170-9b3e-2c3530ca6378"
							}
						}
					],
					"id": "cae27ef0-2804-4f94-afe2-8c8e244816b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "2f1f102d-2f9f-454d-a3f1-2caf91fc1596"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "baf8d188-e001-4362-8154-b77f5d525fca"
							}
						}
					],
					"id": "bad8e224-edcd-4473-911b-7d17f258ac08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "6e60bce8-8e1f-48b1-8e0c-869c8fda0d2f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "19ea0c77-da45-4e30-9c5b-bd7ca339454d"
							}
						}
					],
					"id": "03ebea07-5678-4f53-a41d-5e644fdaf77d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "5a0c6c09-26db-4f02-a163-73b53688591f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "efc4941e-f47d-4de6-94e1-3616464a8685"
							}
						}
					],
					"id": "720da63b-368a-41fb-ae4e-252e688e52d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "098d9a95-2542-4b0e-9d86-37ed6387dd3e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "68ce82ed-1148-4db0-afc5-47360e6d090c"
							}
						}
					],
					"id": "1c387612-d724-4e09-9a8d-e080ef5d5c52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "1efddee4-7c38-4a3d-8d78-f24d9f8faa22"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "aaf957d1-4ecf-4ef5-b152-ddec37ffb3f1"
							}
						}
					],
					"id": "25536f3e-5391-49a1-a630-5b6cca1ddb69",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "53483b08-90a2-438d-97cb-e776e31796a3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2b021b55-8f99-486c-8266-1193389bf0e4"
							}
						}
					],
					"id": "4b13fdd2-b623-4ee2-a363-600a594ebf64",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "231ee58e-ebcc-494f-aafa-012d93e3ce54"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "f6386f6a-a9ae-4359-b8f0-3d33ab9a4917"
							}
						}
					],
					"id": "5e29aa78-aecb-4293-b23e-dd3e77b5c86a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "a567db63-7035-4274-bc70-6520ed9f4c86"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e6ad2719-cd99-4dcb-b16c-1b52052608f4"
							}
						}
					],
					"id": "8f150cf3-ee64-4265-ab4d-60edcac23d2a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "a50f64c9-b9d9-4fe5-9bb8-1874379a194a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1f31a2e1-d55c-4181-ab38-24aecb67d65e"
							}
						}
					],
					"id": "fffa939e-4226-4f97-b0e8-a827a7209c27",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "a8ea5560-face-4ca4-b578-dbe5bf487cc2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "432996d3-20b0-437d-9fd3-87fc95f7e039"
							}
						}
					],
					"id": "7b8427b4-75f5-4963-9545-ec0123fdf052",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "96fdfa98-de8d-496b-9952-7c9a7a476877"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1ccf21cc-b960-48f1-bb8d-56f8cbc3401d"
							}
						}
					],
					"id": "d1dc3dee-9cd6-43fc-9cde-eadd73793558",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f3e69684-266d-423e-85b3-744d81a63c96"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ce139669-1717-43f4-8234-42957c535c6b"
							}
						}
					],
					"id": "5f6c6cf0-ab1d-4ced-8f61-1417799809d6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "6be05833-ec66-47b3-aa66-e5c57b9937bf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "a279c63f-cede-412e-8a2c-184c93f0c298"
							}
						}
					],
					"id": "f544dab4-a30a-4a77-b14e-cb65e4490e22",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "e4d71233-cc3c-429d-9de3-5dd31dacfd0d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "01bdb1f2-89a7-4165-8a82-f1c66f668c5d"
							}
						}
					],
					"id": "05b98fea-5081-4874-9ffb-5af28b7dde17",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "c74cccb0-69e6-4f95-addd-91b8f357ffe3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fd2f0034-0603-416c-bd40-57fdf5216769"
							}
						}
					],
					"id": "b50b61bd-91d8-4b2f-86ad-23e2dd7b867f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "2ce7a1e3-6f8d-4105-a32b-189c0b1bbeed"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "9d3cdb02-a409-4662-804d-71d0055f27d1"
							}
						}
					],
					"id": "f1113966-86b1-4972-83ac-7f425b382cd4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "2b2c6255-7df4-41e2-9abe-53a50609ec57"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "06e1833a-be6a-46f2-a071-1c798db19cf5"
							}
						}
					],
					"id": "09fd2486-3ed9-4a2d-b1fa-efaaf6ddbdbf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f137f51f-27f5-4ec0-9ba4-90c35285c64d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "43295f16-1a5a-4feb-b91a-e13260b427e9"
							}
						}
					],
					"id": "beb80345-93dc-4003-bb90-748d490d58f6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "79adc49a-5c58-4054-bdb2-2cc4b6a1d8f6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "69f875e0-a7f9-4279-a1dc-2982627285b5"
							}
						}
					],
					"id": "1293c3ce-55d1-4865-a074-d6bf9653c30f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "9acb6012-fbae-441e-820a-a8c8702b971b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c0dd00f5-1d6b-4270-ac3a-ce917061303a"
							}
						}
					],
					"id": "53ad1644-b471-4eac-b2b8-75a53dd9832f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "52d4405c-8613-4f8d-9514-39c2b0b8d5be"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3bb87621-9723-4b9a-898e-9dc78fcb1922"
							}
						}
					],
					"id": "2891ffc6-c4ba-43de-9b3c-aad810a868b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "ddad1891-fbc6-47dc-8acc-bc36c0ff643a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "a9c4078e-dd94-4f89-81ab-448c7c661a1c"
							}
						}
					],
					"id": "27011883-62d1-4e2a-bf32-a20ae6aa3df5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "037e287f-0ba6-4c03-bc5d-ebf6f982471d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3bd1f15c-48a3-4172-9830-77d3fd58401c"
							}
						}
					],
					"id": "4800e7df-cb0a-43e9-a108-fd729ba2b96e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ea11f7e1-297e-4f5e-840d-08bab8fa24d8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "91836326-17e3-4e10-a931-9e39de542842"
							}
						}
					],
					"id": "98e1b13b-9941-4d7f-b0a2-5f29d5e97a29",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "79bbe293-7514-4b23-aa47-cb0aa44aeb5d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "1033a86b-b2f5-47c7-9fb9-3cd594a089fd"
							}
						}
					],
					"id": "0f3342ac-5f3b-4f8d-aa98-2ddb30773c9e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "86c04cdf-1df6-42a7-87e3-582b86b914b2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e891e017-86f6-4dcd-b814-f352a572a7b3"
							}
						}
					],
					"id": "a76ed926-3dae-40c3-ba52-17b38ff2c4ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "99bb1526-baf3-4799-ac6b-99f7cbd9efac"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f89ad670-a375-43e0-bb76-744b91454229"
							}
						}
					],
					"id": "e83dca4d-b00a-4b66-9d63-8606e908f7b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "861cf0eb-0fb3-4db8-b8a5-4161cd66fe59"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "04f5a0db-fec4-4777-a05c-a24ebd8dc84a"
							}
						}
					],
					"id": "344ebcfe-a051-4b02-aa70-748c3c4d0d96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "2c1a038d-ac6f-42ca-8b0f-e2fa9b92fd47"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c6849437-5d43-46b1-be7d-8c0ea02bf9b8"
							}
						}
					],
					"id": "f9a3cce3-609d-4f0c-9219-0ded99008b5a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "293fdd01-b204-4595-b61b-55c0c4d392df"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "22785116-7718-4c94-bbe8-2cbdff373531"
							}
						}
					],
					"id": "74ab6340-3cb0-427f-b175-cf70195bd4d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "e49dd4a4-58a4-47a1-8c8b-a6a4dccea031"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "58a5643c-4948-458f-b0e9-16df9a62ef0d"
							}
						}
					],
					"id": "cbc36b01-b1d5-4d1f-a0df-3ba2b43cd34c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "49f64f43-a55b-414f-b074-b5cf915609d9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "681a2c8b-727d-4b86-aae9-22e4db5b27af"
							}
						}
					],
					"id": "c4fbbd05-18c8-4d86-b947-9838f1a1d5bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "654b7635-8dd4-4c63-8773-bdf08d6dae83"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fe9188bd-8adb-445b-a612-a779d0f541e0"
							}
						}
					],
					"id": "f05a5c30-17f2-4ee8-b423-6c9bc307cb6d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "bceaf3e4-6350-4b5e-a5cc-678ec2f16e8a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "00195495-f808-480c-a0db-ef7b5dad0a6d"
							}
						}
					],
					"id": "96c89c3f-7ca6-465a-8ce5-1a5495fb82b6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "69322ce2-9d91-4f62-a6e8-be4f4bbd2709"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "caedf371-089c-4116-bd26-2a7a476af6c7"
							}
						}
					],
					"id": "2e039972-5735-4637-a5bb-e00d8a106346",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "d3902172-be8b-43a1-a4ac-76e47fc29537"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1f4ddfc7-9a6c-4cdc-a899-43d2c68b7bcc"
							}
						}
					],
					"id": "03cbefae-0940-4bd8-803e-19cce11c5286",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "141975c7-3957-458f-aa49-ef1e76e872b4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "54416d97-b384-4224-8c01-187666ff8da6"
							}
						}
					],
					"id": "b4771afb-7961-45b0-88ac-89b1eca1e0d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "5c1a79f6-6a06-46c0-a9bb-03d83ee60445"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5d60fd22-1206-4110-8305-3e18c84f3d55"
							}
						}
					],
					"id": "8ccc7d4d-ec28-4b84-a6a3-0057953baa7e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "2c35136f-d801-4dc6-b9ba-f01bb208c97d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "390a11b6-f888-433c-b877-2cabe783386a"
							}
						}
					],
					"id": "34a3c0a3-adea-4bce-b3dd-6402336724f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "06d864ae-adea-42e2-bcc5-c8f111ec02bd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "6b14e670-1f36-41f8-88d3-66731544b509"
							}
						}
					],
					"id": "758efc71-25ac-41c0-8fff-acc0210e32e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "8dd17af5-a08f-4bb4-ad7f-1d5e9eaabbf3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0ec1b8ea-c783-44fa-a6ef-185936a592f1"
							}
						}
					],
					"id": "7010249a-759f-4bf7-a74d-fbf00a5215e2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "d04afa7c-7347-49ff-aaf1-1563613797b8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8c2cbef8-ca29-4788-b3a6-8f640ae4345e"
							}
						}
					],
					"id": "4c9d318a-25a7-45ae-bfc3-732c5522dd50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "573a1498-8e1f-404d-837f-a8f451bf9d1c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "3f48f645-7efb-4be2-92bb-6dc18ba33b34"
							}
						}
					],
					"id": "99700518-47cd-41dd-84b2-b39f24b327cb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f41b601e-0654-4e6d-808c-39eac5677512"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "00d99d04-3a1c-4004-b5dd-eff840c218a8"
							}
						}
					],
					"id": "256d5846-a5b4-4596-9bad-827820ba76af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "c4509f20-9f4c-4790-959d-e1dedbcf0c68"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e1ee47c5-b2ac-46a7-81c1-c2508657e552"
							}
						}
					],
					"id": "6fd9057f-9828-4594-a285-1b145cc8489b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "89a29491-bd7a-4713-b025-6f025345a706"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "c3019aa2-c0e6-43b2-a7eb-ad096ca6264d"
							}
						}
					],
					"id": "763b6659-3a05-4338-9672-4c12ef80de6a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "cd33db83-7691-49d1-9e7d-3915c5e62e48"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "df0959e9-5b09-4ddc-af1f-2d685748ca62"
							}
						}
					],
					"id": "8b52ff73-6671-4270-a507-9e2ac3f2d88b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "fa5166cd-9d45-4b8b-9d84-a6bc3aae89c8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "68caf67d-fe33-498c-8da9-5f0b8e170ac2"
							}
						}
					],
					"id": "970e7e59-93ee-4778-a5cf-a455bfd9c970",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "7558dd90-dd73-4502-81a9-e48310166bbb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "a7996564-887e-475c-b11c-0bc7e7f300fd"
							}
						}
					],
					"id": "ce936ca5-da9a-4d80-8549-03e6e5a633f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "feae9e50-ee97-4aaa-9eb2-ca1504c06eef"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9b227f69-9c54-4209-b87a-9c8cb5f14fe0"
							}
						}
					],
					"id": "08da47cf-9b70-47e0-99f3-1d9e4d66c38e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ab6cfbcc-b535-450c-8de2-386ef632093a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "21bae032-0622-44a0-a5fa-ec2a3aab2a40"
							}
						}
					],
					"id": "182fbb61-7f04-40de-b3da-fad8c9775bf0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "806b235d-e678-47f5-9e95-fec09c809172"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "324413c0-0366-499e-8a8f-f0e0d15a0e35"
							}
						}
					],
					"id": "baa85085-4157-4d4f-852a-1b3f7ec985f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "48f213e4-3ae8-4230-b939-4870fe769a5a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0bce95e5-117a-45fb-85b0-6ef7d75cc008"
							}
						}
					],
					"id": "47f8a9b5-806b-4524-92a7-352d3395b5e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b32073ef-1c31-42bc-ba8d-3215a0718aa4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "591c42fa-5407-4d3b-a7c0-8ad4edb9242b"
							}
						}
					],
					"id": "884305e7-af5a-450c-99bf-17da4a0e038b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "3e8cb413-5898-448d-bf7a-2e7ac3d2d71f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "fd7443a4-d596-4859-b574-1dce5b50b746"
							}
						}
					],
					"id": "d20ba02f-6e88-4b90-ae00-c6683319ff82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "e41440fd-152e-4b2c-9ddb-0f7f325fa47e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9f1ebb66-1ec6-4e93-abcc-ac6c4efb7a47"
							}
						}
					],
					"id": "71056adb-1ff0-4954-ba41-f926537309a2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ee37812d-f53e-4e02-8ce0-3e6248a778a9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "93280333-f95c-4f97-a74e-441d5f7b3522"
							}
						}
					],
					"id": "f488bf42-f37a-4f00-aead-390ee53f7216",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "ccad3f6a-95cd-445c-9dc5-48323020eefd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "88e0b1ab-59bf-40ce-aa0f-8e669bd2fb75"
							}
						}
					],
					"id": "62ebf91b-430e-44ba-abf6-f79b8cc64055",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "7820195f-2ad8-4d43-aacd-499b3af60a67"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a8b3d941-6acc-412d-92e2-06f69d2ec2e5"
							}
						}
					],
					"id": "b20d6120-55dc-4fd6-94d0-c28492023420",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "8c47873d-d2c6-4522-9aac-2f8be29e3bb3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f5816d6e-c55e-4b15-a29d-023b50a5babc"
							}
						}
					],
					"id": "1bea9c40-6e56-4c1d-b0c9-2b3d319c3b27",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "5e2f1e9e-994e-451d-83a7-d423f21aec59"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "a3472ca1-711c-4b51-bbd6-8f4dec93eb8a"
							}
						}
					],
					"id": "ed709a7e-dcdd-4133-b4ba-8587f88516a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "0fe0f4d2-a4cf-424c-b118-fb225b01ce72"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "858b5cf3-7e12-4d2f-9874-63ef98539ac7"
							}
						}
					],
					"id": "ffc509a9-1796-40de-a7bf-5953170f7501",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "1f2a6e83-66f3-48f8-989a-ed88a03b5c64"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "28c8328f-c9c4-4180-bfb7-8205756d9b3c"
							}
						}
					],
					"id": "8195606a-2d3d-4079-9c4b-472710547509",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "246626b5-2bd0-466f-9ed9-ed112e23d66e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "a6334329-70eb-4b4f-b273-76f5e5bee327"
							}
						}
					],
					"id": "09308cb3-394b-4be0-9a49-b5bdc36496f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "9ab16997-aad4-46f0-84a3-3c79bfc0dc6b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "71e3f9d6-2c82-44b5-a7e9-e8d3c4391096"
							}
						}
					],
					"id": "daf78fd9-2b6d-40c4-a73f-2b4941ade37d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "27c419c4-8bee-420e-b70d-2f9cd43e7bf0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3d6dbc6e-412b-47fc-9dad-6ab056fdcefa"
							}
						}
					],
					"id": "b598982f-a232-4c10-a728-a2a339f5997e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "73c88420-b1a7-4007-b778-a19b8dcd9062"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ed2119f0-de3a-4ad6-be4f-70dd3063b996"
							}
						}
					],
					"id": "0e952777-a71f-471a-a93c-effc1e804d5c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "863ac618-63b5-4a35-b1a0-99356949e7a4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "936fbd00-bbaf-47ab-a896-63354a64ac50"
							}
						}
					],
					"id": "a2e112cb-a35c-4c24-b34b-6c30e0367c59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "72f59e2c-4619-4757-941e-3d1498d5af46"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1bad9817-f488-4b9f-8ee4-051467544b85"
							}
						}
					],
					"id": "ee547805-9523-41bc-9140-bb298ef3aef4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "42737c91-df40-4fcd-8574-fa3bb7b78d3d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "b29c1e0c-b2be-403d-9152-553d999fb172"
							}
						}
					],
					"id": "87d0c86a-cbe3-4fee-9002-f6215244a03d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "746e11e6-e2f8-4cfa-9134-c515b4d6f67a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "60c985c9-148e-44c7-aa85-4f9efa985283"
							}
						}
					],
					"id": "b803126a-a220-4993-bec5-b94e9d605400",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ca1dc572-d45c-40e3-9cbf-6a31d579c610"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3635a095-8cb0-488b-b25d-3b634f2686fd"
							}
						}
					],
					"id": "d5e73d45-f8e5-49d2-b5a5-bc03fe9f32de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "fd136453-3956-482c-aafd-4f143133444e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "d92ab27a-fc26-4bcf-a828-45fe3fffda9f"
							}
						}
					],
					"id": "6354863d-51dc-4fdc-b74f-f5420b8b046d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "6cc3b763-d571-4706-ba9d-61f2959901ed"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4a798ca4-91ee-4af2-86d5-4827e67dab7b"
							}
						}
					],
					"id": "6cafb12f-b873-44f2-9ca3-b66c94bb0caa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "fa7b87da-9642-4068-bc9e-793b27c81135"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "380821ab-1044-45c4-b7cd-f6c197602880"
							}
						}
					],
					"id": "24bc45f7-6c51-4800-a666-c3f5735cdf98",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "237e0514-60b0-4cd8-b71f-05a6ae691fc4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "92a8703e-4392-4196-9eef-23fd2384907a"
							}
						}
					],
					"id": "ba4d5c25-91f1-463d-b525-880dbb188967",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c2d81f6c-386f-4892-b951-7f2660ba59e0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "17cca74b-e7aa-4cd1-93d4-61bbbcd41fab"
							}
						}
					],
					"id": "f460f3db-4c9c-4671-98e5-22d047fdcffd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "7c861022-82bf-4976-9cc9-99e8c3045d75"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f068f301-efea-4ad6-9694-8f4e0322ba96"
							}
						}
					],
					"id": "8b84fe4c-f69e-45da-ac92-ca7b6d2c918b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "d9653805-e677-475b-8a6e-064ea2c03c65"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "b52651bf-18d1-4adc-9a85-bdf240587fc3"
							}
						}
					],
					"id": "48d469b1-68d2-4a3b-a0b7-480dcfeb6c04",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "ec72e549-a55e-41aa-ac03-b4292e167b8b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "db4b40dd-a898-4dd7-8731-5188a710e3c6"
							}
						}
					],
					"id": "e9cd0609-40d9-4162-b2f6-35cec8b1c654",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "76196d1e-c761-4338-8515-e7874f131d08"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f6d99fb6-e984-4623-a9f4-92a4feb225cd"
							}
						}
					],
					"id": "3f4a293c-b17d-44db-9016-610625d0beda",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "4c02576d-e042-49c3-9ae0-8f43ba9b20a7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "b81d71c6-e5c0-4f53-80d9-1ee1499c6987"
							}
						}
					],
					"id": "43a8cf33-3d3e-4802-b389-ebfb62052b25",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "45811fe2-35df-41eb-ba9e-2a4a59707e4e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "90e81bd5-bbb5-409e-96d9-008cb59a8c1c"
							}
						}
					],
					"id": "93452d4f-8b0e-419c-8699-8b62b2f5d0a2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ae6ac09a-9a52-442e-8ff3-10dafe96333e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4280b44f-0750-4644-8b33-cf701d69a6ea"
							}
						}
					],
					"id": "99b18233-fbf3-4105-a615-4ced414b69ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "ed5adb19-48a3-42b2-ba71-dc1413be5a58"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "2d76cd89-8714-46d3-9e3e-5877b4ce7c67"
							}
						}
					],
					"id": "ee9cd6a0-e11c-4f78-bcba-1f7d922bf384",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "5c012d09-f210-494b-894f-912b2a899bc8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "89d66b5a-01e8-4d84-8d61-c9568b1c5f03"
							}
						}
					],
					"id": "bc767a60-9e4b-4994-b243-0ac6b6868a65",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "cca591a4-1c45-4b3c-afbf-672145363786"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "74eb9e92-0b81-4f43-b427-45d890dbd50a"
							}
						}
					],
					"id": "c564d23f-1415-4711-a837-8818d628a1b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "798eca30-edef-4918-8773-0ccba79e3870"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "b7c9dc26-7b09-4128-93ca-67e60bc0c385"
							}
						}
					],
					"id": "e5af92e1-d30b-478b-82ad-3e10be336368",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "1b3b3fc0-ea0b-4da1-9ceb-86cc3f7c64e6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7d4a29e4-88ef-43ce-b7e7-603865efb02a"
							}
						}
					],
					"id": "a9034785-d05a-460a-8e6b-9d1455188a5b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b50318e2-4a05-49ef-92af-95066edb5331"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7a8b40a3-476c-4856-aa64-a7c07d117447"
							}
						}
					],
					"id": "0e7755d8-bf05-43f9-ae48-9e86f5258aa0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "72f6bf97-3e0a-476a-85ec-58493d984107"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "8c55d9ca-6575-49d5-80ed-dadbb2fb04a9"
							}
						}
					],
					"id": "b34c4c9b-4630-40fc-a925-9bffa3484711",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "8a3d75c8-a05c-45ba-9e2c-1d971eeda5b7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "39e9f979-c7dc-4e74-b600-9d4394b9f352"
							}
						}
					],
					"id": "158a8f92-6e7b-4bc6-98d4-3f634d95d99e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "baa5e1ec-3bd0-4a60-9ae6-a59f5066bf2c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9975daa1-65df-4575-82e4-029b4b53ff4f"
							}
						}
					],
					"id": "cce99bb6-a0c3-42a3-a836-36333830b2d9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "3c3c6fa5-0eb4-4d71-b9ac-124ad4777ffd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "3e263a0d-2e93-4bc1-8cbd-cdf16c80a6eb"
							}
						}
					],
					"id": "f17f3c4c-134b-4889-8f13-f1c6db952f54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "a44fd3d7-4891-4bd6-811e-6e31003ed267"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "44532b8d-0f6f-4822-ba54-f8a780bf8c16"
							}
						}
					],
					"id": "d1e1fd87-766a-4fd3-9a38-223bc1aa6f18",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "88054177-4a1d-43b9-be52-19bd23a1effa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "afeb3477-36f2-4a5d-aa16-c943f42b18f8"
							}
						}
					],
					"id": "118a94fd-d47d-48da-83f0-2c947c72eee2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "60eff32d-cdfd-41ce-9734-8188c793b8f3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "b273d63c-e3bc-465c-98e0-830dbd5a3c49"
							}
						}
					],
					"id": "1f485367-1154-4217-8791-76d1a2e6c051",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "d04f8772-1f82-46eb-9d18-5ac3b572dae1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1ec36636-3d07-4f40-ac34-0f273a06ed1b"
							}
						}
					],
					"id": "a4775823-37e5-4222-9a02-b927ad8ef033",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "279636d6-2ee4-4511-b54d-1681534a31c8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bd567cb4-576d-49ca-b7b2-74acb83abd83"
							}
						}
					],
					"id": "a8252d97-1948-4c17-8834-1739e0f2536b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "e97d5585-383f-4df0-b111-e1b95cb893c1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "4d725273-98d7-4cba-9b4c-879347b83f77"
							}
						}
					],
					"id": "350ae562-005a-4035-a261-8bbf385e011b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "bd0a3f31-c8dd-410d-bb1e-c19e9dbfecea"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bd755a11-f13c-4d7e-b82c-41193edab1ec"
							}
						}
					],
					"id": "10e34838-8be0-4c2d-aeb0-2477cf331b3a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "5bf3cc82-9c70-4551-a865-e4fba359edb6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7fa9e493-beb4-4fb9-b428-8502274e9ac9"
							}
						}
					],
					"id": "74a9e69f-b36a-40af-82c3-43043b7b4b44",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "f5eec91f-c2b9-4307-848a-7d5184037cfb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "1f8ffca5-0a10-406a-a2a4-06d7d0c498f0"
							}
						}
					],
					"id": "6129cec7-a2be-4ce0-a870-e0a9281af18a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "4d0a98c9-51ee-4d8c-8a7c-5c3c836c9e7a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f991c3a3-759e-4335-955f-91a9abd368d2"
							}
						}
					],
					"id": "d203ba17-aeb8-447a-ade7-c086feb09527",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "56a8b989-e0c0-4b77-a558-6064e4e083de"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "54b13e7c-e20e-4d27-8db1-44e7a040ce84"
							}
						}
					],
					"id": "cf5e323e-dfe7-4ff4-902d-2e843b145ee7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "602a8f4b-e2bf-44dc-8d2f-7d0715911462"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "dbf0db9e-fefe-43ae-b263-5ccb5c79e300"
							}
						}
					],
					"id": "f2ecc02b-b267-4373-8028-10775facfdc1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c0939b0f-6f02-4321-8728-58b0d4867181"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b2a0fc32-0e2f-477a-80cb-bd6a218383c3"
							}
						}
					],
					"id": "28694f79-4a79-4bbd-8e59-5a8586bf165a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "7987f347-df8d-443c-8ba8-c65ab3aa6051"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8fa7a4d4-1223-4472-83b4-df80ecb1c032"
							}
						}
					],
					"id": "e28f4542-336e-4c69-a9d7-9bf0b5c442de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "c02d242f-f4ce-4b7e-b7b8-6196be1cdec8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "8b15514d-928b-40e8-966f-29a6b4095d46"
							}
						}
					],
					"id": "90c55adf-90b8-4010-a74d-c19b5a1d76fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "e37aabb4-247c-45f4-9ac4-291380dfceaf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "904e62b2-a368-4f7f-87d3-7a47d76d9e62"
							}
						}
					],
					"id": "ed8d91d2-b784-43f3-a092-59c60a73b3a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "05b69954-e2d2-4070-948b-24de34fdf607"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ce67bf1e-4f9e-4d3e-b95a-66fc30fd9c14"
							}
						}
					],
					"id": "f2091bb5-a87c-417e-b9ae-c9c2632b7010",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "08b4d4ee-866c-4946-83ef-d472a04ee4e3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "3013fb29-a0c8-451c-a481-44aa219ff1c6"
							}
						}
					],
					"id": "6b759208-b547-4481-b4ca-611749436f4a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "436c89d4-b04c-4e0c-9971-8f2d29dd334c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c22994f5-f9d6-46db-8764-a80497afa1a3"
							}
						}
					],
					"id": "c737afbb-a8e8-4757-9e1b-feeec8c9deac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "7cda35e6-ce86-4b5e-bb3d-59cb657e8938"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7298d286-3462-4e4f-b4be-6aa7702b2c93"
							}
						}
					],
					"id": "dcf7bd9c-d210-420e-91c0-d047e75bb9e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "c6817f42-15d8-4365-95af-83e3fef051b7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "4a252eea-5e3b-49cc-92b8-b0cbfcd9f23d"
							}
						}
					],
					"id": "989f16b3-c442-4331-814b-830336c9dc93",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b64e5647-8da5-42bb-8829-266206dfdb46"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "cfa6dfb2-6b7e-4c37-a05d-031a3b5b29d4"
							}
						}
					],
					"id": "949ddf83-71e1-4c41-8771-0e4d7b53e6fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ebcfeec4-ffc6-4269-8c91-2a3f2a115309"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b39b8914-80b9-4efc-8efc-9bbb1495d4ef"
							}
						}
					],
					"id": "3d8fc0dc-3e2b-4cf6-a71a-ca24de095896",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "b2ba92fd-d06c-4b83-ba6e-7eefb6d96fcb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "5b87b0f2-f0cb-4382-bd2f-7c2afee191f1"
							}
						}
					],
					"id": "bfc54a50-6edb-461b-a6ab-ddcf423c67a5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b208158f-b1c6-480f-be79-ade65fc73765"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b548ba71-80b3-4fbd-be11-1d975a3ec78f"
							}
						}
					],
					"id": "f96b7ea5-9bc9-4401-b717-f740419bf65e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b728ca8a-0047-45c2-8ca9-9f1dcee8f4a8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "23f14b5d-d1c3-47ca-94fc-f07357fdea0b"
							}
						}
					],
					"id": "b4b47882-08f5-408d-91b6-8ec4de4b083f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "9e87ebca-d2da-4b09-9935-11a364aac423"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "a7431a57-03ae-43ec-aae9-49ecac951624"
							}
						}
					],
					"id": "419a4faf-781c-47fb-a9e3-864cf6463f05",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "ff85e287-f6fc-45a8-ae47-8bc6269046f3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4aa8914d-6c10-4e9b-bb1a-7628649e9187"
							}
						}
					],
					"id": "4a2868b2-bfd0-49e4-83de-181696e9a8b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "4ce022a6-28e9-4973-b046-04f1fc0266db"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f3462fdc-1b6a-415a-b01e-ac7e20f3a1a5"
							}
						}
					],
					"id": "4a08e983-700b-461c-a185-78554ea7f47e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "2fad60b4-447f-4211-bcbc-44090acf882b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "e3d8ab16-2aaf-4189-8c1c-710d997970fb"
							}
						}
					],
					"id": "e9263842-c20f-4adb-b1f6-d3dba75b8c91",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "836b7f03-9b65-4174-b917-5f449fc90e1d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2b521b46-a0f0-43af-bcb1-79dc12ba4790"
							}
						}
					],
					"id": "3b33668a-d459-4a9e-9c4d-b83d09075253",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "074b57d8-8ea3-44ad-a8c0-1050f984e3a3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f77b0063-4ddc-4657-969a-b7a833b9d543"
							}
						}
					],
					"id": "3ecd9f14-29d6-4928-9aa2-5c99a4fe593d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "99726bb3-59aa-41a8-a008-174e437e14a6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "1c1b20da-0c00-408c-8592-39a1a53b74ee"
							}
						}
					],
					"id": "d91c14bc-10be-43f2-a619-8ed1f6de2f95",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c7551a7b-8140-4a58-b005-2898daecf128"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "840aa2fc-6a17-4d76-bbdc-5ee7e4fabf87"
							}
						}
					],
					"id": "8188ddbe-fb1e-47df-9c29-c9d8d469b235",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "c9e5c472-ff44-4964-bf7c-ca934bb7b48a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "80179469-ae65-40a9-93c1-d2da0a7fe8f7"
							}
						}
					],
					"id": "522856a2-2b2f-42ad-8dc1-743f17063766",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "94d37ce6-f312-4d5a-ada4-b4279de958ed"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "5ba80fa4-a6b7-4c20-913d-a03022dc6879"
							}
						}
					],
					"id": "b6d70c93-8e3a-4cfc-88d4-a53c9eceed46",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "ba11489e-ae45-4b84-a897-cb71780edc21"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e72c5b5a-e55a-414a-9cf5-ee64ab59ad1e"
							}
						}
					],
					"id": "97f62539-f325-43a6-9997-6cd42ea762d2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "8f9bd208-40df-4203-acb9-950fe43dc63b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b319a8a7-d371-4059-a4be-defb96f962da"
							}
						}
					],
					"id": "4991472e-6158-4659-bfc9-51d855852fc9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "1b70b961-c2d9-4ca1-85e7-2947911022e8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "d0d5cac1-2727-4549-aa15-dff2194c8368"
							}
						}
					],
					"id": "846f069e-7f14-4024-b41b-8e7674c8caed",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "4916c556-0778-4b06-b84a-2c2116cc25be"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a4e05c8e-82ef-49c1-93c7-3c31a41390b6"
							}
						}
					],
					"id": "272bc087-5b86-40c0-9c33-7897207b757c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "697c6d44-c452-4eb3-997a-12883de6b015"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "15bc2fe1-1012-4ebc-ab28-35d5040f8d2e"
							}
						}
					],
					"id": "26bf1617-8c85-455c-b772-f4fb5c7bb143",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "e3346228-7da1-4711-aa5e-50e02e775298"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "2793dbdd-818a-4e25-8267-3586ce19d16c"
							}
						}
					],
					"id": "a978a133-ed22-4f76-b5c8-25cd3b4962da",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c75766ec-f6db-451a-bde6-7a18fe105744"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "92300b6c-92d6-444e-847f-4aac7b7c77aa"
							}
						}
					],
					"id": "ac13d2fe-1b79-4135-9044-9229c1250af4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "3eaacfb1-81ff-49dc-8a0d-a88d987075de"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "409228b1-9759-41f7-9b80-b9be3d80c398"
							}
						}
					],
					"id": "48f210b4-f118-4ba9-a0f5-39e435fc4dcf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "dc8f3de0-f428-4ce9-a2f1-f7283595797d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "b04d6073-ddb5-4aa0-b8bf-0103df61128e"
							}
						}
					],
					"id": "d5378f4a-247c-401a-849c-f8c11164b004",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "99f80846-93e9-4005-8e67-bf38bda46d52"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "649967f0-2552-4e38-8869-4d59a0677143"
							}
						}
					],
					"id": "33272812-38dc-4cba-9d95-5869717df225",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "18fff9bd-393a-4fe7-801b-c7e875dd8097"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "22253945-a2e2-43fe-a84a-a12402f8243f"
							}
						}
					],
					"id": "0fd4c870-b7b4-416e-a2f4-01b42367d191",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "d8b01844-68bb-42c9-96aa-283788797e48"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ea117e95-89ec-41d1-9ae5-21195d56e043"
							}
						}
					],
					"id": "4f2d35b8-3353-44bb-a0c6-5a1bb25b61f3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "2fdad528-4d74-4eeb-8889-0f9003a6003d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a0b8c09d-fdcd-4236-b096-32f37ea4c073"
							}
						}
					],
					"id": "f5039aab-6b5b-42ba-a69f-e361aff7e70f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "4577aac1-da04-4a2b-9216-e6815140a7a2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ff93515a-ee96-4fdd-8d6c-a9f0cd815bf0"
							}
						}
					],
					"id": "15aa2bfd-f633-4f6e-b193-f63ca6693aba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "646ee470-5bc3-4fe6-bb4c-f9b8ec3c36c2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "29f7c4cb-daac-4c42-ab9f-1af1092fad21"
							}
						}
					],
					"id": "cfc32f55-abbf-4d24-8bca-25940521654b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "67325c49-e6bf-4016-aa7a-02cde4f0d0e0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dc68ff39-6d23-41d0-a075-beb989199326"
							}
						}
					],
					"id": "637789dd-61f0-4de2-b58b-e3d1d93572ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f08c0bfe-dd9b-49da-bf5e-26e1d3eba00b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b9b5fe68-8237-447e-9987-3dfb75a3e0f2"
							}
						}
					],
					"id": "1b12b16c-99cc-468b-9477-ad48878bdb56",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "5a27bf17-2c01-4cc3-9f12-99c1b96a583d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "05a33d6e-717f-4929-b168-8d6790d1a990"
							}
						}
					],
					"id": "53d20864-466d-44d2-849a-a37e1e4aa9c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "37f9d821-ce17-4132-a1e0-89040fbb8ff4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5154db2d-8c16-458b-a875-49796ece8e1f"
							}
						}
					],
					"id": "56867078-4792-4473-ab10-2577883e25ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "8981214b-d3b0-4a8b-9681-bd18b8a1e3ec"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6e2382b4-c130-462c-baa4-2167169bec33"
							}
						}
					],
					"id": "c5c398ce-fb72-45de-8501-38468c678818",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "da3be16f-2712-4d22-8dbc-5d9a17221e8e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "0862af65-acd8-4fe7-864f-9d48032d9cf0"
							}
						}
					],
					"id": "cbcc0d41-2b90-4e6f-ba9b-e12f483fe088",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "1a795df3-c09a-4337-ada4-772f36f8a183"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "781d7e3e-707d-4bad-9a1a-bd02d16e289e"
							}
						}
					],
					"id": "3ed76515-d076-4dfa-9c08-45db9b9495ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "0931ee89-a026-4273-a920-2ab3ebda076b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6ef5ed6d-3774-4ccb-86b1-a9fd7f83b426"
							}
						}
					],
					"id": "f8110795-ca90-45ad-8c89-3b4f6811733d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "b89c646f-075c-4ecc-b29b-39052f419dac"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "de6e7e4a-618e-4f72-826a-c6eb31a2025d"
							}
						}
					],
					"id": "2001f302-8201-408b-a7eb-dd6ec0031730",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "6c802a93-477f-4dff-902f-91b26b3f19e2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "efdd26b7-92d1-4a69-8399-50474b3a4adb"
							}
						}
					],
					"id": "d49535e3-9d25-4f2c-95c4-11afef9790b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "738802a7-4051-44cf-8ac0-67e1b889ef19"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "628201eb-7323-4ef2-aaa4-60c5e51b6fc9"
							}
						}
					],
					"id": "dd6cee3e-c0b3-4614-aef3-6291fd462ac0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "c8c2b02b-322f-4c65-98fc-958049b84f10"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ca6fbd27-1123-4ab3-bcab-9b7338e488c3"
							}
						}
					],
					"id": "0cac67cd-c0f3-4a5a-b65f-9f9ba306a19e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "3a32ba36-fb8d-4798-94ad-32128c21909c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e2d9773b-e36f-4d4c-9f63-e3a88b444545"
							}
						}
					],
					"id": "9af7a96b-4a25-47fb-874b-add2efe32fd3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "2c919d33-3b66-4972-86c9-5d6b69811960"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3c3163ee-9c84-47ec-83ca-99b1f12510bd"
							}
						}
					],
					"id": "9da89b1c-2601-45ec-87aa-f3f293ae733a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "2651e87f-6a3a-4e2c-976b-162f0336f976"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "690791cb-c6ef-4899-8a33-a00b688c7ad2"
							}
						}
					],
					"id": "595f4f3b-3e03-4ee9-86b2-bbf9a823bbf1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "ac3df0a0-2d18-46c6-a851-2b89c49a6c31"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "499daf6c-74d1-47d0-806e-05349d029f0a"
							}
						}
					],
					"id": "8d489145-e4f8-42a4-bf83-0ecebb70301d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ce5948d3-e15f-4e09-becb-bc57a5942e33"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "72db1419-fc01-40a4-b189-9e17cfd2ce7b"
							}
						}
					],
					"id": "9133d2a5-cb73-4d47-9f5f-0245fbb9bfac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "0e820023-539e-4c51-85a9-0ea85919aa99"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "b731397b-25ab-4c36-b515-da2f6062703e"
							}
						}
					],
					"id": "5186206e-0b04-465f-ba1e-fa0a42c93c59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "d65e2bd2-528c-44d7-a403-95a6d1013da4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "540823f7-7e2a-490d-918d-989e324c9b79"
							}
						}
					],
					"id": "42aa6366-c8fd-445e-a948-e56525f1f32b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "356afd35-92ae-4aa3-968f-d8457d27b787"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "102b0fd6-467a-4e34-a424-ae98a69f943a"
							}
						}
					],
					"id": "843e8275-9aec-453e-848f-3cbd5c79b679",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "189bf904-bf21-4221-aa62-8933af2b98f8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "40214e1a-e336-4fbb-8ede-bc0ddb5e29ef"
							}
						}
					],
					"id": "39ab460c-af1f-4098-8aa6-fa48f4191404",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "3c68279c-0734-4b43-9bb5-0809433f7bf1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "287ba9f8-a47b-41dd-9acb-3558fb4ac9e5"
							}
						}
					],
					"id": "cdf928aa-0606-4d42-a531-1b91f7f03db9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "52c0ff8f-b0da-4b1c-9aa6-51fe47402711"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "951345d2-b580-4507-8631-38895cc5029d"
							}
						}
					],
					"id": "91af4d6f-af33-4560-88c4-69dad59b228f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "9aebf8b0-5a02-45a0-a4cf-3213060bad8f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "9718d54a-c013-4652-8d86-4ff29be440d7"
							}
						}
					],
					"id": "c4787b89-381c-420a-a4f5-761aaafbe774",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "864f24ce-caf0-477d-abc4-cbe0ecb12e17"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "548dc7ec-0545-4090-aac5-76b23f902774"
							}
						}
					],
					"id": "1355eb68-bde1-4e2a-98eb-950028db77d6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f641af47-3be8-47f0-8e39-e237c32ee6c0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "271a3a81-7671-495e-8d5e-5cab9a0060f9"
							}
						}
					],
					"id": "93e2ce14-e699-4855-b0d3-340e11b609ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "c27a69d9-b117-45ae-bc81-f4eaa75956e6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "12532603-9dfd-4b32-a608-5676a71cf1dc"
							}
						}
					],
					"id": "6570504a-fa21-4084-9c40-7032f985b7eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "5e4a7de6-b52d-4d74-bf8b-673c4f945c40"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "99e7265f-e606-4fe3-bfdf-cf358e0b2875"
							}
						}
					],
					"id": "494a906e-62b0-448a-aa32-820a8e040b25",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b7e5cad1-0fee-4e8b-aac7-66df960b0cb4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e0dcdd42-150a-4d0a-98e7-3d5c69ae2e7e"
							}
						}
					],
					"id": "5c9c8779-7a8c-456e-913d-1c04675107fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "418d1994-6f1e-4e0d-956a-4ae3a6f5e1f0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "d30e0930-6828-4635-9ee7-0f72369f1390"
							}
						}
					],
					"id": "985dfe8f-1da6-4a4a-97a4-6679d80ed01e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "6e1e442c-024f-432a-ac77-2d2b8fd5b0c8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e9223180-dd71-48eb-9b9c-59a3aceb504a"
							}
						}
					],
					"id": "2aa638c8-56c0-46c0-96f2-bfa4bd034241",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ee585171-a888-4731-ba61-441c8d3c8c1d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c9ac241c-d44d-4fa8-b49f-a22135135aa7"
							}
						}
					],
					"id": "ac2a3ddb-c5fd-4a00-b7fd-835e379f6be2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "9773e1a2-9b2c-4c03-94ad-acba8c578235"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "88f8cb8d-c8ed-401a-933f-c7f65398e141"
							}
						}
					],
					"id": "77da4758-1658-4bec-b15c-55be0cd660cb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "cb3b6e84-85f0-4974-a72a-6de3893780ff"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fd073ca4-d96d-488f-b906-5d892d3efa07"
							}
						}
					],
					"id": "d7884ff3-d6be-4b77-b9de-8d2d7b054b07",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "16a8b533-cb85-4935-bc43-bc6ed5a8d772"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f3ae13ab-2a09-4a66-bf3c-947c087a5f68"
							}
						}
					],
					"id": "b17529bd-1a79-461e-95d5-519784c44bb4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "0ddac1da-528a-4809-ad60-bb230693244d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "41b56400-5fc3-4cf9-87bd-9d9b8618b547"
							}
						}
					],
					"id": "424bdee3-7556-43b9-9bcb-ebd9243f7151",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c5c035d2-b9e7-44a5-93aa-ae6665233611"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bd61db54-f15c-4fcb-983e-78f520fe4142"
							}
						}
					],
					"id": "42097278-f3ac-471b-88da-3702665b4b15",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "d3f9953b-2fdc-4873-817e-75f8d8b53a13"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dbf9292f-9c2f-4732-b091-d12f8e212076"
							}
						}
					],
					"id": "7598e0c3-34a8-4d94-ac09-e77c1247025a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "95eaa24c-5e2e-426a-b800-e7bf831efa52"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "a7ad38f8-a006-4ae2-8ed4-88afac9f778c"
							}
						}
					],
					"id": "45d72634-f1df-44aa-95c9-ee00be494ad8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "471a8a12-29e3-4893-bd65-849436838bc2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b38c1b89-c2ee-4321-8a6c-0f9bcc4bae79"
							}
						}
					],
					"id": "022c2c79-fb72-4acc-b69d-ad56da582a47",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "132b49c2-7ec2-42c6-8792-955e99e2ea64"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4b23cdc8-cd14-4596-afa8-777bd7eae47a"
							}
						}
					],
					"id": "1eea7232-6ba5-470d-8b56-cfd3026b18af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "7aca0024-ddbd-48e2-80bb-30024a3d4547"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "5c16491b-ccac-4ffb-b00b-7ee10a5023a4"
							}
						}
					],
					"id": "7d7882f0-858b-455c-b4ed-3aab87327f44",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "92c3ec49-9e60-41dc-bba5-30fb89b84a7c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "87f76662-f741-4617-a50e-17f7446dc31b"
							}
						}
					],
					"id": "ffbfcded-5d39-4139-928b-c244bee75f70",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "dd62c91b-b84c-4cea-bf26-34c80a584940"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7c0d2818-74ae-475d-8f90-dcb040a686c1"
							}
						}
					],
					"id": "ee658208-6322-40ad-a766-faef751fa85f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "a8cc2c02-344e-4be1-ade2-67bbafad03b0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "f789e459-355d-4cc6-925f-76a91ed66bee"
							}
						}
					],
					"id": "f18ef013-0cea-4376-8095-6c0cb1dc79ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "563d4395-d6b1-4785-a4aa-f1f20b157bc0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "39d348d2-921b-4192-bfd5-54ef42b158a9"
							}
						}
					],
					"id": "6610f2d2-7778-47b8-be28-66a6eda31b87",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "aaa4f1f3-c23d-4c9c-91c0-0fa091cd5442"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b0a8bc20-87fa-4626-98a7-74221e82dbab"
							}
						}
					],
					"id": "72b7d3e7-20ce-49ed-8553-d951df90f225",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "a72671b7-c319-4511-b9ea-f96b926748ec"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ae120928-24a1-4f8f-ac99-234825dce14e"
							}
						}
					],
					"id": "2fe75633-0b9f-4878-aa17-8f8b7599f8b6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "3452f7d0-eb92-45ed-9127-905e72635a55"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "72401ca0-2668-4750-a71c-1df8ca8fc484"
							}
						}
					],
					"id": "80edd54f-d2b0-4429-a204-e7d411bb0fbf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "1822074c-0515-4658-8c76-84f6c30252fe"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "97298768-cb61-4b3c-8f0e-c59ab7240992"
							}
						}
					],
					"id": "17ba14de-a844-496c-91b6-6382c131c957",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "5ae44b0b-c5f7-4340-95f7-51de8e4d290d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "d745ca96-8964-469f-9bdd-36af38850563"
							}
						}
					],
					"id": "b08668c4-f055-441e-8da5-ca756268d2d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b71a1f25-ce61-45b4-9728-e4910462d066"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dada28ca-6d7d-49a4-acb3-408a80a272be"
							}
						}
					],
					"id": "629a594d-9ced-47f6-a88b-95b1f0acc649",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "8f021088-7531-4c0c-a7b4-60c262056455"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2ab77867-144c-4bd4-90fd-90312ee0dceb"
							}
						}
					],
					"id": "32f856e0-0145-45a1-b6f5-c1bd26d386dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "f714f5c0-b2a0-44e8-a8cb-c565b5872cd0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "f4f996b9-814d-479a-b048-e83706759028"
							}
						}
					],
					"id": "a08039dd-9a68-4671-80a3-175067d4b28e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "a46082d6-61da-411f-bf35-131ef1809ac5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "71264dad-1fa9-43fd-a0be-c402a8fe4e8a"
							}
						}
					],
					"id": "03713f0d-84bd-4f3e-88a5-6379b2772a14",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "82e7aeb6-5dca-41c5-899a-41c52d3405ca"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e0dda37e-9b81-417e-bcc6-c1984cf9c4a5"
							}
						}
					],
					"id": "c71960d7-5257-4093-a0d5-846c91998c16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "4ef388c4-062e-453f-8ab6-96eb42d7c933"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "eed29b5f-d091-4175-bfbe-cdb387fa8288"
							}
						}
					],
					"id": "cb984257-14ec-400e-a75a-65ebd5b6d727",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "9fcd7da8-d8d7-4567-b2db-882e4dfa1a0b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b8f0d06c-0b96-4dea-97cf-6c344d7e57a2"
							}
						}
					],
					"id": "4f9711cb-2551-418d-8c45-7b6a74377bae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "3dd75d4c-88a7-4e9d-9dce-e92c784e2dd3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "951367e8-2510-4fa1-af7b-599850daeab4"
							}
						}
					],
					"id": "46a80645-3f17-49a1-9a23-17a9ef0cfa98",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "013af327-2eba-429d-be95-7b9bbfbcf3a3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "4dbc22ed-1c05-4343-a282-3616d128b840"
							}
						}
					],
					"id": "bd09540d-bd54-4ff4-895e-8e1af3185b99",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "fb75b467-62e1-4e3a-826e-b164664975ad"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e6dd4866-3e6b-4eca-bdb5-f837b252ee16"
							}
						}
					],
					"id": "6db6da39-3ddb-45d4-b2be-7fd8fa79c8d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f7d66862-4dcb-43c8-a9fd-0c9766c48559"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1871b002-888d-4753-8d13-c58dd181ab2e"
							}
						}
					],
					"id": "3e364fc5-0af1-4c27-82cc-a24745e96658",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "26fcb288-e771-4edf-b059-58c78269ba59"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "b30e8aff-5205-423d-8581-28ca0982e313"
							}
						}
					],
					"id": "f3a17206-d681-4d8c-9477-8d7b9cce06a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "35103c67-9316-44a4-8265-06dbaec0bccf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "15ea99d2-980d-4ac5-be2c-146be56caf7c"
							}
						}
					],
					"id": "841913d8-0205-407d-bd51-1415b76752bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "63a9f934-ec85-4829-b87f-68f271a19a39"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "30d9ae18-c4de-4222-8270-f319a62618c7"
							}
						}
					],
					"id": "faa48225-3714-43a9-bd6a-6e7b266a2b62",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "b78b299e-dcad-4018-8026-4079a14739b2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "2d8fdc03-ba51-4aae-8f7d-791413dc361a"
							}
						}
					],
					"id": "019e8345-a47d-4f7c-9d1e-6733be688ad7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b2d2eff9-c2f2-43f4-b850-18dac070cf8e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "da5b70e8-97b4-4589-af89-6f2f8a68bdf2"
							}
						}
					],
					"id": "a1d4a609-5bc5-48c6-9361-655f665a58dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "2aa84a3f-2de4-44c2-8ff5-90af5adfed0b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d2f15878-ad3d-41a7-bf94-24b84a0082d4"
							}
						}
					],
					"id": "d2834c58-1c19-4032-895c-a43d4128c6af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "63c96906-f2c8-4e7a-8fee-1e58e30d0419"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "e871eff2-690d-4d18-861f-417d75aa8b40"
							}
						}
					],
					"id": "a48e12aa-4222-4a3d-a64c-49a6112f973c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "8ee36f8a-fc3a-4af9-a2db-95d802b4b2f2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b373b97d-2913-4d24-a1dd-a1a5d3536c05"
							}
						}
					],
					"id": "fd2c02e4-23b1-4625-a9d7-0a68ce784cc0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "5a5ecb32-a157-48a7-944f-2f65e4b820b1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9abc1706-fbc1-4592-bc39-5bc441b9d61b"
							}
						}
					],
					"id": "41c4b643-6cd2-47dd-b92d-c971fed3c652",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "e59c0865-8f22-409d-85ae-f8c834339a8a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "157e9a1b-05b8-4763-8cd7-8c9de6009259"
							}
						}
					],
					"id": "461910bd-9f70-48da-b880-ee8eafdd6e94",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "3590276f-2b87-4fbc-a35c-11dafb212799"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e174b679-a891-42f8-b84d-cdd9f1a5a7ff"
							}
						}
					],
					"id": "aec365d7-5c1d-410e-8986-6e7ad44cf052",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "1e9cbfa4-c0a7-4d4f-89ea-a51376441176"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a50b061f-48ee-47a6-bd8b-0cf6ff05eec3"
							}
						}
					],
					"id": "57487172-d56f-4846-924f-bf56605c62cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "447804c0-599a-44b6-9981-206b2d4e1823"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "8e6974f4-452d-427a-8741-5b139934c766"
							}
						}
					],
					"id": "60f0efce-f716-414c-8029-136f0c6b0f56",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "e8067954-932b-4286-835d-01c5a3f420d3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1abb7ce3-1de4-44ea-8cae-e4519baf0967"
							}
						}
					],
					"id": "625c1a9d-d845-4a2c-8778-4ad226c88ff9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "3d3cd207-b221-47a5-973b-e268ca74e0ec"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2beffdb1-9b80-44b6-84a7-ac1f9ae1f344"
							}
						}
					],
					"id": "86a21fe2-66b3-467f-a352-d5e9891917ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "b8424265-41eb-4d69-9685-14a57f8b135b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "1cb8b64e-ff79-4e25-b361-dc82ddc4a33e"
							}
						}
					],
					"id": "670ed1ff-5253-40c0-ac8c-c115f4a84613",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "7aa02f69-00c6-4865-9d02-e3ba719a60d4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0875386a-83d7-4735-8b1b-5537f61e6f76"
							}
						}
					],
					"id": "621f18dd-7afb-4622-93cf-998a1544fb67",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "6b282aca-b5aa-4cf6-93e5-2bab2c620514"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c397bbe8-887c-4a83-8f89-542125c1a629"
							}
						}
					],
					"id": "1ac87088-afad-499b-8dc5-97cfb59a6345",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "d17c440b-e229-4f9e-8119-a53e1459f5b3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "530a8c6d-5184-4d7a-a2b6-06248529b35d"
							}
						}
					],
					"id": "37a3960b-65c9-4742-9ffe-1a48d8078508",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "7cf67cc4-3af6-4e42-afd4-901df5bba9e3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "cacf04b2-6eed-4208-a323-87b8917d8a78"
							}
						}
					],
					"id": "73149c9c-66a0-47e6-87da-30fa1eec1691",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "841eb94c-6634-4df9-adf7-5e7127d3e1df"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c340ef61-a75f-46c1-be5e-b38af2d8add1"
							}
						}
					],
					"id": "2ae7f9e9-6afb-4986-889c-6b792095f383",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "492c74e1-a038-471c-9ede-09d2cb88eebd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "d4946a32-0ced-4044-86f4-cfff131de873"
							}
						}
					],
					"id": "1c209c68-2ec1-418a-b91d-67dc8dca967a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "96393529-fda7-4315-b3c5-310ea7a90ecd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "14fa9d3b-23df-4638-b65b-8e27ab9d06cc"
							}
						}
					],
					"id": "253c0c67-c590-430b-be07-d458e829d2a5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "d54b779f-5c37-427c-80be-cc5d00aa3062"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3ef34aa3-2fda-425e-a0a3-37a962f7ec3d"
							}
						}
					],
					"id": "f935f527-9f7e-4a51-b694-23c7b3269581",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "377669d2-12bf-4810-8245-0e5a3b2b7e55"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "edc6f52a-61d8-4ad6-8f7a-76d39545c8b0"
							}
						}
					],
					"id": "47a093f1-715f-448f-9820-10084ce947ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "75de2f90-6262-4d05-a354-0b9530450b3f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "957d0f5a-bbc2-4468-bdd4-8003e3ab7380"
							}
						}
					],
					"id": "c7dedbdd-5c0f-4c27-ab55-2d65db728870",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "33a2f67e-2dd2-4182-b528-8dc4578b29a6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f87a9d87-3a46-47a2-9745-7fb8b7883b5e"
							}
						}
					],
					"id": "c333aa5b-ea30-4034-a140-f8463272142d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "c9de31b9-fa12-49f6-a3ce-c9beb62e0a6b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "30ab2f58-9c9d-4708-9a1e-8c67b1ad2c7d"
							}
						}
					],
					"id": "3e4be281-cdd0-4ab4-9553-1f116f5a2683",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "597948ff-c6ab-4cde-9dd0-4f685dfe6156"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c792766e-3883-4b34-825e-3945d682bbe6"
							}
						}
					],
					"id": "cdbb74f7-5bf2-4099-8b90-b4fe7c516dbb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "a730ae1c-d166-4ec3-86e9-77a09510ca02"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "83a60dcc-29b3-4671-9629-c426aeafac44"
							}
						}
					],
					"id": "d371b5db-93af-4e50-9e95-6f5ed7164ccd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "6b7d34a1-f445-4d0e-9e06-c168491dac83"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "49e2bcc2-366e-4d18-892e-5474cac69805"
							}
						}
					],
					"id": "c4631987-7815-4897-94e7-ed3d9505573c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "95f4ecfb-8499-4c42-8fc8-342f0045b5fd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "06f42f9a-ef3c-4fc0-ba3b-70d6819fc48c"
							}
						}
					],
					"id": "23df749e-2f66-4720-9daa-bed5d6166f9c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "25b5ab22-fc89-43e1-b40c-5f69107ed042"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5c73ebc0-775d-4bcb-a593-70228c11d3b4"
							}
						}
					],
					"id": "5a1cd418-500a-4565-9ee7-a0cad52b20af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "baf811bc-a3c9-4cd3-afc9-89f0517d7da6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "c70b1ae1-39d7-44ac-b88e-a37b997863cc"
							}
						}
					],
					"id": "a3e33108-5d59-4bb4-abf2-bf0f59ba281a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "2a6bdc5b-0f96-4c3f-8ead-fa6e27422fd5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dbdc9a96-60ff-4080-bf02-556363366cb0"
							}
						}
					],
					"id": "606ea6ad-1720-4118-b2c7-f38c8490abd8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f3da8d4f-8f10-4cf9-8d70-f58cd2b70d08"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "79148b17-b8b1-45dd-a21f-702bf6e07de8"
							}
						}
					],
					"id": "efd1415b-c3aa-4d7f-a3dc-27a4cb25d1a9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "3f5bc377-d341-4122-b14b-e0e21995c1df"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ea2bf9a7-617f-415e-a504-d555d877f764"
							}
						}
					],
					"id": "ce9cd823-10f7-45fe-b076-1cd558b5b0d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b307f470-be01-48d1-9039-ac9b2a9cb85a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "44af3058-2918-4d7e-9e57-6ae23d17b208"
							}
						}
					],
					"id": "de06baac-ed4d-4f7e-a546-5859e5766458",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "659688d3-0609-482e-b08c-1369bedb6b1d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c8cabd32-5f9b-4d73-9e49-80f3e4a04c1e"
							}
						}
					],
					"id": "7d3cda11-8e50-424e-b94a-5102d96ceb83",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "61dd7792-8472-424a-af41-1c1132bce4ff"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "8d7b099d-6141-4ea7-8d15-d21a9171dafc"
							}
						}
					],
					"id": "c13817ce-238e-474f-a61e-2ca667501260",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "3e7a8756-0f1a-49d7-b1c1-cf72bfcc2587"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0f8b0da7-cadb-4a69-b165-f1b4e6ae24de"
							}
						}
					],
					"id": "68513655-66d1-425a-8ff7-d0d853cef2e0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "c21b0e98-80d1-440c-977a-be25aa39a881"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "461cb9df-1264-4afd-a516-a22b4cca9941"
							}
						}
					],
					"id": "8231a1a2-ccea-4c19-96f8-838b30a1c758",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "2a0b2f1f-6814-41bc-8e3f-0010692b0d47"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "32494498-4202-46b2-ae22-0ed42c2c7300"
							}
						}
					],
					"id": "85726709-5cb6-48b0-b2fe-bc591cf10b0b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f4f4c144-8069-4955-903b-0ce26e594275"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f6c8fd48-d56b-47c4-801f-60f9b25feb5e"
							}
						}
					],
					"id": "cba1ad27-1afd-40bd-8948-0eedafff00dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "7bffa746-5406-4b82-8878-c1f127ad1895"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "00341d2c-aaae-48a7-887f-87a9a9606895"
							}
						}
					],
					"id": "91d76678-a132-4a47-bcb5-aa59622210ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "2af36223-398e-4cd2-a3fb-0dcff4a67775"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "1779835f-d798-4dab-9f15-be73cb304c56"
							}
						}
					],
					"id": "8399cc47-0f93-447a-bd5f-25c654098ddd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "5e7e56d7-04d0-4efe-8eca-c4dfc38a695a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "afe6c54a-73a8-47ca-80ad-096a8402f3cd"
							}
						}
					],
					"id": "69cc465e-62f5-431a-a7fb-2f43e444c884",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "0419c42e-f13c-4484-9825-92a81c79f49e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f15e9538-fdb2-4f8b-bcc5-75a483fecd8c"
							}
						}
					],
					"id": "0a630798-c5d4-4c72-bd7f-0aee97b6531f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "9f2af610-49a7-4e1f-a2b2-f3a9c65146e1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "e36c0dba-eb44-4f73-acb0-6a6401bded38"
							}
						}
					],
					"id": "83ce5fc3-5a42-40d9-ad53-e0345d87549c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c34d5603-9f10-496f-ba64-dc205fd79615"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "986e8249-60be-4470-b075-da30575d51c2"
							}
						}
					],
					"id": "b0e3814d-d9c1-48b0-a921-a061cb05c81a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "7a8d02d0-512a-4ff1-bacc-d9fd9f2e5696"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9ba4d9d1-2008-4fa2-b5ac-676b68a4d22b"
							}
						}
					],
					"id": "b08393e2-e54a-4415-b167-8a067668c536",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "b4d94898-351c-4243-a279-287bd0c4991a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ec032ca3-9bb9-4978-b472-d8d1afb09780"
							}
						}
					],
					"id": "6000527c-07ac-4f69-821a-0fe99f88fd62",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b4aee68e-c4ca-4e04-8b31-69b332ebe3a9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6795e17c-3661-491a-a862-0890fab7d2f5"
							}
						}
					],
					"id": "f86f6e34-4af0-4e02-8c9c-89b3925ae112",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "2cdb6019-9624-4c7d-aae8-d3f5dde20164"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "78967bab-a8f9-4ac5-9b97-38cfd72a30f8"
							}
						}
					],
					"id": "432abc53-5378-48b3-a521-b20dda82cdc2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "3426e2cb-aa5b-410a-af16-541b99a30654"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "b29df955-4a1e-4a93-b082-8810eeb5bc2f"
							}
						}
					],
					"id": "4140c8f7-e7a4-4d68-9aae-8118922a6639",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "dae2acc4-2814-4bb0-af06-6383c40abfd7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ef80dd92-720e-4afe-93ed-6a6fa310f3a5"
							}
						}
					],
					"id": "353214f2-8621-47ba-893b-2890baf83494",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "4933838a-8dd0-474d-8fd9-6964300e7c99"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7f5a48e4-8524-4b43-acc7-9da1d054f359"
							}
						}
					],
					"id": "58260ea9-bbb1-442c-841d-d698d53a353e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "f8b974e8-6e0f-4799-9010-890550e589c1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "1613dab7-7e69-4894-84b8-ab6d7f4913c6"
							}
						}
					],
					"id": "109452f3-01a8-4282-98cd-3e21f422f4ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "69033b11-6095-4f6b-9124-7e688eaba16e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "45ca7fcb-2b3c-4be4-a603-d2ef98fafc2b"
							}
						}
					],
					"id": "a69f1f91-b737-4edd-84df-61d7dfd2c015",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "3ab579dc-f541-4be0-8216-cded02b332fd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a46df21c-9e7b-4e5c-8eeb-813b0928bc99"
							}
						}
					],
					"id": "acd9e28b-eb48-47f1-a921-ecc4d0094f5f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "35e1c20d-fe15-46fb-9ba7-7e378c5e52a9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "a4efe1a9-aaf2-4216-84dc-f6932dd27fbe"
							}
						}
					],
					"id": "615a5582-7563-49f9-a90c-4d7575cf1137",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "44d7dc21-47a1-4a14-b157-f9c2f398b76b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "49daf750-f2a6-4e0d-be10-afebf9febaa4"
							}
						}
					],
					"id": "fcbaa7ff-5ff1-479b-80f6-a246c3110ae9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "1052abaf-7b13-4776-8c44-810c8692ee63"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1f7119af-8d0c-4751-899f-8246290c330a"
							}
						}
					],
					"id": "b292c484-1280-47d6-a515-98c33a1ce235",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "b98acaa1-83dd-490d-ada3-a6a10a137d8b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "c48757f8-4eb5-4b40-8d1f-b9c268043c2d"
							}
						}
					],
					"id": "d3b8d46b-631d-424b-a945-aff52aa34962",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f7542b25-cdc9-41a7-a1c0-13ec450f5811"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5cdf32f5-16cb-430d-8787-3ef0e7072261"
							}
						}
					],
					"id": "f5251423-812b-4fe7-b9d8-123101162d9d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "207fc4e3-96d5-41e7-8c0a-3636ff666dfd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "36b0816a-681e-42db-9c2f-e9a3b3ca7ea2"
							}
						}
					],
					"id": "c227ba24-f02b-4a72-adc1-590e856584ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "d44d66ee-b538-4a46-9daf-8302d78f3177"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "5d01462d-2b9e-4728-bdbb-b28a34803404"
							}
						}
					],
					"id": "436342d8-005e-4ef7-8bc3-8f9c15b952b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "ca060b85-ce40-4cf1-a4c4-50ca5d89b196"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c9f47127-82b3-4932-9212-0d7b8f0f8f24"
							}
						}
					],
					"id": "1ec8ea2c-8023-4265-b68e-2691d0f5319a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "af21f383-9ca7-43f8-9594-d2ce7a0139f2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1ae059a6-7332-4307-a70b-5d35e53ca04c"
							}
						}
					],
					"id": "b750339f-257d-4c6d-99be-dcc92787378b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "d60eec51-5041-426c-a5ff-7bf824f8d28f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "3363f295-84d1-4a54-9ec4-ee44da82395c"
							}
						}
					],
					"id": "73aec078-6c42-4e0e-808c-b126617a7043",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "74f856d5-1545-43dc-ba64-4314ac7892d6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "eecd11b3-236d-4fbc-87be-690f1d64628e"
							}
						}
					],
					"id": "592ae4da-0c1d-4e5b-a88c-b7b517b90413",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "5f19b124-b3cf-4f95-94b0-22c60671797b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0b1027d0-f812-4347-9ee7-b998185414ef"
							}
						}
					],
					"id": "91813936-5e1b-4008-b2d8-e121771c0d8d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "9bf202af-d13a-4540-bde7-29a9fb65287d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "14f92be5-8811-4d97-8990-710465216c16"
							}
						}
					],
					"id": "27318621-6fcf-4265-8135-0fa7e27d7ff7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "e2eacffc-4b0e-434c-aa39-43f7a83a87c3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "50065418-8181-4516-b03f-7f54f2c14704"
							}
						}
					],
					"id": "42ed249c-2688-47b6-b0f4-7373b602ddb4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "879ac444-0a8c-418c-a36a-0017ead32026"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fbbb7b6f-8480-47b9-a686-08972262aaa4"
							}
						}
					],
					"id": "e6f50d20-ad00-43fe-a014-3b9944aeb672",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "75bb17c8-152f-4dcc-8b80-695e704cc9e8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "c3094c22-6b7d-4748-ab3e-cdf3f09ac429"
							}
						}
					],
					"id": "00fdc9dd-dd70-4c1e-8a2c-444b69ceba60",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "13b4db37-4830-4614-8235-e939e043edc8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a175eac5-bcda-4386-b9af-06b3dbccd63a"
							}
						}
					],
					"id": "68820fb3-a68b-4701-a2b0-fe2fa853e193",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "029f98ce-8666-4541-b6f0-e6abeeefe12f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "28974604-36db-47a4-9571-1789baed347c"
							}
						}
					],
					"id": "c7bf7994-cb94-4b1c-bf0e-6b38d948eece",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "c3c02dca-8574-4d50-9afc-9b1ef5cbc31f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "85d3a366-848e-453d-a462-a37962f38178"
							}
						}
					],
					"id": "8ea95a51-3f37-4677-a89e-a3fd4a432e47",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "4de9b442-bbaa-4d75-99c1-38196301f266"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1831438a-a054-408d-9720-fb8c4e37fcfa"
							}
						}
					],
					"id": "6c470d1b-75e2-4f6b-9d7f-9c4d0234e915",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "88e54a79-02c9-4bbb-a8ce-50f5ec9d6b77"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "cbb4c76c-722a-4ad3-9d57-08d93284f566"
							}
						}
					],
					"id": "8d20086d-c787-4103-91bb-6d277c79c45e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "b1b93bce-a1b3-44f4-9eed-c3c5c8976c83"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "dd80d0de-8d03-4fdc-aa4e-bffa2f21a489"
							}
						}
					],
					"id": "0fdd01a0-a517-43f0-a33d-bc4260e1ea08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f2fb7c36-a28a-4da5-9ba5-d07f8e8fca3e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e033417f-273c-477d-822b-b8bb79007f34"
							}
						}
					],
					"id": "826ce32f-9dfa-418e-bef2-f92419bf4efb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "88ef82cc-22f0-4e00-b522-d1b8b5c53b3f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e496f1bf-fa6c-480d-8183-cd80d9d4c5fb"
							}
						}
					],
					"id": "fde9b9b9-069d-4114-93e3-f566cd776df0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "8ae7fba8-b9f3-4e21-8a62-760123654ae8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "2e0723f3-9e54-47dc-b7a1-c0ee326bfa88"
							}
						}
					],
					"id": "116b47c9-a8e4-46ee-9a78-1f873fcbe266",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "3b4b8118-60ae-4e08-a46f-139a2afcb9b2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ee73cd48-9485-440c-90b8-9f71ee34aa3b"
							}
						}
					],
					"id": "78cf6bb1-171e-4e9a-905e-bb8912124b14",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "fdd04482-c16a-407b-a22d-28ddcfe713c6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "36e3ce14-9bb8-47ec-972e-6444de2a9a03"
							}
						}
					],
					"id": "10aa5e57-3b9e-404a-ad06-f7ec5fe370c1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "4128c9b3-6d3e-4943-81aa-360a722dec75"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "9719a0cb-2936-4f18-b531-11188f39b4fb"
							}
						}
					],
					"id": "1372129d-7aad-42f1-921b-d7e371f1b54d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b9bfef21-c1c4-4545-be8a-b4c229c32d7a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ab0e7f40-44aa-45db-8dae-de006ac0d278"
							}
						}
					],
					"id": "81f6eaba-51e5-4c1e-b1fe-97de1064c327",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "d15f0c59-4619-425d-b1a9-ee50104e92c7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "addec433-0e8f-43e5-8c71-1c8d43f85afa"
							}
						}
					],
					"id": "e12594c4-7310-4d32-ab81-38eefacb88b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "321a729d-83c7-42ec-a1d9-fbad8ba58dd5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "5be5075a-c9ae-40d5-974e-f7fb3a959f28"
							}
						}
					],
					"id": "32318841-6332-4315-8e33-e0d5ca456f4b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "23894de5-fa92-4689-9f41-277741c97092"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d8e25b54-11c9-4584-8b63-59e6b860e125"
							}
						}
					],
					"id": "6b747457-949c-4940-81b0-47a88ee1cdfa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "4ae45001-9375-484d-8cec-5c17a99da551"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6893bc67-6e0c-473c-a848-d52ee36c197a"
							}
						}
					],
					"id": "602d4d9e-46b1-4723-bc95-8b5c90537692",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "a78a44fc-c05b-43e5-b63d-a375fa52ccf8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "dbf62f0c-df60-41c5-9c82-f2cd39552f78"
							}
						}
					],
					"id": "0d0a3258-203b-40e5-bf03-7c6100805841",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "723d5f93-a4ca-4eb1-9f78-940bf6037acd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "00bd3c0b-4230-48d6-8ac7-3eda38fdb32b"
							}
						}
					],
					"id": "51932bd5-d06e-4099-92cf-0760c90833df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "572baeff-e93d-40be-95ac-e80957d90fd2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e7b31807-2b5b-4b35-ad0c-5076687c805d"
							}
						}
					],
					"id": "19b2b0b4-7bb4-4804-8c3b-ef8a94ad18ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "735db007-51ce-4d03-a2a5-cbe41dbfdf4b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "04d3d10f-08d5-4d05-9218-96586987fa35"
							}
						}
					],
					"id": "326c90e4-bc40-4ddf-8e5f-4cd5f043046d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "3da1dea4-316a-4908-b692-3134074fe6c4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "37c09da1-b115-4524-83b9-6a3018a18a92"
							}
						}
					],
					"id": "635b6183-e1fd-4fe2-9908-99b503aa04cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "fc499179-f09d-409e-bb81-c1b552c9a738"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "24c8be70-748b-4f41-a1ef-1ef6489fe955"
							}
						}
					],
					"id": "6a174670-adc2-4b32-9efa-522c9fb1d0d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "57fe6706-c50e-4434-aa31-be874a74a264"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "14fecbed-b5d4-4a55-81ea-9a5b439aa71f"
							}
						}
					],
					"id": "062bc433-6199-4e64-adde-c7a875dbbc5c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b57c2782-985b-4e5c-ae52-d355de043403"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b6d9dac7-c590-43b4-a138-85b600eef841"
							}
						}
					],
					"id": "c479866a-e910-475f-bf61-b95e3c4c971d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f2d4e556-9f60-4dc9-9e10-76523b662a66"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e39d45bd-4c47-4792-90bb-d2a2eeec024e"
							}
						}
					],
					"id": "761fabe1-0d7c-4d76-9fe7-9e422fafa177",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "d7e45ea6-560c-42ea-9eb5-7a9329c997c6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "733c979c-3c62-45a9-bac8-c62e9cf00e63"
							}
						}
					],
					"id": "6ed6f13f-eae0-43c4-897f-5db5f436897f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "04958c93-b4ec-452b-bf48-bc0589d98a4d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a4378ca0-af27-4e61-a47e-233f9584db6a"
							}
						}
					],
					"id": "20770bcd-1005-48d3-8a79-406ba8305b77",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "7ad441ce-0790-4933-9300-60de4aab375c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bc054e2f-fe9e-4c6a-9532-6772b68cac43"
							}
						}
					],
					"id": "a0b6574e-f0c3-4ad7-ab83-fb6f037499fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "f8b0e1b3-fd95-4e1c-9ea5-56ec58297e86"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "705222aa-f4dc-407d-a3e9-2fa057da8628"
							}
						}
					],
					"id": "c8dc6dca-1a4e-4bbf-afcf-5bf60e0ad193",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c434063c-2cf3-4cc8-9909-661f7a26e545"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2fe80c3c-3922-4381-bb77-3874e8f0adc7"
							}
						}
					],
					"id": "de300377-14c1-46f9-b659-41dd6d05b158",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "0158c634-2979-487b-9ab5-56696b21bc16"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e6f52d93-08cf-4414-b0a9-1ad87a0c9306"
							}
						}
					],
					"id": "e17ac8e1-df6e-47d1-8f34-820e9139cc81",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "b0026cf1-f059-4e92-a9c0-506b6c0110e1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "e43a08c3-2bb4-4e7b-bb86-4d5c50fc19ec"
							}
						}
					],
					"id": "a7fca704-c051-43f0-afa6-a37775061e2b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "53da8390-3ebe-4847-9e6a-30b2127aa6a9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5df86912-90d6-4202-acdf-3caf151260f3"
							}
						}
					],
					"id": "d595d9ab-d22e-44eb-bc76-abde5f28ae5e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "d882c186-a5a6-4167-ac83-8e64330190eb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "203d1d01-0c3c-4b6a-9cf6-9a7dbc124e50"
							}
						}
					],
					"id": "7b0b3391-e3b9-4bda-8be4-b97c5921b5f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "2a6ce157-0cbe-4fbd-a81f-7e6558163071"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "6c8bbc53-348b-493d-9a04-7b3001c17386"
							}
						}
					],
					"id": "183055fd-7f75-4712-8e89-6750fc90b4d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "8d3b1e5c-4b55-4e7d-ba66-1685a4001e04"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "251b4627-f94c-416d-8692-04ad4f8ff958"
							}
						}
					],
					"id": "770f24da-4ebc-4bea-85cd-7bce821353ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "85066d96-3ba3-4e3e-99ec-5ab8e817af01"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8a2d3d28-c3e2-4f02-8671-4fdbee5960cd"
							}
						}
					],
					"id": "f7eb735f-2891-441a-9633-715af5dd7631",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "014ecb9a-541e-4083-8902-30d2312b5173"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "8ba31e2b-3b2a-47ca-966d-240c052a557c"
							}
						}
					],
					"id": "9c48b61a-1e5a-4b47-b1fb-50fcfebaf8bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "4f644116-92d9-4bc8-93cd-77ea60026544"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "81e8dac5-961e-439e-9d61-3e4f7d1e499a"
							}
						}
					],
					"id": "7bc319e2-8792-479d-9a7e-aa27a2f7d6cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "e2b28880-a989-48b9-9662-d02ddb6dc0a4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ccda9b81-5643-4d38-b1ed-1e0bb823551f"
							}
						}
					],
					"id": "6d898964-c90b-4eb5-8e0a-a0cdf2283044",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "635fa490-57a7-4335-9883-2cec6e3566d0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "4de6f5f7-d90c-4c7e-a28c-d3a36166f44e"
							}
						}
					],
					"id": "e65793d2-228a-4752-b0a6-f056edf981b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "0b4f4ffc-9658-4ec0-bf08-932c156993b3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "22422650-24e6-4a40-854b-064b5bc7ac1f"
							}
						}
					],
					"id": "c0be4a3a-8b09-4aad-98e7-35a1b0a1d544",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "3a9db5a9-6268-489f-ab10-b46cf5f1205c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a9da26ae-5af5-4e9e-b2fd-7a8bc81dcc6b"
							}
						}
					],
					"id": "ce362e45-6e03-44a2-98e3-41c637707795",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "560b9e7d-1212-4b58-ae84-fa3d489d4b89"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "df0d1fd6-597c-4bbe-bc61-33b536daefab"
							}
						}
					],
					"id": "90d11d6f-f317-4a1b-aad1-e66b10e3d49b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "7c711cec-e1c6-439c-a800-63100e5c7a3c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "1748fe44-4d39-4a9c-bc26-401df26873ca"
							}
						}
					],
					"id": "0c68642d-7b6e-4be2-baa0-96bc66175e16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "47b816cc-6b69-466c-96bb-98ee01b31b1d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0cc9466f-2e1f-4a42-b966-a381df4cbe98"
							}
						}
					],
					"id": "61f5de21-9132-452e-b968-2da3cfd5cc26",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "0d41526e-6803-4fd9-95b3-d380ed6590ab"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8a9484b8-9b17-488f-a225-0769f1a3dc9f"
							}
						}
					],
					"id": "3bfb08ca-4eb5-41ea-ac1e-ba7178bf4486",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "20f2a0d8-743d-4c42-8160-b0618164b3f1"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "b4e4efe2-a973-4ead-a44a-a152af91a1de"
							}
						}
					],
					"id": "c74ad4b2-a7a9-4307-af36-95e797f65fb8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "1db8aee7-b214-403f-85d0-4aed147a3555"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "55d19407-8adc-4540-b569-f77a39fe34eb"
							}
						}
					],
					"id": "c95d2a99-354a-4609-af0e-d441afc5377a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "c720aff1-2d08-4727-9dfc-4a5f354645d8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "7d38e2ae-f0d9-4f0c-9d30-54718ee92cf1"
							}
						}
					],
					"id": "2a59b874-96e3-42ee-bb80-dac611f31df5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "e40c7998-3106-49bd-a299-3f44825d6aa5",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "3eec3f8a-5bb2-4672-8c43-7d6090b7e9f3",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "cb2471d5-6f76-4ebb-85b2-0cef58574a3e",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "3d8cdbde-ebf9-425d-bb07-a82c15b2b3cf"
							}
						}
					],
					"id": "f7ec40fc-17bc-4c48-8a4e-1f83f798badd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "8a372ff9-3213-4dea-830e-ea1108593072"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "10a7719d-4c7c-476a-bee5-d67a23bfb7b1"
							}
						}
					],
					"id": "b2cfa591-569c-4df7-84ff-4df1b819a0be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "f23d0a38-3888-4ac1-bb1f-c9b68093a1be"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "ed1b2e80-f0ab-409a-a5f2-534b860dffdb"
							}
						}
					],
					"id": "78d4f605-cf72-44b8-b25d-56ca7fe4fad4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "c1dbf3b8-1f1b-44a7-93d2-fbf6da0efee4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "51bb5b41-81ec-4480-9a99-86a5189a1533"
							}
						}
					],
					"id": "3f5dc0b1-72b3-480f-b10e-f1c8ffcd6f06",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "2cc4116d-47b0-4ed7-8559-249c979114f1",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "1276d7d2-5e13-4ff0-89b2-574a5a16e653",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "6daa40e4-ed31-4598-a70e-35827b0c2a0c",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "7ad89ff7-e6aa-4baa-b4d8-3c767efb93ea"
							}
						}
					],
					"id": "df4dec34-e521-4a5a-ba63-7813ba47c5e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "6fe8e570-7d12-41a9-931a-2a4967a22355"
		},
		{
			"name": "Setup Copy",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "45193212-82ab-425b-8c6b-1f4b7510b0b1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "791e3e16-634b-4a60-a596-1690a48348c2"
							}
						}
					],
					"id": "f09da2e4-df04-4d91-b771-2014d3231da8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "2c11d721-8f5b-4d25-a7d4-8096a4cf9937"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "91dbcdd2-6365-4e25-80ab-bf5dfcdbf7de"
							}
						}
					],
					"id": "1af81c60-c07b-437c-a6b9-2e2699501e4d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "38664e3d-da8c-4759-97f2-158b586ad0c3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1ea2df80-dbe7-48c6-9547-a6d8684ff84e"
							}
						}
					],
					"id": "e8315560-c744-4f83-a0e7-83f54b5e55a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "bf3feb4a-6498-430a-935e-ffb472000d26"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1d758ce7-d752-4dbc-b098-15ab875e3fcb"
							}
						}
					],
					"id": "edb8cc3f-6f69-4d37-ae14-75b71c0b64d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ad7a83e5-d03d-4811-b3d7-cbd4462b298c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "bede84d2-1b6e-4822-a989-f8d4be7cbd79"
							}
						}
					],
					"id": "86d688c1-4986-4b1f-9baa-f7d5486b5876",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "64977761-50d3-4424-a4f2-d83d804468f6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "73501cc0-112c-4343-ac99-76886f199934"
							}
						}
					],
					"id": "a40030f0-e584-4c93-bef2-e33c02770c3b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "29f24032-befc-4622-8ef2-fe5669fa43b1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "635b8cf5-feda-4ca7-93c2-dd45c84c6a79"
							}
						}
					],
					"id": "cadec71c-1a9a-4106-81d3-5ff0b560ca2b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "a4330430-0d31-49fc-9e48-0fd992102969"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ad4f1b66-42d8-45bc-8506-f6a000e12b39"
							}
						}
					],
					"id": "1350c973-a0c3-4652-9894-f7c0347596c0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e220c819-86cb-4bad-97e5-a7586e9afcce"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "d2c1ca5f-1c52-476e-8905-7bbd73a6d36a"
							}
						}
					],
					"id": "e6dfa85a-9c3f-414a-9365-5a822bb4bcd6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "9ae0cf1a-6756-48cb-8018-17f023d56bc9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "e6b3b426-ee63-446b-8d4e-a08ffc0a024d"
							}
						}
					],
					"id": "b04df78b-db5d-4233-9124-35cac6aa059c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "303e9621-1b74-452c-88d1-9738364a3e65"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "551882b0-aa94-4fb4-b1d0-e79321eb6b9f"
							}
						}
					],
					"id": "0f895115-4fcd-49c2-a888-78f76246d090",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "c705b8a2-5eac-42d1-ba4b-94125c535db5",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "b3d27efd-8dcd-476c-af09-3039b244d036",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "936f6dc6-9c58-4d58-92de-29dc13127dbf",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "da5f0fbc-6620-488b-bb7b-c75f1bd5b9b5"
							}
						}
					],
					"id": "4b6cac67-288e-44f0-b47b-e4a18e9571f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "e58493cd-2c8e-428d-9142-224d356be81b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "959b0c3a-89d6-49a7-a034-c0add9b07bf2"
							}
						}
					],
					"id": "bdcfdd51-b8a8-4936-b3c5-e9eb734ab11c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "01a4dadf-3401-4e10-8954-be424c78158a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "9c66166d-0679-41e4-9250-19ba89579f3b"
							}
						}
					],
					"id": "6965505f-29a8-400e-a351-1e751092cf2f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "f63bd0a4-adc5-4ce4-82c6-26bdadcc48b4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "36bd315d-d0fb-4f62-9f33-369a981be4d9"
							}
						}
					],
					"id": "8ecb8576-13c6-489a-86cb-bcce90f16e99",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "f01bbdce-72a3-43be-a3de-69cd80fefc69",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "4b8e25cd-4bc9-4fea-a779-5c4816de48a4",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "31635387-5960-40ca-be06-d981d0612765",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "8d92912d-827e-4deb-9686-cc3367dbd2b7"
							}
						}
					],
					"id": "a97a8221-c767-482c-9729-e63bcfe93a67",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "5958b76e-9a51-4b03-872b-d494487d97c5"
		},
		{
			"name": "Setup Copy 2",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "66c42058-ce20-4ee7-8073-40dcd9b643c7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "05ff8e02-2ce9-4bdd-b074-2eaf4c7a9acf"
							}
						}
					],
					"id": "882345e7-9295-49fd-8e8b-ca14fd156f75",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "96ed905d-4e06-4d2e-8c20-fb2da6e9a9bc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "736da201-b4ca-4bbd-9f7a-293cd54dc88a"
							}
						}
					],
					"id": "935fef1a-e58a-4b1b-b2c7-ac90cd684de9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "79938077-7a2e-43dd-99fc-097a3428fa78"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5f43016e-f101-4343-87c7-4440bdf8ed21"
							}
						}
					],
					"id": "0b7e84f8-f4bb-4949-aeb8-93ba85b954b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "363a7a21-ce98-4ce9-9902-a0e1bf6553e2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c37a5a71-b321-4cdc-95a0-18507ebf14f2"
							}
						}
					],
					"id": "b3630534-59c9-411a-ad8c-4303c913d146",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "07eeafe2-f0a1-4d81-af8d-c71fe0cfaed7"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "72117e9f-0a7e-4d21-aab6-c917f84a64c0"
							}
						}
					],
					"id": "567db066-5613-40fc-b014-d4a2a82c279e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "086f1714-6596-4019-8a1e-baed3bfb27c6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "d2fc3b2e-d8fc-455b-b1d1-4eb28d5b6753"
							}
						}
					],
					"id": "8fac983d-bd04-416c-a1b4-74d2f7dfdbaa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "929d3c23-a8dd-4ac4-9699-80a2ca4ce461"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b3dcafe5-6ea9-49af-9edb-75eebbf0c7a4"
							}
						}
					],
					"id": "d6f4ee17-8e54-43c6-8b41-2b48bd94f3c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "cab8bb5e-971f-4d8f-b9a6-4e276bfab568"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5e93a604-25d5-45f6-8ff7-183c1e2e4bbb"
							}
						}
					],
					"id": "2890defa-6286-429d-8188-8c67537c1f8c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ce63e03e-c13a-49e1-a49d-59e76b9dc79e"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "fe77e8f0-541c-4272-ade0-3957485e7fb0"
							}
						}
					],
					"id": "c4ef1169-595e-4682-8ed1-489d54cab36f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "39e83b6b-d421-4a39-a9e3-c22d0bb1c365"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "8e04ffd5-4c26-45ff-9376-d4fd744f18e7"
							}
						}
					],
					"id": "98617f72-d628-453c-97d8-f9e42cef40dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "b43ac5e2-ff03-43c5-adca-12fc205c8cc7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "3002f07f-b743-44cd-baee-e7cece39f400"
							}
						}
					],
					"id": "4bb24587-d782-4e6a-a808-cbf1513bd5a9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "62b52491-2ea0-4fa0-a505-3d71682b8a40",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "f6902601-167f-420d-b948-840fa55eee00",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "89091d33-375d-4a5c-9c0e-507dbc9517f1",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "4b20682c-595e-46da-886e-95ce39821080"
							}
						}
					],
					"id": "b8148197-add9-4ea6-bb92-3191b9da436a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "8ccd0505-6b3e-474e-9fbb-96a8e012efc1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "7328ae28-3259-4f6d-b79a-ac7adc9f1afe"
							}
						}
					],
					"id": "cf890f49-f5be-4b86-9781-e6372bac16c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "574874ce-7282-4097-84a0-fa53c03f25a4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "9d3516e9-5779-4b02-92c0-33700d628183"
							}
						}
					],
					"id": "5aabf7cc-723a-4524-9336-04c7378d11d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "b0e24cac-abfa-417a-ac41-4030f0e63799"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "c57bb563-57c5-4560-b23f-6bc0d22677f0"
							}
						}
					],
					"id": "6cc35c53-db8b-426f-9a64-53acfa55e8d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "18797bf5-cc5b-4f96-8875-ccfada3c9b13",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "a6e99609-fa27-4566-b8a6-892b00001813",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "a097c356-d082-4d23-931e-a953632308a9",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "9562c347-9126-4afd-b6aa-26766a96d996"
							}
						}
					],
					"id": "9e9b41b1-6bb0-49cc-8dcb-5c3a94c55b28",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "d739356f-5d48-4d0d-a5b1-6221197540ae"
		},
		{
			"name": "Setup Copy 3",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "2e6bcddd-fe08-420a-8bf3-b07066c510a7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "90916888-9ec8-4061-bddf-1f37d73ac0bd"
							}
						}
					],
					"id": "2261b628-157d-4f73-ab06-97926f404000",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "13e42943-a7ac-4aba-87e5-9c0d5ea9193d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "b2048ff3-60cc-45a8-9cde-1504c3a669ee"
							}
						}
					],
					"id": "a269b811-37c6-4780-8759-00a639b8d263",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "bb0b3596-c231-4fb2-b8f7-434bc455d993"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4e2bea2d-27e0-4daf-becb-7d20422fbd96"
							}
						}
					],
					"id": "bd91f620-9c63-482f-ae46-6604377645b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "4dd10556-2b7a-43ff-992b-7fab126e04b9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "71c14356-6d02-4a01-a4a0-4eb807668649"
							}
						}
					],
					"id": "4241c59a-82d3-4532-860a-56c047e5215e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5197cc42-0842-4883-a4fa-513c39a7a93b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "acaa22d2-ffff-483a-b91e-447e52ffd423"
							}
						}
					],
					"id": "363cb171-b3cd-4444-9dbb-637a61ee7d1e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "ab554554-d484-4014-ab74-c834cf5e46be"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "8141cded-04a5-4f50-ad14-40ad5eaeab16"
							}
						}
					],
					"id": "87a792bc-fead-4107-a128-a7d1119ada99",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b45a64f4-d8da-4458-a62f-37447b582c0b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6bf67b0f-7e34-4566-9df8-565a1512aeab"
							}
						}
					],
					"id": "b661c9d5-d035-411f-848b-bf1c3984443b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "40a31e46-3fd1-42b1-adcc-7d6c03d2bf81"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dc92b577-704a-437c-bbcb-68d668d02714"
							}
						}
					],
					"id": "c0d84ffe-2213-41fd-835f-e04ed6e43b2d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ccd277af-2959-46e0-8f57-863f42d4fb49"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "d917321e-c79a-43fa-87ea-80ee681fe471"
							}
						}
					],
					"id": "285e2ea1-fcdc-4b04-b5c4-2905070f283c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "26bb0fce-030b-44f3-86ec-aa11ab5e1520"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "0aef6ffa-b815-47e1-af06-48f6b480b554"
							}
						}
					],
					"id": "e74f628b-c99b-49e4-9d0f-42cd62b9abf7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "cbf13e99-a5d0-4292-b388-9807ff1e01be"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "a975960e-f6b7-4d1a-8377-9b803d1870d9"
							}
						}
					],
					"id": "73efa35d-a9eb-4d2b-b015-870d58b8fbea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "4ac53e10-724e-48e1-a1fd-8f9fb6094c60",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "df7573d1-1d29-4540-97f3-6fa945544b2f",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "cf52d8ad-4d2e-4b30-9f39-37f84f001730",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "187e5f1e-93cb-47f3-8c27-8611bba4faa8"
							}
						}
					],
					"id": "8c50902e-3c1e-4414-a766-c5dbac8af4c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "9b7fe760-c612-4538-9f20-3ffbed786668"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "ccd9a467-2233-4885-aa76-c40c00b09fd6"
							}
						}
					],
					"id": "441a51d5-ec18-467e-bf1a-4c4015bfbdc9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "0de952c4-ace9-4da7-baf8-ecaf9b102b22"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "a1c89e04-d1cf-4afb-9791-3563005147e8"
							}
						}
					],
					"id": "210c5dd0-9478-49a8-9a5a-dae2e76064e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "b54367bb-5344-40be-9060-1ae12a0feae0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "28e828c2-5f8c-422c-b3fa-c91be15ed1fe"
							}
						}
					],
					"id": "d5f8eb05-fab8-4df8-b05b-bc7575ecdb1c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "155819e7-c3e4-422b-b64a-9bec984e303c",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "c410304c-8c0d-4d1d-a5f7-f03a6c068d46",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "e39c7ff8-e40e-4ac1-9ef5-224ccd65fc00",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "79e23f82-2fdb-4552-a4fc-a175a8d9b44f"
							}
						}
					],
					"id": "c4229f8e-296d-4a35-a88b-32b50563dc66",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "40a5d467-95a5-4486-8cb1-55be56bbff21"
		},
		{
			"name": "Setup Copy 4",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "a2d5d972-a0fd-49d9-97a0-fb8ee3a03c10"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5b1c6945-2a31-47f3-bce1-26d9237cf060"
							}
						}
					],
					"id": "2d8103c2-bb89-4959-85f5-3f7a71d4aeee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "10d8a5bc-375a-4c57-a763-2fc354833a90"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "0b1a37a1-9fee-4f66-b3d1-062f2b791b20"
							}
						}
					],
					"id": "cb5575f9-1c1b-44fb-8b12-6515035a8852",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c00fd19a-acb6-43cd-a802-3a83e323caaa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a98e7f54-93a7-4363-8f04-fa1a546e91f8"
							}
						}
					],
					"id": "2798938d-5d06-4b2e-a3a9-b3907871737f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b4b09fd6-97f2-425a-8e8e-62d5a3477897"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "70238324-3bdf-4328-8ab4-1e94a3ca9998"
							}
						}
					],
					"id": "ca2d0d9a-f5a4-4423-bc30-d523d85cbc6a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "26fa87e9-cc9b-475f-9353-2f3756ae8c0a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "83c0063d-5028-493c-90f9-3282a0f57ccb"
							}
						}
					],
					"id": "681742cb-791e-4b43-8a73-e6097008f828",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "d1106298-3345-4d31-9751-91d6ab8d9c47"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "9523d7e0-0996-4ad2-9f32-f6994117075a"
							}
						}
					],
					"id": "3a72890e-6288-46b1-9aa0-cc8e17faeae3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "71db554d-5803-4a94-b238-db6d6d8f779d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9cf66940-37d3-417a-ba56-cd57acaa5575"
							}
						}
					],
					"id": "b9f7404a-f9cc-478d-aa0f-abc91ed94926",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b42855ab-19c5-468d-b158-a44b8e1c343f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "59f80243-bf3b-4137-b0c8-cfaa481a902a"
							}
						}
					],
					"id": "78ef60a1-ee1a-4f00-a133-62012c121eb8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e3ab3d35-e2b1-4b1d-92cd-268c2b714149"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "e8c3a327-3e1d-439d-a08b-3267851a7c78"
							}
						}
					],
					"id": "24363052-d712-471a-b701-6da53ade541a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "037861d4-74b4-4f78-a7b0-0f5218bc1757"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "bf5c9dd6-0221-485d-89e2-9c6547022416"
							}
						}
					],
					"id": "3f62b3c4-c9e9-4724-b108-6da5036d59ad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "8aae9d0d-2b72-40a5-ab8e-c2fc6dba060a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "aa18b06f-aa4c-4bf9-b9c1-8681e9efb5a9"
							}
						}
					],
					"id": "9279831e-4f42-40ca-8368-2cb17e248b75",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "13686abe-546b-4125-9d5f-d768f69d52ff",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "1e2dd069-154a-467a-962c-6eb7e3b68b3f",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "25201e28-e0b8-4cdc-b93a-ef970a8658b3",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "652a53a5-b60a-4289-8bd6-e15626f720ff"
							}
						}
					],
					"id": "9f7ada70-c182-44cc-828a-5b4d1799f144",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "ab638961-ff0e-475e-98cb-e29ba0c7392b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "20ea1cd7-45c0-4f97-9d52-3b6982601616"
							}
						}
					],
					"id": "9d2d99e7-b8ad-4025-b951-66dca0889824",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "759b8d83-0b9d-41cf-b3fe-026fe6919b2e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "a30156ee-466c-4933-9e3c-2e0acd017df2"
							}
						}
					],
					"id": "da7f4710-aba5-475b-9486-c458e6aefccd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "1f93e7b3-d8bb-4237-98de-b843dccb7394"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "3bba536d-4da6-407c-8d8e-2cec9c8f839d"
							}
						}
					],
					"id": "51d603e3-f542-4f8a-af60-c6de84b7e4ad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "bd6452d2-3582-44f1-9b8d-075265b46d09",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "89ea2f49-38e6-49cf-82ea-16e31a2cff94",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "ad76d08a-c3d1-494c-8408-c47f7c6df7e2",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "4a64e9eb-78e4-4aff-a313-0a9133a2960a"
							}
						}
					],
					"id": "417f2a06-f3ac-4223-8873-94fdd89e5fc4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "c059ccf6-026c-485f-af63-1c7e53d9e8a0"
		},
		{
			"name": "Setup Copy 5",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "067ee8a6-399d-4cde-8209-c0e513b8d301"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "10dfeee3-de65-4c75-bb2c-b898ae238eb9"
							}
						}
					],
					"id": "fcf81922-5a22-435e-a742-54e429bc9b7d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "4e25b7a0-13ee-4457-80e0-b56072d0aa6b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "69845c56-aa95-4fb2-ae6e-0203c592fff8"
							}
						}
					],
					"id": "f670081d-5e8f-43ce-bd8d-10e1114388e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "bfa2fd70-ddf1-4217-95f2-5c7ddbf239ca"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7bc672ee-5292-4aeb-b145-ac6b2a4d12d3"
							}
						}
					],
					"id": "c1421332-463e-4f97-9534-5dd2ac0202b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f4a7bedb-a69a-4308-9693-af09a3491ea5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6adc1914-8454-42a5-97f2-3fa529a5bb7b"
							}
						}
					],
					"id": "3567bdd4-989c-49ad-9f1f-3e07b47835d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1e005348-93f3-466e-9c6d-8902004e9790"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "dac73ebe-c11c-4dbf-96fa-26e26c6b3eec"
							}
						}
					],
					"id": "933d555e-768c-4564-a031-b6b6d7b76eaa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "243f1f85-d742-4ccd-b4a8-844b5036eb03"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "94801d4d-05e9-47f1-919a-f8c3edd9cfb4"
							}
						}
					],
					"id": "b432392f-bb81-4187-8368-107bfc764338",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "1ea4b4ce-7630-458a-a3a5-074dedb50fac"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c68d00b3-35c9-4377-bfd4-39c9dea4cb7e"
							}
						}
					],
					"id": "d9c7bed0-b5ea-453b-86eb-71c77c11b322",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "5e4295bf-29e9-4db6-9ac2-e7b67a6ec109"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e1997e74-35b6-4f0a-95f7-3695d11ce90d"
							}
						}
					],
					"id": "d897293f-46eb-425a-8889-1e52c01e7cf2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "86b24f8f-d7c4-4b02-a3d4-751820ebbf9f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "02005114-ee4c-4904-8fca-f6bcec9e5ba7"
							}
						}
					],
					"id": "7aff2469-db15-4312-a058-d166ad97cde7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "754aefd7-a46e-42b0-8155-8fcd780a0810"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "2364288d-4ff0-4b19-963d-063d1386abc8"
							}
						}
					],
					"id": "360fd8d1-f7e4-48ba-97a4-91bfa426a517",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "5ef8f885-f067-4ec3-85d5-890c41746bba"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "36d472ac-9169-4725-a951-15db9a530d89"
							}
						}
					],
					"id": "db31c18f-48f4-448c-a0a1-ce10db14249e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "76b48a6c-94e5-4167-a572-e92372b4e737",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "a884086b-b32c-405c-aee2-308394d6ac8f",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "41b1ae82-dd4c-4295-9aa7-1b371719c628",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "b9c17a8d-07b3-4ae6-93ed-a269a7cee8e6"
							}
						}
					],
					"id": "10c04959-eebf-40b3-b8e0-317e56fbc8e2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "d0bddd35-fab7-418d-96e4-4cc863d1cf81"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "73face77-17e1-4950-8cda-aed37c255667"
							}
						}
					],
					"id": "95291f7a-8673-476b-9fe4-bb38305d4cea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "5b042202-2a5d-4fa1-861d-c4ef3c67da68"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "3cab68ee-a38c-4906-88cf-8dbc9cd87a7f"
							}
						}
					],
					"id": "f3b0a731-1490-4533-8627-63f843e6d455",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "ae7e018f-86d9-443b-a637-61fa094ff355"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "e0531e42-da22-4cc1-b002-92af72906df7"
							}
						}
					],
					"id": "8a90c590-bc76-478c-8dcd-d93a5e93a48f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "7f2b8823-f988-40e0-b1d0-bd570bf3b23c",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "62d84cdb-36d2-4fce-ad03-0c0c60d5bbdc",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "28d1edf7-e027-4bca-bc63-fdf03b909089",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "eb2050f5-0b56-4810-83d2-58b09ff31e7e"
							}
						}
					],
					"id": "1f5fcff1-461b-4680-a6e6-8442e51b5011",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "0c004fff-33b8-46a4-b063-9a301b6c021c"
		},
		{
			"name": "Setup Copy 6",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "ceb3edcf-c085-4051-8504-efa9080e7a8a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d09b47e8-d82d-425b-a9d1-db6f11f2f49b"
							}
						}
					],
					"id": "5e9bb43c-a73c-403d-9bc7-5949d09bdd0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "1deb3b5b-79f9-451e-a0de-3db1d1ae6a89"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "fd33d9ca-d9cb-4dc7-9de7-6a041831ecc0"
							}
						}
					],
					"id": "811733ab-42cf-480e-93fe-2fb6cf5dd311",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f5388b07-2210-4f37-952c-937d0cb4acb2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "845825a2-29af-4971-b72c-504259383387"
							}
						}
					],
					"id": "86644464-cdd4-491c-ba43-c08cf42e3807",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "e69de320-cead-473e-b133-8182c9fce2f4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "231c2f3a-b878-4a4e-99cb-52d59c8eb00f"
							}
						}
					],
					"id": "5c34d45a-a7ab-4de9-9641-66cd35433ba8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e1e4e2d4-c970-46c0-9869-9b14d397e776"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "1780441f-432d-41a8-9395-a3d205c4d795"
							}
						}
					],
					"id": "5b7d56e7-5c26-4b5b-b194-ac977dc089fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "4cae556b-5e01-4cf0-83e5-def1008e4be3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "f36e2c35-4d7d-4b52-9f1c-b6a6b10e15e8"
							}
						}
					],
					"id": "994237de-f639-42f0-b343-a646b590e8bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "7bb1fdfb-ef8f-4764-90cc-3762c87490aa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dea890b6-d067-457a-ac71-aa415ff864ef"
							}
						}
					],
					"id": "04fc7b0b-6eac-4da4-8499-0ea7edc4009e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "22976830-f208-4011-ac74-68d8546fc5e3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fbef9949-e917-493a-b67e-1aa48927bd2d"
							}
						}
					],
					"id": "ad38c07d-0a3c-43c8-8b70-7e640555d642",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "92038091-0970-44f8-842a-dfef01de6641"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "cfa45ab0-184e-4462-9e8b-4e3443161550"
							}
						}
					],
					"id": "1154a2a9-c24b-4ec2-bbd0-b3fbb6d176b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "ff5beb28-74fa-451a-81ec-ba76a4c59a65"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "9adef342-9ca4-4c94-b530-fe6ee5568f31"
							}
						}
					],
					"id": "74e4c216-1482-477d-bcec-cd5f381ddc6a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "c4e39fa1-5bc6-454c-8e5c-d377fabc3029"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "27bac499-1e25-4c39-87fd-2ae2e3ed4916"
							}
						}
					],
					"id": "753dcfa4-4846-4ac2-a6fb-043785517095",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "6f1177dd-31ee-47c2-98c9-fd8af97e5f02",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "e5c3fd08-65af-4103-9eed-29a54f352d10",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "55aca0bd-7199-4f7b-ac2c-644fa1376dfc",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "aaea4027-2630-46a5-aa92-65e4e2ba66b4"
							}
						}
					],
					"id": "a2e409c2-1016-4042-9894-ef566b50ec59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "b63051fa-8c13-43a4-8146-962a7ff97916"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "91fc5caf-7d88-4e82-9681-63bfe76136fa"
							}
						}
					],
					"id": "7b2f394e-b38a-4d9d-b11b-c2fa357454c1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "3a8b44ff-70b7-4d12-a193-2af3f7144ba9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "5f05204d-2e7f-452d-a65d-d1e946863149"
							}
						}
					],
					"id": "ee3a2e68-b7cf-474b-91a1-218ce97c5758",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "5f75663c-2c00-43d8-9cf0-79be3a8e5b49"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "2430bc3d-e608-45f4-ace6-724d7f70ea7f"
							}
						}
					],
					"id": "919f93ad-d84e-46bd-b9a2-19e1c3910e24",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "ed81c3a7-85ab-42d8-91d5-bf67218b96c1",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "fb645c8a-3031-4214-ae70-4a22b524750f",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "a2332806-2381-4c8e-b11f-ff0dc9f10ea1",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "374f7981-66b8-46e5-92ce-b7c2755841cc"
							}
						}
					],
					"id": "a09e7945-89e3-4723-80f4-e6f9c42efa57",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "c5e280ac-030b-4db0-a95f-e09f019bc8ea"
		},
		{
			"name": "Setup Copy 7",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "2ee55dda-b2cf-41a1-b17e-b3a050d48479"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fff77a7f-ad12-4b26-9887-f759d5fdb3b3"
							}
						}
					],
					"id": "c7b07b75-5647-4a75-a432-adad6c841341",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "ba2a73bd-f7bf-4221-a6d0-f30300e5170a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "72b4af69-e9e2-4a9e-a616-2959ff6a7f74"
							}
						}
					],
					"id": "f3edb141-17b2-488d-97fc-a5ca1919c7d4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "d08d3b9d-15ec-4071-afee-18ee7c3ecc62"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a79bb80f-4678-4e96-84ae-b08ac86d66fd"
							}
						}
					],
					"id": "25faf2da-58c1-484e-b4d6-064ab6f403a7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "238c9c60-d7a3-472a-8ad7-370dcb6c7614"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e38d51ab-a69b-45ef-bdca-eef2e1d21660"
							}
						}
					],
					"id": "8882d2ac-b08d-4e26-94a6-222552c0fd3f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "68aca45d-6951-4666-8c5b-d74cfdc232f0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "bd9adbd3-02d7-4746-946a-23e6f17b1c51"
							}
						}
					],
					"id": "0f488209-3f59-445a-b123-11b9d083c65c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "ec7ba154-030a-44c8-ab62-2cad05c03681"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "7d95e530-e209-45a0-ab64-774b241a796a"
							}
						}
					],
					"id": "e8579b3f-67d6-4cc7-8301-ee5c17cb8093",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "6fd40ef5-d895-456d-bcda-e03f5afda301"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "41b2a930-fdc1-46fc-9f1b-326e772e5227"
							}
						}
					],
					"id": "5a056575-064f-420d-a81e-e4873eecbe4a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "fcbd7f18-605d-4bac-a945-85e34df4bb0c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0273e2d9-9daa-43c8-9a46-e310ababf132"
							}
						}
					],
					"id": "09516409-a64e-4ad8-b02f-451fbc81364a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6d799a04-e062-4d68-8033-851cacb06698"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "47233ad5-f72f-4884-9d30-7a0b439bdae0"
							}
						}
					],
					"id": "b14f4517-dce9-4811-be24-2af555b30b8d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "89902e0f-b4be-4f5a-88d1-17ecee2f1045"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "74f627c6-20cc-4f30-8cae-58c443d2ac0d"
							}
						}
					],
					"id": "6a1c008c-a382-4930-b153-9a13587c66de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "8d33d2ef-e934-4e19-8e37-6d10ac47bb1a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "59dfd999-d438-440c-8537-8c233977ab0d"
							}
						}
					],
					"id": "e08dd4c0-7ef9-4c04-adf6-3481ee7ea147",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "edf329c8-42a5-498b-8369-722300ba2529",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "09895642-b964-4ba0-971b-7d3ae9058bc1",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "a5316220-0bf5-440c-8f51-355629cb472e",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "2a6ee5c7-6cb2-419d-b776-f21cfb7fe543"
							}
						}
					],
					"id": "aafbd6f7-cae3-4d74-abff-79d87c5a92dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "58f51dea-1747-4dbf-a9e3-480c9dcb5c9d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "cb650d2a-c232-46c9-b0b4-297bdbcd16c9"
							}
						}
					],
					"id": "3ffa34b2-181f-4819-a53a-d59fb9a28173",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "ed36037b-1323-48ea-b2d0-b485926f1ce2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "44da18cc-31c9-4306-92b1-ad0a3f71d4b3"
							}
						}
					],
					"id": "310f5c79-6c3a-4a9c-ab54-0ae0ff231c92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "0d811842-3311-44ca-9b20-51394281b486"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "9b759b95-89cb-47f1-a360-4c99f5af8db9"
							}
						}
					],
					"id": "6f1cd9e7-4df0-4908-9c65-63951a75fde9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "8c7cb75a-08e1-4c25-98e0-a74ec49f3b60",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "4cb58742-8435-485b-9daa-2e3371618858",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "56274018-b470-46ae-930a-945b325be4a8",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "38253e62-8d7e-419f-8deb-743b02e2b453"
							}
						}
					],
					"id": "8dbe5d3a-b4ea-49f1-925f-f6267a855410",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "1d24ec9d-d23c-45e9-9573-22fee50057fe"
		},
		{
			"name": "Setup Copy 8",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "59d88873-55ac-4118-bebe-3fdddb8872d8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "48e9988e-446f-4b9d-b206-eff7214119fe"
							}
						}
					],
					"id": "ad0065d8-7ca3-4628-ba49-218ac9fcf109",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "b517ec8d-838d-4300-8a3e-a1aacca28740"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "7dc82402-8d77-405c-bb6c-5a0b6c5e6e44"
							}
						}
					],
					"id": "51bc93fd-91af-4c56-9545-3fb4c2f42704",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "fccbf7da-3dd7-46d0-8459-85ffe4b704f4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "931a825b-daeb-445c-9ee9-ac75ffb372ad"
							}
						}
					],
					"id": "a085e382-62c4-4f69-bacb-379b3bbf42a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "3c5964d4-15ca-4789-bcec-67bb57a03c55"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "71b01ab6-b45e-4e63-ab5d-ab76f81dd9e0"
							}
						}
					],
					"id": "95b43a9b-f05f-4e76-80b1-cc33ba3247a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ce4fc098-1822-4a9f-a9fa-21db4ff02890"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "7ec2de42-ff81-410a-b976-d135527f375e"
							}
						}
					],
					"id": "4558d4fb-0945-46c6-95d5-82c1c3638354",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "336c09f2-38c1-4df1-83a9-b56961b077f1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "90297824-a0eb-492a-b455-972dce30627a"
							}
						}
					],
					"id": "0675f8fe-c2d2-42e2-9ba8-e547d666e754",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "168cd389-8e65-4614-a38c-d38afcf62d29"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a24309f1-c768-4604-a4f7-d6c37096f5cc"
							}
						}
					],
					"id": "8d232672-c6cc-4a46-8c0b-72c45a65474b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "04d41ff9-db45-4d61-9e2f-2d6293d04d97"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "32286ff1-36e4-4fa8-b844-1740081f7613"
							}
						}
					],
					"id": "292480ba-863d-4ac5-a3b0-72df5914d2c1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4e968222-6625-4f7c-83d2-35624f5c97bd"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "35a55c0a-8baf-4e45-8f0a-6fd4019c1c80"
							}
						}
					],
					"id": "fc647962-528c-4b85-be6a-1c73c812d32d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "991f9cc1-c8bf-47af-a86e-73ac4fde3c27"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "26f128ae-c464-44f9-8e87-5403753f5042"
							}
						}
					],
					"id": "f41ff7f3-eee9-4f6a-98eb-681ddfa7c5ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "ab721542-d296-4c96-8e22-ea5f7262011e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "26a98577-4e22-4da8-8708-3dc34c90837c"
							}
						}
					],
					"id": "8e2ae532-2ab7-4508-b43f-19c567e4fe91",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "69ebda13-0161-4dfd-a90a-8989fdc6cdb5",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "010b0c13-70c7-452c-bf43-dbe7198dc760",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "570f224d-2484-4e66-9a30-5c44f0ad9bbd",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "db667154-ba30-4472-8c29-11bf7220e5c2"
							}
						}
					],
					"id": "15b7fe4e-e702-4288-9fef-80bbda64cdfa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "c9a3d008-242b-43e6-a7b4-717062a5d6b2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "5505317a-de98-4677-b557-1a4c162bfd2d"
							}
						}
					],
					"id": "87b27adc-f816-4221-a8d7-3a1d5bab4acf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "8b92bd3d-bf2e-404f-b4fa-3f36c69766ab"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "31bf9dec-ff56-4691-b8d4-f29d9f491b8a"
							}
						}
					],
					"id": "19a48c0c-7df4-49f3-bbfe-f671ddfe3a8b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "8de0b3ad-6e85-4e58-b8b1-326a6f4452bb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "81fdac17-b68e-42da-868f-3a1e6955dfbf"
							}
						}
					],
					"id": "d2eb780e-fabd-41b8-ac89-5adf05900017",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "d4466861-1fff-4a8f-a4ec-14c35155dc05",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "3aed239a-3262-4824-a4c7-daab5e85c3a8",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "d11d67ca-1131-49f9-9bec-80f00d33ec1f",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "80c461f8-96da-4959-818b-19dbe9ddf1c1"
							}
						}
					],
					"id": "55aae93f-e049-4fe9-aaa1-e48d6056f01c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "52badc06-e5bb-475a-ab3e-9c4e5a42e4fb"
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "63ca2f76-8fae-47f7-9759-586b5bb594ad"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "2eb1c0ee-4af4-4e47-a406-a6c610b55df8"
											}
										}
									],
									"id": "257ae6e9-dd6e-4ada-a784-c5e09b0ae1d3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b0ee112c-9e07-45ac-8306-3e903ab00701"
											}
										}
									],
									"id": "9decd21c-ba51-452c-b2a0-3e16a33761d1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "7e7bc53c-46c5-4f52-9eae-a1c30b95e82b"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "5e75fc0c-5a59-4647-9f46-71a107b65614"
											}
										}
									],
									"id": "a7b4fc6b-488a-44b1-a15f-ee05dbb46069",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "c09a4f82-38ef-4555-bb20-a43755a3536d"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0012375b-6ab8-4897-a90c-461f781a0b37"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "5fdde841-11c3-424d-9135-2fb9ecf8a778"
											}
										}
									],
									"id": "1d98f36a-0b19-4190-ba21-a11523eb16bb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e90dc606-68a1-4b00-a211-8a9cff11d1ec"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "57f19890-0f2d-457a-8f1a-5dd5a60ce5be"
											}
										}
									],
									"id": "9bbaabc0-2019-4885-8ec2-117dd9c790ef",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "7ee95434-0457-47cf-a275-1bbfde9fec2d"
											}
										}
									],
									"id": "98a289cf-c65c-46fe-99f4-898aa76963fc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "17a359fe-195e-4284-9488-16b278fa02ba"
											}
										}
									],
									"id": "99d39bfb-8bd9-4092-af6a-8e487f8d2853",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8e8c2178-f24d-4edd-b80a-67d579006a84"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "727680b7-c974-4520-84d5-b64615f7f2b6"
											}
										}
									],
									"id": "dcc620d8-8c87-4043-b653-1f06d498130d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "70b8f6ad-35b5-44c1-b80a-c22356a41afe"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "af209863-e377-4b22-8149-4ca6933a535f"
											}
										}
									],
									"id": "20014e65-07b1-4cc5-8192-0fbc138ff823",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "0bb6dd50-9379-46f4-b023-c2f2a48d230a"
						}
					],
					"id": "d8c15d2b-a19d-40bc-8668-5ede9882154f",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "a5c42f8c-bcee-4860-a2b1-41675042eee2"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "25b8ab34-9fc4-4772-9992-103f382859b2"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "1928b749-7d70-4468-adbc-4e8df9339bbc"
											}
										}
									],
									"id": "19a7172f-a855-4d10-85da-353f6d77e1ff",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "0edd51d6-f2aa-48bb-82f7-34d364790b31"
											}
										}
									],
									"id": "4fec9cff-a0e9-48de-8fc7-023af0166c93",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "c4c3b02d-7afa-450b-affd-ba1a8809ae7f"
											}
										}
									],
									"id": "b7cea5a4-0360-436c-bd13-11707f83b466",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "9d5e934e-4e6c-4561-b725-d14bc0284817"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "15567830-3ead-4f1e-ba95-6154407ce8e0"
											}
										}
									],
									"id": "16a9059e-ce6f-491e-947c-5f9210ef6140",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "a3017871-886e-4cee-a45d-d771b8764d27"
											}
										}
									],
									"id": "7085b59f-2b6b-4172-bbe9-0c09bbf5a1d2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "2f4e4840-f123-4e7d-afc0-ad1e2a753498"
											}
										}
									],
									"id": "34b69a80-17dd-4169-8dc8-bd699e229b90",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "e60171dd-3d68-46fd-99bd-128ddfaa6343"
						}
					],
					"id": "2a8b07d3-305a-437d-935a-32f367bafe6a"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "569ab73e-7875-43e2-8356-fd8fb6723313"
													}
												}
											],
											"id": "c5db12ad-e010-42f3-b7b4-a1e329cec1cf",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "671050fd-9a74-4397-84d7-6bac4cd67db5"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "62a86a3d-722b-4305-870a-34b1fd09d68b"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "ffbbceab-be1c-45e6-a247-3c5fb87b8ccc"
													}
												}
											],
											"id": "ac092d98-0f17-4a3c-8249-168f34b3818e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "8054b07d-711f-4cf5-ac85-949510abb2ad"
													}
												}
											],
											"id": "5dd74f73-4fb6-4684-b122-350ff999eaa8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "290190b1-161f-4665-8c6a-8e71f5088561"
													}
												}
											],
											"id": "d64415d8-351d-4d57-a425-6de6de3886b2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "f55a8909-7e4b-4fdb-8e94-39ff1645625d"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "a3785763-7f37-4cb7-960f-46d918d77405"
													}
												}
											],
											"id": "f0042018-e9cf-4c20-b237-d7e801707c42",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "42f455b4-f825-4f86-9554-5bf6dce3632c"
													}
												}
											],
											"id": "16a649e8-a7fe-4379-85a2-76a6f4f4d174",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "88069fce-7dfa-4bdc-b334-7e8e78110632"
													}
												}
											],
											"id": "439d1504-b786-4ad0-bdb3-33557898bb65",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "4aa84358-4dbc-4f05-aa52-665df2ecd32d"
													}
												}
											],
											"id": "ee47be1d-62b0-47bb-b750-7abccecb19f6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "d2f482a3-efa6-4f16-8568-2ee384552e7c"
													}
												}
											],
											"id": "a3f099cb-2987-4490-a3f5-69fa357e453a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "5b614e82-b3e7-4e72-90e5-8decc116636d"
													}
												}
											],
											"id": "5e85d115-7ac8-41b1-93a1-f6f5b3349389",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "54d3f61e-cf12-49ae-ab43-54127460bade"
								}
							],
							"id": "d8634087-87d0-4f68-9e00-e628a262f2fc",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "0fd31a59-34c1-4f8f-885e-4b9d5e94926f"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "92969744-bca3-4026-9ede-37646cd77709"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "4141d9d1-29a2-45b7-a7d0-a9e53aed3d92"
													}
												}
											],
											"id": "0a5fe3c9-f237-4989-a851-94b25dfe9c8e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "210120a0-b17e-4d57-88d9-23406398b2a5",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "24753033-cab3-4548-a3ce-6df9d81b6d8c"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "1036eba1-fd3b-4cd9-90b2-ec4669452027"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "c94a5d00-9544-418f-abc2-34c6fa07d129"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "9578c10d-b271-409b-a9a1-d0b108ae3dcd"
													}
												}
											],
											"id": "c7538e86-5d05-4f0c-853d-ebef3fed520b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "85864463-3b7e-4a6e-9ad9-e1ed3c50337d"
													}
												}
											],
											"id": "67d8111d-debf-4b67-a407-0254685989d4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "536a810f-27e9-4aae-92af-764dc4bb46e2"
													}
												}
											],
											"id": "182d86e8-fe09-42e7-b97e-c68b8a5c6674",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "a28acc22-d736-4997-bf99-22df4772e4a3"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "dcda0ec8-cff2-4b71-965b-3be16d606b06"
													}
												}
											],
											"id": "40b315a4-b629-487f-a4fd-dd82c503dd16",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "3c250a2a-69b3-4b0d-bee4-f4d9c0296f4c"
													}
												}
											],
											"id": "ca229edd-fe1d-40b9-80cc-6f1c736bca6c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "bad98f1e-9af6-4e73-8c92-dad4cce10998"
													}
												}
											],
											"id": "63f1522b-833a-4c89-88ab-fba984c89f40",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "25f9952a-6812-4335-8126-1de4219aa0f0"
													}
												}
											],
											"id": "09ff0cfd-669f-43f0-a4ec-2fcb5bfb3a8c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "f21e011b-64dc-4b1c-b0d8-f57d2353c7e2"
													}
												}
											],
											"id": "652eab14-db33-4e3a-af20-bae41f42c963",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "93c8b178-b795-424d-860d-44e621d18039"
													}
												}
											],
											"id": "9abed11b-09aa-403f-81e1-65df0cdca35a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "9580724d-51a2-4b6b-813e-f3bec40cf3ee"
								}
							],
							"id": "326d92c1-7176-471f-9fc9-810b773c66f8",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "7339ec58-9d96-4310-919c-392e93201bc3"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "63ba1ecf-9a5b-465d-9842-bd47bf1fee66"
									}
								}
							]
						}
					],
					"id": "9750fad9-512e-4a86-a336-5d3a447c84a9",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "6e893226-d2ce-4c8b-880b-d50bcda45efd"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "af7c276b-bf8e-40b7-95a5-552e091bb0c1"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "20f6b98d-cb8b-4438-bf51-4700ee6cbdab",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "8e76c5d4-f86b-4eff-b9af-2e8ef3bd69ee"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5933d7dd-5f57-4772-b914-c54cfa634ce4"
											}
										}
									],
									"id": "9653f8e9-d488-48b1-85a8-2b2660a2fb5b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4f292d1e-59a2-42a2-8498-7e4293a63197"
											}
										}
									],
									"id": "868da093-d239-4880-8859-721409dcfb95",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "0994cfd8-89ae-4863-b410-640f63b555ed"
											}
										}
									],
									"id": "8d580871-509c-4932-a7fa-e5d41df6eaa7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "658f92fb-c803-4eaa-a651-bd56be54e201"
											}
										}
									],
									"id": "06a2c1fd-7cc6-405d-a36f-64513694a7df",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "01a50b3a-c009-4b1d-98b2-309a628539c0"
											}
										}
									],
									"id": "68a05c10-62cf-4436-ad15-db8cd8abb9de",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a446f260-3dc8-4808-88e2-a8267370da2a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "929a0b3b-8b00-4e79-8de3-78aabba97b5c"
											}
										}
									],
									"id": "c5194a7d-6c3b-43c8-8921-12d7b65ceff5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "4fa1a2ca-f2c9-43bf-80da-0852e0429df1"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "df84ebeb-736b-450e-8282-df2d2fb46632"
											}
										}
									],
									"id": "362f976e-576c-4354-877c-69ce932df5a7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8e618e5a-b254-4b4e-be27-09393c3b12b7"
											}
										}
									],
									"id": "4a3073e7-ac8e-4548-8d0c-1ad3f964339b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "dc9b7c79-3a72-4d71-b0f6-2f6e15625764"
											}
										}
									],
									"id": "0c8238cf-d338-4ca1-ac12-159c778c8aaf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5fc47578-c9f2-42a0-8370-1810fcc5ad97"
											}
										}
									],
									"id": "7c0a1498-4a20-497b-ad98-381a1025c499",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "023e20b2-ad05-46ff-9584-0653093a9614"
											}
										}
									],
									"id": "69d88fc7-fb35-466f-8cf4-c86737f32e5f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5cae3b84-72dc-4a9c-98dc-fb7f3254f7f6"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "4925b45f-5981-4689-8e21-3f13a46cdc16"
											}
										}
									],
									"id": "17bf2052-ed3f-4c54-831b-41d61a8bb78f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "73af6249-3372-49a7-aec5-8cf32d7b712f"
											}
										}
									],
									"id": "4e73daae-39a9-4e38-b462-cb2cc2e1512f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b0217a47-cfab-4c86-ac4d-ff388974f77a"
											}
										}
									],
									"id": "7b7c6fd6-5497-4e3f-a3db-f8b022043bae",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "04b1d026-f9e9-42b2-9bff-95aeb6cb0fd2"
											}
										}
									],
									"id": "b6b6fcca-d93d-4274-86d8-b7e32f54d841",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c64547ba-ee8f-469c-9e09-59b7a61d4f41"
											}
										}
									],
									"id": "e465e398-a96d-4177-b0a6-b01e4570d31d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "08b44242-f647-4543-8f20-f724ab2dab53"
											}
										}
									],
									"id": "184f8341-f592-4b79-8e5f-7633cec1a162",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "756f3f9c-7f95-49d7-ba91-0b21e07a1263"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "b4bbae74-f34f-4b1c-9395-f71d533cce3f"
											}
										}
									],
									"id": "0e273047-607b-40bc-acfd-85cbfd047a77",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "b02ce3b1-08c3-4bb9-a1e1-39a67707eff8"
											}
										}
									],
									"id": "417fac6e-5192-42fc-a6f4-e8545cfc1633",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "20086b35-22a5-4137-a296-679b38093b11"
											}
										}
									],
									"id": "ad4ceece-6883-455a-91bf-8d6bfdcd315a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8573bf88-cf1b-4afc-9edc-3d731cc4fff9"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "17757bbc-d9f7-40a2-8a2a-b891b8221b27"
											}
										}
									],
									"id": "ccfab78b-e8b9-476e-95ff-7af49d7c1d22",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "e1e0ccec-7e5d-4072-90dc-05eb62dfbf22"
						}
					],
					"id": "32c2146e-7fb2-4d08-bfe1-98cf80f654f4",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "073f247e-82ab-44c5-8546-62debce07865"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "b004baa5-9e83-462c-859f-447a574b0b93"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "ac45ddce-4b07-475f-894d-d4d37ed8a910"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "8993352f-6198-4aad-a078-f389a98ac56f"
									}
								}
							],
							"id": "6c531899-bdc3-473f-8b79-10ba34cb82ed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "9628bffc-665b-47df-95c2-90eb43daab6e",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "24651bd3-9101-44c8-b253-f3bce1cedc90",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "1b0fa052-ef90-42e0-8b33-6c6b1033c2a0",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "8cfb2fd9-8d8b-40c1-9d72-39d089d0c227"
									}
								}
							],
							"id": "bcb83a4f-9a3a-4943-b3cc-8949745c6658",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "9ce993e2-fecc-40d4-a7a7-3f5681cccb61"
									}
								}
							],
							"id": "9a5802dd-deb0-4d50-b6f9-a09a6f88f309",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "f8181a1f-8914-4695-9481-b212cfb6b6f3"
									}
								}
							],
							"id": "b6380543-dabb-4a96-9859-f4291222668a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "53037ab7-59d2-43ef-82fc-04f362f53dfe",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "a3b06b8b-acc3-48da-9946-fcf600dbe740"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "b7a766b7-a84f-4311-862b-76d46eb1108a"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "b141416c-a893-44a5-860f-f3598099e2c9"
									}
								}
							],
							"id": "5f387b38-8188-4aec-8dfe-2f63e13d0040",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "d0a98bd8-90eb-4c7c-b244-5b20a4966386"
									}
								}
							],
							"id": "a4e3e94f-f0e3-44e2-a513-9ed69b25f008",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "e4b44657-1cb5-405c-b07d-633730a129e5"
									}
								}
							],
							"id": "67e190c4-e2d5-4174-ae4c-d1be03066ce8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "d3f02096-b6f7-4fe0-b14f-e748c793234d",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "da30a64f-a083-49c9-9f30-2e308250f80b"
									}
								}
							],
							"id": "6bc44ca3-1391-49b2-8925-f50a37b72487",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "4bf47c41-fd4e-4ec6-9ab2-d52397321170"
				}
			],
			"id": "92f94220-3a4c-4798-97ac-0d9b595a0084"
		},
		{
			"name": "Tests Copy",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8d06defa-ba25-46e4-9394-19d183d012a9"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "06982f5d-e76c-4c79-ae1d-c4be6af45853"
											}
										}
									],
									"id": "0cfabf61-77ae-4b18-8b4a-480c716d9313",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "71a0e990-e299-4363-b9d7-9817c5760a87"
											}
										}
									],
									"id": "e11a1733-4a77-4dfd-b09a-ec16762e200c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "75d5500a-b102-4298-8b41-e97eecaa23b6"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "607420af-c0bd-4250-8569-610c60ecee9e"
											}
										}
									],
									"id": "c9400b0e-4c90-48a7-a245-db517ca838fb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "dc6db04d-c0c2-4839-8f8a-74e115bde2a9"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "11a86c5c-99df-44e2-bd02-770bae27cefd"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "47a5f85a-df00-422c-8b17-7e2babe62cd7"
											}
										}
									],
									"id": "6c54eca0-76fe-4c2f-abf4-e3886f1a7c5b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "7c241ea1-6729-497c-a6b7-118f4376cd1c"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "ba96b645-8671-4f51-b3df-978734c4fe6c"
											}
										}
									],
									"id": "d62b05b8-dddb-4078-adc2-663a5a7953b8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "227be109-1b6c-4e56-ace7-5b89973795b5"
											}
										}
									],
									"id": "a183e071-9da9-451c-9e92-18376f1a09a3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "06c5e57c-d405-4fd0-8b27-4626c4bd0952"
											}
										}
									],
									"id": "a50e5571-6e6d-45fa-b310-bf29ac9bb587",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f1a25063-1366-4c7a-a05d-278705cc06f4"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "de44ebc7-0663-495f-8e48-94cb1da49607"
											}
										}
									],
									"id": "7d33c0b6-4959-47d6-832f-0b1f303c584d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "04b92e31-07d6-4540-9488-a8ce4ed697a1"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "f090235f-a9a6-4cd2-9c61-1f6b6d7944c0"
											}
										}
									],
									"id": "d090ba99-adf7-4878-8ed6-e5ac716d89b7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "709bc92e-13e1-4c91-9709-0855c1031e44"
						}
					],
					"id": "f5e3b90f-a850-4767-84f4-39b4d95d5798",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "bc4b6ce0-3651-4621-99b4-e68e3ec1b419"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "8c75c22a-1b21-47ed-9cf8-833fe391f4b7"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "1718799c-fcde-41e8-bd96-ab71b1125c20"
											}
										}
									],
									"id": "e2239ada-64db-44ee-8b7a-aa481bca5339",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "b4e6bd97-ef02-4934-8e8e-a8df8846eb73"
											}
										}
									],
									"id": "52fb2508-7a78-4e35-81de-1dbe46accefe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "11163bb1-3d1c-4431-bbf1-dd51cc95521f"
											}
										}
									],
									"id": "c1885991-8799-44bf-8657-be8537a3ed85",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "f826a7c5-37ff-438e-b07f-b04d50ea30a7"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "f877002a-986e-433f-a681-90ab76a2cf09"
											}
										}
									],
									"id": "c8d3eeef-4221-4361-9164-f6e01c363082",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "116651b1-148f-4086-b22c-9777ae51e577"
											}
										}
									],
									"id": "76e498d8-1ebd-47b1-9452-ad6dd5b5c636",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "636f0d41-1da0-4d57-a1ba-3a632684baae"
											}
										}
									],
									"id": "18758f26-eee9-4a96-b6d4-baf73c405353",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "2d11ffcd-0458-4d7a-adbc-11fd02037ea9"
						}
					],
					"id": "a640e55c-e2d4-4e26-9e41-af2b59c208e4"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "c94fc421-87db-4b58-8b04-de28dc74d0d4"
													}
												}
											],
											"id": "6d732f8e-cb30-463c-a954-9035713c2709",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "4d995112-45f9-4f0a-ad93-e580f39456c0"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "661d5052-d30f-4c1c-98e7-f091598d4065"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "f0e77b46-adba-4e07-8284-35c91ef0ce31"
													}
												}
											],
											"id": "6a831911-e804-4f37-a993-3733043e5fbc",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "1a5999c6-3187-409a-acff-af56c1e38e39"
													}
												}
											],
											"id": "ca28cdaa-08c7-4afc-8090-f9ec82de952c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "bfb02e5b-f255-4008-b44e-4d0cb3a20baf"
													}
												}
											],
											"id": "cc0c2dc4-8662-4a91-a22d-a0c7218d3f3f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "8aebd90a-8dc1-4418-a561-a219597feeb1"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "a4d90eb5-545c-412f-b9d0-5d2a05731be3"
													}
												}
											],
											"id": "d01bf023-3086-4714-857d-4622c3251366",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "6b61e4c6-6c30-4f18-a8d5-bc9593e5a3da"
													}
												}
											],
											"id": "ce61e36e-0790-43c8-84b8-1c3622053a30",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "9e0d02c3-fa98-4c2b-9094-18beda970649"
													}
												}
											],
											"id": "10e2a5ed-2b31-4dc1-8c26-9bdf6ce89f28",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "0324f66b-9b97-492f-af5b-5ea9fe8b7819"
													}
												}
											],
											"id": "ffdeee8b-687f-4e23-a397-b6652ce34f15",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "aaa605e0-8695-410b-aa5e-4f48e07d83ff"
													}
												}
											],
											"id": "3ec4b61e-ee1c-47b4-91ea-d2ecd8726b81",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "57dd6678-6e56-45bb-bbc9-69de7d0628f8"
													}
												}
											],
											"id": "df92f91c-2260-4aa8-b932-976b8499188f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "cba88f05-5bb8-4d60-91e6-b10e48b21bd7"
								}
							],
							"id": "953fdbd3-728e-4761-8efa-959fb240f254",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "473c5997-4842-4553-8180-437b18e18752"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "0d50c7b1-3a7b-4e3a-aca8-76f7756b5cd5"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "bf9cb498-6f9e-43db-8a44-5354f2d6aa99"
													}
												}
											],
											"id": "32c94b21-8b3d-4e60-97b3-b55480b5d2ff",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "ff251fa1-e7fd-47f4-b464-494cbe0c610f",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "3ab10419-5f53-4940-821f-0aeab0628198"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "ea400893-9314-463a-9785-da2f9d2fc67b"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "e083171f-6f01-4f44-969e-7c0f5d111793"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "afe0619b-3281-4c57-9a0f-5be4bd21a804"
													}
												}
											],
											"id": "319a50c5-d148-4a39-b0ff-12a59885689c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "c6b35cc4-663f-4a73-88b6-053ae263c180"
													}
												}
											],
											"id": "56be79d9-c666-4a9f-8f98-878588331bd0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "d56035b0-d5cb-4ddb-9dc6-44dcb7c0fcff"
													}
												}
											],
											"id": "8ece21c3-5e1f-409c-93fa-ec0e46a01073",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "90291707-3869-4fa4-8d4e-c05e6fa5768a"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "3f694f0a-006f-46e8-9d2d-f2938c82fe67"
													}
												}
											],
											"id": "492cdc21-473e-4135-bc20-ce5635618c6a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "85963111-f6aa-4748-a603-f32361607104"
													}
												}
											],
											"id": "44911fbc-cda4-4065-b383-7611612a1fb1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "125067ee-03cf-4e10-9eb4-abeaeaff6d64"
													}
												}
											],
											"id": "6817aa67-080f-47b5-a491-fda81003f1d3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "10c41985-618f-4e85-829b-b544d660333e"
													}
												}
											],
											"id": "c1d9d233-0e0e-4171-95ce-39e997d589a8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "98447e5d-fa54-447f-9517-ce549bd46520"
													}
												}
											],
											"id": "41c01985-f9df-408d-8410-4b055ad19ef7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "300372b3-5c26-49cf-809c-b2a6da4c59e6"
													}
												}
											],
											"id": "f8dbd42e-8375-4c51-bbd9-f5016c4ca822",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "9dc36e81-32d7-4a1f-8f0e-fd1dd36089c9"
								}
							],
							"id": "a6c4dd76-e20c-4c84-99cf-fd36a4c3ce82",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "18527475-bbfa-403d-818b-9800e2665536"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "b7e4ed27-def4-4f19-9ca9-d6fe576efec2"
									}
								}
							]
						}
					],
					"id": "1afa3ce3-b3ae-41b3-9d82-16a12fa2f73d",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "e72c8451-350d-4c9a-8613-79c08a95f940"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "e65df30b-0f64-46ad-86f5-a141712ff9ba"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "5372ef10-0630-4aae-92c4-188545c8337a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "a77d6c01-39bc-456d-b4bd-e963d47f0256"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ee3fe889-ace4-4eba-b554-6d5fb3a8fd5b"
											}
										}
									],
									"id": "45c09095-55e7-42d9-8ae7-26c2d5bc9eb3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3f0fcb18-64a7-4436-838d-3d29f50ab8d1"
											}
										}
									],
									"id": "ec6c7dc0-2740-42b7-b675-80d76d73db59",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "38b0df85-759f-4412-9e57-f053380af402"
											}
										}
									],
									"id": "8ec7c8b3-8b45-4b04-9feb-a6ca170d38ea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "829105ad-3f1e-4356-8fc8-915b903d953c"
											}
										}
									],
									"id": "fc13d8f1-310e-4af1-8cc5-6ab01b7bee8f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "e769dc5b-70d1-4569-aa37-d8c640f17210"
											}
										}
									],
									"id": "83086775-1a53-45c1-b77c-a0996acbf904",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b80a8ae1-7d55-4514-8858-67788116fe3f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "15fdadf3-b3b9-45d1-ac1d-fff2a451ee08"
											}
										}
									],
									"id": "1f85e57b-5476-4667-be9b-661689e4c72d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "c570a738-c5b9-4384-b446-615d6816e515"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "132f05e9-55a9-451c-972c-bef4790496fc"
											}
										}
									],
									"id": "a6e1f651-6807-4dfc-bfd8-15effbeeb11e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2687bc8d-6f3e-4f5c-b6d9-95bd3a83814a"
											}
										}
									],
									"id": "6c4c9796-12df-4ef5-bb32-e162f1545541",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "19eddc76-98bc-4b9b-9b19-baa0a00e8d46"
											}
										}
									],
									"id": "71f03f98-214e-4860-9005-81eb008a5214",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ef55d2eb-a918-4b2f-ab6f-21a18ca1ae36"
											}
										}
									],
									"id": "37eeb206-71df-4db5-bcc2-89c0dd524d6d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "a2131a29-f149-4822-b82c-1640b14e26c8"
											}
										}
									],
									"id": "926ef027-0f80-4d50-a072-8ce6e168a666",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b3a3753f-1bd3-4e10-8566-9946fa91d0b3"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "af3a03d8-3416-4e87-bae6-d2fa90afba6e"
											}
										}
									],
									"id": "780c3bc4-c573-4a88-b922-861668e23848",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ca27ec5a-2352-44d6-aa65-a2e8757bfb99"
											}
										}
									],
									"id": "23456f24-995e-4da7-8cd1-4209911c05ac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d9e00761-3cfb-4b79-ae57-332fb7585a9b"
											}
										}
									],
									"id": "a4fddd2f-a0a4-4147-8d41-567ed7f8c96d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "1c30dcde-492d-4b10-a8d0-b8d69b9bb8b7"
											}
										}
									],
									"id": "4e3396e6-f4fd-46f4-9f33-da8ac0919fc9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "bcc01272-ed90-46b2-8afa-a8c77112d554"
											}
										}
									],
									"id": "136be806-7b0f-4c5f-99a8-9f2dfe9f8123",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "8481c1ed-61b3-4040-823a-a53dd7a6aaaa"
											}
										}
									],
									"id": "c87cd1c9-00a6-427d-a161-4714ecedf32a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "49c2ab22-17a8-4726-91de-957a96a3a0ee"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "efa395f3-6c9b-42ec-862d-4762ee92f595"
											}
										}
									],
									"id": "3617a8da-a716-47bd-9fb0-5cb1fe4df16d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "bbab3fdd-6e62-4840-8d65-fdc7852ad73a"
											}
										}
									],
									"id": "96a8085c-6ebf-44fe-b4c2-2aedce22ec24",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "7c16d952-e34a-4c3b-a194-796728b78ddf"
											}
										}
									],
									"id": "697d8b85-fd18-4d1a-9137-8d4453af19e4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0866754f-ffa4-47b3-a310-bd3be7b5d93b"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "1ae5341f-d4a7-47f4-a238-5dfceeb11111"
											}
										}
									],
									"id": "a90204d6-ea6b-4796-b0f8-cb5fef628dd4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "d33b83d1-1d01-47c5-891b-8c6e3a67b1bc"
						}
					],
					"id": "28879b3b-3f3e-4cf0-aa91-0758cf5d351f",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "05d3d64d-5aff-4f7f-aee8-bcb066d811c5"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "c7a5a3d4-4901-472f-910a-1157f79e249b"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "5f9c6f3b-e4d7-44ef-9b68-63088c355018"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "9f89b506-5abe-463b-ab9c-3be7239fe93c"
									}
								}
							],
							"id": "05ae698d-cf49-4c31-83e2-ceed12c9b03d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "99f6ffdb-9b4b-4b60-b40c-71d3109d1824",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "338dd0ed-0874-486e-b9bd-12d8ef6c9fb1",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "dd511427-e9cb-4aaf-98f1-68358b254c40",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "da4b2ded-632a-4fb5-bd80-edadcc598115"
									}
								}
							],
							"id": "e21a759d-da46-4434-a45a-9dc44599ec92",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "99382d62-c38e-44e1-a6ab-50667e1f79f7"
									}
								}
							],
							"id": "ca51b3ed-1ee2-46d7-bd26-971f2af0420b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "25c1dc9c-a587-435e-a37d-4243352e007c"
									}
								}
							],
							"id": "a17ad8a9-039e-4bf5-9920-31d73a93b747",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "2527d4e5-86e1-46f8-a8d5-1f8af19e488b",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "2ee75126-b070-4b8b-8d27-b15e3989c845"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "9658923c-9d32-40cf-b8af-b167e883be38"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "8326c896-7e55-4d3d-96b3-c25e98a0802e"
									}
								}
							],
							"id": "279edaf9-4706-480d-9046-a6316a113401",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "fcd580f8-01e0-4bfb-bf64-85147091d214"
									}
								}
							],
							"id": "c7eef399-adc5-4444-b11d-b5fba6382052",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "dbade7df-34d7-45ff-9145-3df8243a6bc9"
									}
								}
							],
							"id": "7277d88f-04fd-44ee-939d-06f6dc749495",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "99dc3b78-5d08-4904-9a91-8b52ba64c9f1",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "dc5122ca-aa19-49a5-9964-03ac95e08777"
									}
								}
							],
							"id": "b34ea19b-8248-42b8-8173-51561ae094e0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "49efc545-7484-4366-9eeb-5bc91ae5346c"
				}
			],
			"id": "6d08d273-0aae-450b-9106-e105ac3f5011"
		},
		{
			"name": "Tests Copy 2",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8d0c2a16-d16d-411a-bb09-d7a24e7bdadd"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "ae80d996-d61e-4545-abe7-66f945bb927e"
											}
										}
									],
									"id": "bdbcd87e-75b7-459e-802e-97596d432a97",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0688bd20-3352-4659-80be-7688c5bec0f1"
											}
										}
									],
									"id": "2f016adf-1faa-46f7-b7bd-75843534b282",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0db98140-f43c-4817-b158-01c992859ae5"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "be81fd57-729a-47c8-afca-919598550f45"
											}
										}
									],
									"id": "a773ebe2-9d6b-40c2-953d-56ade35a4d00",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "0df9ddb1-d96b-4cff-8450-e0194f78c3f9"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f9355237-ae10-40b8-a60f-07d19cc25354"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "9705cd65-2e6d-4f17-93e6-9389f5e96557"
											}
										}
									],
									"id": "50567712-ddb7-4e27-9681-96e8cf295f01",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f488d65b-621d-40a9-adf2-4832cb270563"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "3eb8f081-9927-49e6-b411-6abb53954ea4"
											}
										}
									],
									"id": "2af3982b-69c6-49f9-bb78-d1e29d1f4f79",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "818901ab-1c29-4a86-8b61-b99112159334"
											}
										}
									],
									"id": "6b89774b-217b-4cd3-abd3-41e46c809270",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0b00b117-6a23-47f8-a3ea-81c04a2ff48d"
											}
										}
									],
									"id": "b96f0dba-c6bc-4863-89b5-de729b20321e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3d21ff0e-ca86-4096-a5a4-d96a45fc7762"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "e7fcfd9b-8418-4558-9fdc-21a6dceb4e30"
											}
										}
									],
									"id": "e7692263-cbd7-4690-ab28-d1c39aafaa53",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "e0307e24-2009-46a4-90dd-b03ab5d705da"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "140892cb-a839-4cc9-a0cc-6466ca69138f"
											}
										}
									],
									"id": "b926d8f6-b38a-4f89-abe3-21267e850167",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "ca59d439-5761-46a9-a337-1e2a4d33ea30"
						}
					],
					"id": "bf8830ad-83bd-43ec-abe2-936f8bf705b1",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "2769fa58-1a36-4d74-a50b-6e2dd1a1e8b4"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "938d5883-cb8c-4362-95c4-85faeef74323"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "55b0a39b-b4d6-486d-a12d-4b887454bcf2"
											}
										}
									],
									"id": "dc98aa67-8c2f-42ef-8255-66fea36be83d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "0b828f19-2d80-4770-a906-b022a7a298fb"
											}
										}
									],
									"id": "164e8421-5291-4e2a-ba62-1de975eaa124",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "a56a4b81-a872-4c27-93d2-08ec768dc8e7"
											}
										}
									],
									"id": "cf7fc267-4b8c-41d0-8f49-eea8ecf06a15",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "5420af4c-0aed-4a30-b46e-e7cbd81ef185"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "7b55e821-1bce-46ae-a837-a1a24bb96bb1"
											}
										}
									],
									"id": "cd9dde91-973b-4deb-a29d-6b9b0809b973",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "3b58a9a3-226b-4383-a16b-6c2b680ea17e"
											}
										}
									],
									"id": "9927a6f8-e0e8-4cc5-b667-b708506f9128",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "c4678fca-c520-450c-84b2-54c0046316f4"
											}
										}
									],
									"id": "ea849674-a06d-4d39-9fba-9acd5836250f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "ad4567c3-1064-48d0-87db-2f908e5802df"
						}
					],
					"id": "df693c3c-d27c-42e0-b21a-c6c7e0394f5a"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "9893432d-f41a-4bca-90a8-d4e88d2ea6d7"
													}
												}
											],
											"id": "ab15cbb5-2804-4189-a968-83e7dd06b509",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "ebb02204-72c0-4fcf-87a2-a23baa9b04b8"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "21b6afcf-715d-4898-9f85-367ba5515947"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "f13d583f-2554-446c-b9b0-aa0f75365f28"
													}
												}
											],
											"id": "d37e870e-b506-42ee-ade6-e905a5377908",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "2915500a-2c8b-4b5e-8be9-1a36e052a748"
													}
												}
											],
											"id": "e19b663f-2038-40f5-be51-5b4fc962c424",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "6d42e871-d9b4-4a97-a935-8c4bdd994bc4"
													}
												}
											],
											"id": "87d5164f-9bad-4831-b16c-35429f848383",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "031575f4-981f-4e4e-9c1c-a33740735a81"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "67791c42-0d79-4844-b9df-753acf9390e7"
													}
												}
											],
											"id": "2b392f72-b6f6-49e2-8f56-8b6f1f9c2ce3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "0f6981a2-058f-44f2-99e5-69f5ab2a4e74"
													}
												}
											],
											"id": "749837ee-2953-4367-9dbb-8593f969a41b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "a2c681f7-e2fb-4923-8c88-fb8df49f2b16"
													}
												}
											],
											"id": "ccb8e1e5-72ac-4424-8b78-bf4bfc37e979",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "044952f7-c72c-493d-b58b-074dde844a66"
													}
												}
											],
											"id": "6d0d1546-049e-445d-ac56-358c0a75e3e2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "51175c93-41ca-4518-b021-347c739bfda0"
													}
												}
											],
											"id": "ecf562d1-545d-486c-a1af-515f6e34e10a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "79caa28e-056b-4eb5-8f50-7a0d4378fcc4"
													}
												}
											],
											"id": "74baf3c2-7260-421f-8d94-cd20c5caea7c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "2f054ab1-8093-4c63-8414-8c75ee2f7ee2"
								}
							],
							"id": "a84e5b15-a05f-4170-b234-6c5ccb385442",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "d9f8fb1a-1af3-433f-a562-cac4cb200023"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "91708822-26ed-45b1-9324-a0f41e9a39ad"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "9a21df67-a89d-49af-b786-ded7eef554c2"
													}
												}
											],
											"id": "2b083772-8302-4979-b214-328fd926f00f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "f4ec01e1-6195-45c2-ac58-7bd84aa02809",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "e2246757-5743-4def-95ed-f19c024477f2"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "8e417407-2b35-4a70-91ca-e61ca1e47d56"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "eda6e417-919f-4ed9-b15c-2867b901fb77"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "b8592b63-c43b-4fea-93db-7889124bb516"
													}
												}
											],
											"id": "7eb93da9-408a-41f0-b214-81d52bebf2cf",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "a2487eb2-214c-4fb7-8d76-05181dae0a11"
													}
												}
											],
											"id": "abced6ab-be55-4d01-931b-93c13432f39e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "75689d91-faa8-485a-9861-a4ba11b40313"
													}
												}
											],
											"id": "3f78f7dc-bb6a-4cb4-89a9-c61cf3c9e28e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "d4c109f4-6dde-4a55-842a-c62abcce19a9"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "b654bab8-13e6-4b19-a1d2-cddc64d31d58"
													}
												}
											],
											"id": "c3a11c73-a394-4122-83fc-69345fc0e444",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "b768f8ce-d8db-4588-867b-8c0a59b58e7e"
													}
												}
											],
											"id": "6cd3651e-7a9e-4a5e-8f39-e173e5d041d7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "8af22d74-ab5d-4b83-8400-cd87c2e3ea62"
													}
												}
											],
											"id": "8c869d50-3b41-4245-b9c0-db38981fd739",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "646d8880-f485-4c56-9774-e9edf5b37c48"
													}
												}
											],
											"id": "3d1d5889-83de-4651-8eaf-ca7988e78aa9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "1b661a57-9380-486b-a2de-a991a7ddbf1b"
													}
												}
											],
											"id": "e8769cb6-8b88-49e3-a69a-c9fdbde00db7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "f261cc07-02bf-4528-8831-b38f6f0c036e"
													}
												}
											],
											"id": "b923e702-116b-4872-a264-664ffebce167",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "8aeaed47-c258-46b2-a673-e240467ff428"
								}
							],
							"id": "e73f7fd1-ed7f-40c5-842f-682865d6befe",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "f10f8cd4-0353-4dad-bbe4-50068605f1d2"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "8377209e-8bdf-49e8-8e42-3240aaa875cc"
									}
								}
							]
						}
					],
					"id": "8da7ce60-ac27-4310-ba73-078f53d6881b",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "de99300f-1d1c-4646-8a5e-4cfb552611d9"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "f7fe9b03-e7de-43b8-8da4-924d70b7fbc6"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "06e4a721-a97c-49eb-b765-ae15b312109d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "01e346db-227b-404c-b240-c3d9a9d3686d"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3e798792-e4d5-491c-89c7-c7b4a87f1f54"
											}
										}
									],
									"id": "ee23633d-c82e-4ee2-a0ae-972ff09aec37",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d070ea77-c7f4-488d-844e-14012bd7abb1"
											}
										}
									],
									"id": "da070323-6bcf-4618-bcf8-0ed24fdbe51e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "c4c8b12c-17dc-4f9b-b7af-a61e82bed5d4"
											}
										}
									],
									"id": "9b424c70-5a6b-46a9-af83-b1a57e94b53f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "97bfaa6f-82a1-4eff-89e1-e47ce0ad0cb7"
											}
										}
									],
									"id": "5a156341-b0b6-4d5c-b8cd-e0d0fe079beb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "dcb4bf8f-d1f6-498a-a5be-65a94d82bb33"
											}
										}
									],
									"id": "9825fcaa-30af-41bd-a5c8-381955fe659d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "7d64dddf-b18c-4454-9cd3-c06aa069643d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "d6f0d3df-96b8-4808-8671-5c514aea3bbe"
											}
										}
									],
									"id": "0f6ed7cf-4747-40fd-a424-69a92cd03660",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "4eb20fcc-229a-4eca-a1e9-fd98c57e6c8f"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "88ba6003-2ed0-4f58-9201-ccd903bb519f"
											}
										}
									],
									"id": "e724462c-2f11-4b00-95e6-2fbf405204df",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1326673d-ea83-4bc8-9fff-08634c179ca6"
											}
										}
									],
									"id": "9553387c-fc94-484b-9a60-3da8dc8ae341",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "84559ac6-c20d-4469-a8b7-ccfc439f9ccc"
											}
										}
									],
									"id": "bf724c29-70b7-47c1-b69e-d4feb3f0e115",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ba69a0e2-faab-4037-8d20-f1f840ad88a9"
											}
										}
									],
									"id": "fa764f83-dbf1-47b4-a057-2ca480996bde",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "b1346fb4-a1c6-4b49-a377-112c4237bdea"
											}
										}
									],
									"id": "316ca0c9-89bb-4231-aaab-255806bf1942",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cda0fc25-42fb-4ce8-919e-3520d2a40771"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "094abc2d-bc14-47ba-bd7c-c68c025b47d9"
											}
										}
									],
									"id": "6a7ab9e4-1df8-4a44-8dd0-0166412629ca",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "766f4302-7034-4c5f-814f-0f299a0bb8fd"
											}
										}
									],
									"id": "5b4f31e0-0fdc-4046-b6b5-71f3e473fbd3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b9e5ac45-30f4-4891-8b56-527873901aa1"
											}
										}
									],
									"id": "8e7480a6-f8ed-4afe-92bb-8d910860b7f3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "29eb02d4-86b6-4898-892c-0c05c0cdc394"
											}
										}
									],
									"id": "31bf77b0-a158-493a-b352-2c267f160097",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b06b5624-d6a9-44df-8031-ea1d9e290599"
											}
										}
									],
									"id": "a44d8268-b57a-4e48-8be9-1e79f8968d0d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "13bc2027-8ddc-4996-9577-6d635a4e70ff"
											}
										}
									],
									"id": "be68a2aa-d5ac-4a8a-9616-9d299b92b2c5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9c55e2c2-d4e2-4fd9-a5cf-c0e5dbc51834"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "c2106e69-c1ae-45ba-bfd6-847e3e7052a4"
											}
										}
									],
									"id": "33d5fcf2-c590-4dd4-a2bc-9e6f19eafd59",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "0174cfe7-9a6f-4b21-9b25-5511e1d8e724"
											}
										}
									],
									"id": "5c3a5c76-998f-41dc-a5f9-a379b877da4b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "291420a0-a0de-4514-bad3-203609a32ab5"
											}
										}
									],
									"id": "f36605d3-9e4a-44be-a767-e5b4657a340b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "69915d64-acea-4f9c-806f-a5b44f5f3e9a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "9ea485fd-37d7-447b-ba81-0acaa679ce84"
											}
										}
									],
									"id": "71ff210a-8f16-4638-9e1b-e1d48175799b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "c5e6dc71-7db4-4a21-9760-efb35d5cb93a"
						}
					],
					"id": "7466f047-829a-460a-a9aa-0083311caa3e",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "34ddfc41-6f8e-478b-8b8c-db92b780290a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "e946c8ea-b482-48c4-84b7-6fb629d473a5"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "c5d6e135-1185-43be-8b21-aa3cd1ad48ad"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "baf004da-9558-43b6-b1da-98f147ca14b0"
									}
								}
							],
							"id": "90b3b2f3-acec-49f9-9dd8-e5bf5ce2f20f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "60224928-9c62-40ac-996b-c65ea2155382",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "a4ab6914-8e8f-4903-aa89-173f3583313d",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "b413f63d-0fa8-4132-865d-8a37a092fef8",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "8dfff643-07cb-4f66-9065-93bdba4ec6e2"
									}
								}
							],
							"id": "30758500-822a-413d-a442-d39c5e4fabff",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "89f69b8f-0319-46e2-ab09-9ada165901a3"
									}
								}
							],
							"id": "1fee2b92-6cb4-4f3e-8c61-aad868236b4f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "aa07eaf5-d2dc-43d8-8721-64320e309c0b"
									}
								}
							],
							"id": "99fe4da0-685b-47c2-9ac4-e0943c90c1d7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "3f693c28-526b-4f69-975f-ea69bf51c1b9",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "3f8b8b4a-873c-4d24-ab03-beaa5f9b8722"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "e626f5ff-aa6f-464b-98e6-6c3c1c99d27a"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "75fd5e38-efdc-4d03-bfb6-5fa14fee9399"
									}
								}
							],
							"id": "e8adb4eb-9adb-49e9-8896-be6411eca3ec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "d9c9dfb5-fae4-4041-902a-886d5abeca5d"
									}
								}
							],
							"id": "204a8385-0efd-47f7-912d-cf79f0fb6d65",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "11db5c80-0dda-4c69-9e83-91d65828ac94"
									}
								}
							],
							"id": "451f833e-6c61-4d7a-b4f1-ae7a5731082e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "4ec7cc98-4ad6-4439-94c3-d32aed54fc19",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "275b6fa6-a38a-47d3-b38c-9562fcb8dcac"
									}
								}
							],
							"id": "bfc1d103-d388-4533-a0aa-683f67a2457a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "ee0bd091-cf37-437f-9ce2-b1156c7a2bbc"
				}
			],
			"id": "9955c8d4-fe99-472f-8b66-51dad39fa423"
		},
		{
			"name": "Tests Copy 3",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ab9dc204-333c-4bb7-b551-eb2586e4207e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "38cbd970-1c2a-4835-9c8f-54aab8ad5cff"
											}
										}
									],
									"id": "5157e0be-be18-4c98-8e26-515d735149a5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "27be49b0-7d8f-49c7-812a-c5c9a4a0b309"
											}
										}
									],
									"id": "4bcfcb76-d44e-4f25-92e9-4d5667c533f3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "29376106-755d-4cb6-ad87-790a0e6e20bf"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "cf2e8fef-b0da-4ae8-a10f-8b7ae4f2ffcf"
											}
										}
									],
									"id": "a0882c2f-9198-4511-874f-9e53154c006c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "b2b1fe2b-e825-4040-9089-0e869cfa27c4"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4517a5b8-52df-449b-9881-915376adae80"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "546cdef8-f662-47d8-b35a-3e4ef55cfe64"
											}
										}
									],
									"id": "018921c9-3d89-453f-8c03-8143d17bb8d0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2bfc5c7f-6b1b-4c8e-8100-a034a0a33b7b"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "7ded1b76-9b26-4b05-94d3-9beffd8f805a"
											}
										}
									],
									"id": "208ff8a8-aec0-4b01-ab53-95a56dc0a770",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "df8b1983-928a-4f9b-825a-3e067c5d3a84"
											}
										}
									],
									"id": "0720aebb-4509-4154-a10f-7589da7d0259",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e3f1096c-50fa-4ef9-9b66-2e149dc837be"
											}
										}
									],
									"id": "7f57525b-bf50-4707-87d2-5ed8f1ada304",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6d8fb6b0-e9b9-4af5-98c8-08918b5dfe19"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "89db3011-f2a6-4449-8379-120f3a6cc5a2"
											}
										}
									],
									"id": "7f6851e8-4749-4db4-be2b-abca58c8b74b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "235abda2-1d58-4b45-a5ea-ccb0aff6eb32"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "a41d3437-9076-4812-a08c-66ea5a07c591"
											}
										}
									],
									"id": "aa671173-2ab3-4aca-af50-b6f463987f50",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "2e615914-a325-410d-a072-114b7a159067"
						}
					],
					"id": "0dceb94e-ad50-4e72-b84a-ee5830b7694d",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "9425a0b7-ee87-4c68-83b2-2851795cfd47"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "2abf0f0a-39cf-465d-bef6-82dedc7fb07b"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "40cc6f3b-6c9b-4c77-b901-38468c625a30"
											}
										}
									],
									"id": "c4d68a9f-83a8-4c17-94ed-a5becc981f63",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "474ac60a-bff7-4146-91d6-d4edf5664af0"
											}
										}
									],
									"id": "1fd54653-29fd-4ebd-b04f-1fe0a5b4a9e2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "b83c82bb-2d89-4492-8cb4-c9073fe4aa8a"
											}
										}
									],
									"id": "f226f83d-c2a5-4c98-801f-07fb94509b29",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "ec9bf58e-3ba7-42a6-bc60-83c7be2b3ce2"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "1464edb4-feed-4353-8653-743dc779a8b1"
											}
										}
									],
									"id": "d4c189e2-a1df-4579-90ac-4ea854d0fca0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "91ce804b-3291-4021-94e5-bc3f0357c3d9"
											}
										}
									],
									"id": "17897e52-880c-470b-a71f-8a54a7b38982",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "6ccd20b7-5d6a-4a91-bd72-334e563de025"
											}
										}
									],
									"id": "c8d3fef8-fed5-4328-9bbb-28c0d53ec7cd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "a92ec810-4a7a-4715-8259-641d93de2b0a"
						}
					],
					"id": "0590ca17-28a5-4081-bbb3-98b0d5f6935d"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "a09f675b-f0aa-4b48-b315-8daa9af17346"
													}
												}
											],
											"id": "31a05768-f023-47fb-b8e4-3640114c021f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "a843ffa4-36e4-473e-8c03-fdc3e8d4b6df"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "35fce0fd-5dfd-412f-9562-980e09525c05"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "236c9000-53d8-4785-b26f-1b1e4913d939"
													}
												}
											],
											"id": "ce971419-3a66-4edf-8c9d-9151d1f80b66",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "9ecaa11c-6e16-47a1-b54d-7b390abc2f71"
													}
												}
											],
											"id": "b07c43c4-4440-4bcd-a238-0884c96247f2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "4e4b4a13-b7ed-43e2-8178-ed2b2d088452"
													}
												}
											],
											"id": "c6590bb4-ac95-4f47-a2af-3520f4d77278",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "dd021123-773d-4c20-b06f-98f4137b2d08"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "c779eab8-7347-4d1e-8c1b-02da95a31a19"
													}
												}
											],
											"id": "8079ed6d-4a0f-475b-86ff-50f121333573",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "1ad6f399-e188-4326-aa64-22df8e68bcad"
													}
												}
											],
											"id": "62b753f2-3b55-4033-af88-a010fb9abedf",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "0690e8de-6849-403f-9e2e-4c9be72e445c"
													}
												}
											],
											"id": "a6115363-d7b1-4fd4-b2ff-1e34b62cf38c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "fec19811-9a35-4911-b6fe-bfdf5e03a44a"
													}
												}
											],
											"id": "1bd84342-c658-4a0a-a882-96946f38a586",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "d41ae802-40d6-4034-bc88-0c5d3df9cd35"
													}
												}
											],
											"id": "6f5b6a83-08f1-4439-8894-e4a20ea7f00e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "6acac7e9-8c9b-429a-b904-f0f597ed4963"
													}
												}
											],
											"id": "df2d5f83-ae54-4dc2-9736-65723d42ccc2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "5e9cdff4-a5d0-486c-8576-34e16b2d0fb1"
								}
							],
							"id": "b2f03a85-1820-4a5b-80d5-0fc0a4db7bee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "f994ba67-6133-47fa-8951-312d7cd48eb8"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "2119a92e-9d13-4a01-b533-0a454f87a9e0"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "0ed4c0e4-e2c7-4765-b1dd-aed30643fa25"
													}
												}
											],
											"id": "9416f119-765d-44d8-9d97-79e493b40d09",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "2684e273-f3a3-4396-a721-63b58318cd5d",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "0dff5ee9-ba3e-43df-9a6f-bd37efeb3ee3"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "c70d2a58-0c6a-44b4-b1a5-35a736b21e1c"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "fc268337-0abe-4ce5-98e8-4cddb9c7e087"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "a3a6d718-a923-47c9-908d-e7023fe59800"
													}
												}
											],
											"id": "0c16a359-db14-4bf1-93da-19bb8f31b890",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "9fb088a7-81a2-40d0-862e-93ba8c34cc31"
													}
												}
											],
											"id": "f06a7377-a8e1-4022-a583-7c180adb6ab4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "870be281-0274-4960-891b-98f60d97e6ab"
													}
												}
											],
											"id": "ff2a3a5a-256b-4e41-a9ef-9e1ab0002619",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "e84f262e-3767-4d0d-a945-5efc5a5f7667"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1c751a70-e8b1-43b1-bb43-852cd3be696a"
													}
												}
											],
											"id": "55a3842e-7f9f-4048-8006-2b5acf7b595b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "28df48aa-ae51-4d9b-b7c9-3044884d9384"
													}
												}
											],
											"id": "e3d9cfa2-2fcf-486a-8de0-4990797a9c8b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "6ca9576c-e60b-4f54-88ea-7414787515df"
													}
												}
											],
											"id": "af7d9355-9b26-4be2-8f86-f8cd187ad5d4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "a84cdda9-c0e4-42ac-994c-fa5ae666065a"
													}
												}
											],
											"id": "e1592f4a-68c9-4fb3-b407-5ac6cbb83f13",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "520d415d-e4cc-4361-88a3-7b38da8e9996"
													}
												}
											],
											"id": "d7846771-fe34-4d7b-93ba-d62f5c6f36cd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "fbc9b043-a5be-4a94-b77f-85c2eb312c5d"
													}
												}
											],
											"id": "75714d44-37ee-4665-8c4a-fbf027b24c29",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "873dc769-1c1b-4f8c-8bed-8a9b62d12034"
								}
							],
							"id": "342b6c68-3429-4bf7-a475-ed60f3fbbbda",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "8fdde058-12a8-443e-aa3a-d592e3483403"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "8768eb77-7251-4645-9069-e6f3996c761e"
									}
								}
							]
						}
					],
					"id": "0c7efacc-ceb2-4e56-a065-b6a178abb16f",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "1ea0f650-55bb-49a8-b2f1-78ea02c0ed99"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "96d289f9-7a30-4365-8bd1-176e9f83183b"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "1e3f80a2-e157-4c98-a7e3-639631d437b1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "bcacf70a-f668-4501-abbd-2fa05858f119"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1f36b5a7-bfcb-4db4-8b19-f4ddf912e06c"
											}
										}
									],
									"id": "9e65f231-b626-4918-827b-4a3e69274f3c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d6a071b7-c74d-4091-b55e-af5568fcd7f9"
											}
										}
									],
									"id": "28020d3e-fea7-4fd9-a8fc-e7e74c0cc5d9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "a2944941-f45f-4908-a65a-2cd8eff41c6e"
											}
										}
									],
									"id": "86c78627-9d89-430d-a6b9-55c7cdbf07e5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "39aef7e7-595b-453e-9cee-7ebb9943883f"
											}
										}
									],
									"id": "4c53fa41-5543-40f8-b834-6bc0310fbcf8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "9c4f48d6-ccd8-447c-aed7-e4d573291aec"
											}
										}
									],
									"id": "d785be7e-0de4-4276-a728-e5123621676e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3459b130-6fcf-4843-bff1-ccda5a1f3544"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "4c3879d6-dc8f-4cec-9316-57f2f81a1a59"
											}
										}
									],
									"id": "d6a2ac55-389a-41c7-9ef3-294ef5beb333",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "d283b0f7-9a34-4f82-9533-930cee287d79"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "d4d917f9-dfd4-4290-81b4-9826cfde3c0d"
											}
										}
									],
									"id": "47ece881-57e0-491d-a284-930f42b73dc8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8ae0f596-dd4f-4ba4-9687-cae140bdd714"
											}
										}
									],
									"id": "726da021-d2de-43dc-b089-c1f0fd4c3e4b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "ff98904d-e211-4f0e-aa98-b10458d7917d"
											}
										}
									],
									"id": "c83dc23a-0aa6-428c-a74b-5735cab2f083",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5b9075ff-2a9d-44c0-b20c-920f92fab338"
											}
										}
									],
									"id": "e5b47f0d-de0e-44d3-a00b-0b013e3ef090",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "6a19c9bd-84d7-43cc-a532-c7c42a172a0a"
											}
										}
									],
									"id": "d7c714c7-11ba-4d42-a52e-37728868e6a8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c2ec2d3b-ecdd-417f-909b-283c98d7cbea"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "7a5003f4-9ff0-47c3-b9c1-3d429ab81eb7"
											}
										}
									],
									"id": "6cb216dd-646a-4a6e-b42d-f83d21f9ddbb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b152022c-1b25-4b7a-a354-ee20a0003c40"
											}
										}
									],
									"id": "d4aba3fc-0ae0-43a6-9a18-1da73275706f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4a598096-2b9a-44cd-8647-481a426dca0f"
											}
										}
									],
									"id": "49096cc7-b337-4433-b3be-3a2620b931d2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "5f71bfb2-e139-4fdd-95cc-8369b15784aa"
											}
										}
									],
									"id": "6bb114b8-cfa5-4a0d-b50a-ca1c0ae276b6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "13fb4a28-3edc-4e28-a88f-e3722a77e0e5"
											}
										}
									],
									"id": "46111105-06c3-43b9-bb8d-0231c1ee73f5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "98a713f5-96b3-40eb-940b-28e28fa25f84"
											}
										}
									],
									"id": "27ccc083-5957-4aa6-8dde-01d7581541ef",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "513dafd3-9115-499c-8eb4-d3dcff54fd1d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "66704203-632f-4f90-915d-6e5ab922b007"
											}
										}
									],
									"id": "d4fe10ff-219c-4e8a-8d38-deeabf15ce50",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "1a5401ee-113c-4ddd-91d2-f79bb57406e4"
											}
										}
									],
									"id": "25377d45-e276-4d72-ba67-43f9204cede8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "467453e1-6efc-4a4f-83e1-410fb6a8eb6c"
											}
										}
									],
									"id": "98f523aa-17a4-4dc2-895f-b9e159e092ce",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "be50c67d-6117-4f9c-bf31-8dbc8b2bd4a5"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "57ac8e35-4faf-4211-89f7-f004853a6add"
											}
										}
									],
									"id": "061a38f0-256d-46ad-8ff5-4bbc22dfb0d9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "08af76c8-bfbd-4458-9d64-c26ad86f0c0f"
						}
					],
					"id": "d32e76ea-a165-48e1-b1fb-04915a6ef512",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "079f5ce4-81ed-4eb2-a307-4582fa7f9dcc"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "1a40d2e9-75c1-4c7e-ad10-a35afdd5a009"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "a6ddd806-3878-4110-890f-f5109d7fa1f5"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "a420eb0e-d94c-4382-a171-3706d660482b"
									}
								}
							],
							"id": "6f7a9f5e-b015-4053-bc43-ed570d9093bf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "12c45402-f5c7-4d76-b7b7-a4df918c0117",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "513f531b-1005-435e-89d9-e9b63e81740c",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "26fbab70-4176-4d70-92e3-9fc55ad088ae",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "445e85b9-30db-41ec-a850-086c3009c3ea"
									}
								}
							],
							"id": "8577b1d2-37db-40a1-a2bc-fafedeccf78f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "3ed0dba8-633e-4e3a-87f1-fbef2dc76886"
									}
								}
							],
							"id": "313c8bf4-58ee-46b5-aaa4-3ef3cfcbfa0c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "dedeade7-cc8f-485e-a6ec-5f633d7b34ec"
									}
								}
							],
							"id": "16dcd803-ee26-4e04-aff5-933ae20f48ab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "69d38e94-7cc0-4f5f-8811-bc8be8652604",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "9c5f6ce1-e61e-4dbb-8142-e74fac9e8986"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "c26a1dc1-afbb-4d54-812f-f159cf825122"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "8e375c97-7219-4314-a745-a16c9774aafb"
									}
								}
							],
							"id": "e4e35c37-7c75-49f6-aad9-671e1377ac98",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "9f8cdaa4-5e44-46de-926f-3d5c3dbd279b"
									}
								}
							],
							"id": "a5962451-4103-4f93-a33b-63cc6d3c19b8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "3fd95919-fccc-4010-8cd7-15a0057d75af"
									}
								}
							],
							"id": "717152db-bc77-4ce2-b5f8-b9bda5ef0297",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "2d8cba7f-8eee-400c-a2a3-7db92b87454b",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "b7a27796-90e0-40c8-8e58-f8416db1da33"
									}
								}
							],
							"id": "101948c9-7460-446c-97b2-7d8bee8bf93c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "ed033d70-eb28-48f9-8ca3-cebc830f56b0"
				}
			],
			"id": "df3655b7-74c6-4bcb-b6ea-73625ec793a0"
		},
		{
			"name": "Tests Copy 4",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "247bec9b-9869-486d-a59a-0fc923210b45"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "202f2330-e379-458a-a764-dcfbc6c5ca0b"
											}
										}
									],
									"id": "ce82e319-4fdd-4303-81e6-69b14618cbfb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9b4996c5-910f-45eb-bac5-fcecb01219fb"
											}
										}
									],
									"id": "ca940faa-10d9-4638-9e0e-4a3a87cfa41b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "58e7777b-6703-457e-ae06-cff9c873ee86"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "9fa5f272-d947-40b3-bcc3-0fb8a8f34ec7"
											}
										}
									],
									"id": "1ecd99b1-fe59-44d4-9cc3-ee81ae859425",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "d3fa7560-43fb-452d-9829-9766cfcd8c8d"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d6cbfff6-5205-447c-93b6-031e8fc07c7a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "a30dd0c9-91bd-450c-a958-9dab46b65015"
											}
										}
									],
									"id": "06a4c566-92b8-4d82-95d9-0ef2b2559879",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ccf1092c-be67-443b-9825-4d08ccd4734c"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "6248b67f-86e4-428d-a532-43f37090231a"
											}
										}
									],
									"id": "8a7d5cc7-d151-472a-a9d5-02c751526cd4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a9d76435-dfb4-4017-a3c7-60e9e331950a"
											}
										}
									],
									"id": "1e106f81-2187-4e46-b3cf-fa1a0ed2eb56",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f4b2df54-43d8-495d-b6c8-b0536f66fac5"
											}
										}
									],
									"id": "15fc0aaf-7fd6-48c4-a91b-82d3ce549359",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8b24a79b-0d59-4d26-bf6c-3a29db375f55"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "b5d120b9-3d65-4c17-9fbb-0dce761fa9fb"
											}
										}
									],
									"id": "e6576865-34a4-42bf-bab3-ebfedffb0505",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "25a11696-d6e4-4d06-adf3-518b9bdf6f60"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "67d5c2ea-0221-4d24-82c4-2e93a74d0bed"
											}
										}
									],
									"id": "48c61f75-8113-425b-b654-39dbb5e00d1c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "49bb94f7-755d-48f3-8c4a-9e8c18987b81"
						}
					],
					"id": "6422afaf-c003-410e-9399-14377628de05",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "ddb18e9e-02e4-4748-835d-87d4e91f4265"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "b108d6f8-d18b-4d50-8843-f3d09fad1991"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "eb93f4bf-948b-4ccd-8428-2688d94de6bf"
											}
										}
									],
									"id": "0974f2be-4b02-40ae-b497-4c4443e964c3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "dc95ad7f-1e29-43dc-99aa-7a107c9a3e53"
											}
										}
									],
									"id": "251c7821-38e4-47dc-a8ad-cd461e41f834",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "3dc83642-5456-4b90-aacf-b13adfad19a3"
											}
										}
									],
									"id": "cc998525-a2d5-4d72-b6ab-c0ead43ed4de",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "3eb1041c-fd21-4a52-bd0b-f64769b90dda"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "7ec07e2a-75b7-442e-90cb-62494c8ae853"
											}
										}
									],
									"id": "0ed24ace-32c3-4071-8a4b-5c5d481e81e6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "2ae156b6-f821-40d6-9af9-b66855e86d88"
											}
										}
									],
									"id": "a568c5ff-88e9-493a-90b4-66f4a4ab90cf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "94d6b351-97ce-4590-bedb-ac29f3a9f26b"
											}
										}
									],
									"id": "f97223e0-1a9b-4e53-b911-fbc39cab8093",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "174b9cef-755b-48c7-aa8b-957c85e99131"
						}
					],
					"id": "31584529-15fa-4922-ba92-1060db7d8cd8"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "8efe0e1e-6afd-4910-b2bf-4c7b09b455ac"
													}
												}
											],
											"id": "ac14cb8d-aa40-4ac9-b33e-d2e0938ab114",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "d5e73540-ce6c-420d-87cb-b2be813293b9"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "ad7dc9fc-c290-4ec6-9cf2-47e26a2faa20"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "49089b27-b534-46c0-aac5-204d4aa73396"
													}
												}
											],
											"id": "75201554-fad5-4c13-be43-e4d9dab0529a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "c2001fe3-bf96-46a7-a599-63f9f2825a44"
													}
												}
											],
											"id": "8b9a9fdf-4e28-4863-a62d-fadf630aca81",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "aed7e6b3-ba21-436d-8f68-da6cd5c0046a"
													}
												}
											],
											"id": "65767ef7-d859-4be3-b3a7-3d663965fdf8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "fd90f3e3-0d0e-432c-ac20-516715c86148"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "cc11a45c-7786-4a7b-a739-e50aeeff7bab"
													}
												}
											],
											"id": "72e80105-29cf-40b3-a5bf-ec805962ea25",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "249a8370-21bc-480a-9d60-7b85410dcbbb"
													}
												}
											],
											"id": "58b760f6-2d8f-4c5a-b1ad-99f68d4c7ef4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "d1f32634-16fa-4036-9a40-356331de0242"
													}
												}
											],
											"id": "92e1b5fa-c5ce-4fc9-a5b7-1fa5a73595b5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "837d60cb-9c5c-4f34-93d7-8f1e02ec57f7"
													}
												}
											],
											"id": "d3c35506-ce9c-43cd-aeba-3948ca5ec828",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "6f682ab8-4ef0-41d4-9ed4-15b44560ea68"
													}
												}
											],
											"id": "5dbc7091-5714-4240-aa51-9903ebdfaa4a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "e96b925b-7185-446e-96c3-3a68287860df"
													}
												}
											],
											"id": "843f518b-317f-4a5d-a3ed-b9443b36d90a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "30f7be61-0232-4e40-a70a-87e922e84b92"
								}
							],
							"id": "d02c8125-c74b-4195-bd0c-90b8b74b5f8f",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "bd9608b7-f6c9-4e2f-8a54-4e0479f1a530"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "f387018c-5aa8-4316-8c0d-3ed77547d726"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "3d3cbb3f-7338-4751-9317-861b28780723"
													}
												}
											],
											"id": "68bc0c3c-ebcf-4a58-875b-3e1026c4fe94",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "5ba2e153-90cf-4319-9e4c-43725bb0942c",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "4d255cd7-0445-4106-96e9-872eaea5cc5e"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "1882d35c-338a-445c-b000-fd05121d09a6"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "96e0c53d-2bad-4152-922d-c0573118037c"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "c389b264-4aaa-4203-8db9-41f1596f687e"
													}
												}
											],
											"id": "5c6100a6-885e-48f8-9246-de39ea9f2ae4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "cd82be32-fa07-4fcc-9c9a-2e400d5fe387"
													}
												}
											],
											"id": "d4c33294-9576-4889-9ae0-166d69b13793",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "17b3cdd9-3599-4675-bc18-5c71addff47c"
													}
												}
											],
											"id": "7dc69cf6-773b-4f35-a86d-d6558c877dd6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "cc1a887d-166b-437b-98b6-f7458ee3e4b1"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "c4d915aa-03aa-4bdd-b9b9-533d36638262"
													}
												}
											],
											"id": "2f4d4979-1c8f-4106-940f-b5829fe2f424",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "0d75edbf-517c-41a6-89ab-e83662605daf"
													}
												}
											],
											"id": "c21aa830-dcee-4fc2-82da-80b630cb034c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "9f9dfa5d-0f4f-4170-b314-9ffff4b61852"
													}
												}
											],
											"id": "e0cdd3c6-4c55-4e3d-942f-00bb2c911f6f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "e957edb7-8d4d-4d1d-9c8a-e131eb6ae4b1"
													}
												}
											],
											"id": "4cb48242-807d-4b41-a9bd-980273f2162d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "2a2e02c6-5f15-4796-a73c-93529122b450"
													}
												}
											],
											"id": "1d6a2f4c-0f3c-41d6-b64c-1e2099abce93",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "fc6f4122-a90d-4a5a-a148-c29c7886bab3"
													}
												}
											],
											"id": "171de337-d900-4530-ab8c-5fc63440e49e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "4b362849-3e11-431f-b4d1-d590ccd07bc5"
								}
							],
							"id": "cd761d90-6108-48af-a278-f40e757b4da5",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "d4882711-2f04-43c3-be97-18112907c739"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "4cd7b652-ca4c-4987-a244-cc164e11d3fd"
									}
								}
							]
						}
					],
					"id": "094880e3-c032-4df8-baeb-da82e782b772",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "da55a476-c8a7-44e4-b096-30e175902e48"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "7e3af940-d4bb-4beb-89d3-bcfd45e816c0"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "5746bb38-0710-4a6c-8fca-a46203738e11",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "6b49b215-907f-4ced-a2af-fac32c38489b"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0f328aa2-f360-43f0-871e-093e3548c05f"
											}
										}
									],
									"id": "74f05010-53d2-4620-b7f5-41d1498f8343",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3576c9bd-ba83-4061-95c5-6f10724c176b"
											}
										}
									],
									"id": "ab4c1e53-69c3-4222-90e6-2e1b450be116",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "a38c117d-3dac-4f72-839c-6a40d9ac7ad9"
											}
										}
									],
									"id": "0f17f945-0542-4f54-8f42-9142cc2602e5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "85104fda-8603-4a17-a3a5-51e13aa544be"
											}
										}
									],
									"id": "a847de17-2ed6-433e-a9db-9982948cfa4e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "b7f68989-0038-4dbb-b535-1845380e5e30"
											}
										}
									],
									"id": "411338e9-a387-4548-af40-9766080e152f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c2540913-3cad-483e-b1b3-98b50d26ac48"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "94103fee-21a8-4031-a4c2-5d63d6468756"
											}
										}
									],
									"id": "48437b70-cff8-43c7-8f22-fa6a40366f5b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "336a0eaf-344f-4171-b723-4ed91d26f649"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "d16954bc-4bc9-481a-a42d-475f7273ea67"
											}
										}
									],
									"id": "5ea09d9e-d56b-4122-9f1c-44de27073881",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2b620ad4-d13f-41ff-aeaf-fe788503e3ac"
											}
										}
									],
									"id": "53ccfd2a-ab15-48ab-9640-84a15e0f264d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "e7303b5f-53d3-4d13-9a44-0e642a68050d"
											}
										}
									],
									"id": "165f5ee8-b00b-4fea-9778-d3b44a45489c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3a347930-7ccd-4ccd-8c84-6abcc4cfa8c9"
											}
										}
									],
									"id": "5feb0e91-e22a-42dd-8685-4676a47b3da0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "72d5a224-e934-4969-b258-a4ae6d34504d"
											}
										}
									],
									"id": "c3b02514-55d1-41cc-b8c5-2bf9b12b2360",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "88e1df4c-0913-4e1e-9da4-4428ab964a8b"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "24bd9a01-4de0-48fa-9cd3-1f0e30a8579b"
											}
										}
									],
									"id": "b44e2729-e611-402a-8c21-b4a4b94c3c65",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ccbd36b4-2d4c-4ddf-a87b-0cce49869e7c"
											}
										}
									],
									"id": "8c072870-3cb2-4749-ad4c-48b91bbacc60",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "975208d6-5a56-4bc4-8ed0-1a776c5bf454"
											}
										}
									],
									"id": "2de35ba8-03b8-4ed3-8b03-cd9e6d6619b1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "e7de6c29-bfa9-40a4-8dd7-ff7e729b9a6c"
											}
										}
									],
									"id": "b4c9c288-08ba-4cd4-a32f-518284835dd6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0b39cab8-61d4-41c6-b54a-78b4750ef82a"
											}
										}
									],
									"id": "0aff9825-68cb-481e-98de-63ee2fbe71aa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "aa6106c2-9c9f-4a96-b4ca-9b890c85b103"
											}
										}
									],
									"id": "c82d697e-0c7c-4a33-adfa-9b51d8cb860b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3759bace-f47e-415e-a7e9-cab7ba63b39e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "9d92b920-d8cc-4c0e-924e-ad91ffdaa672"
											}
										}
									],
									"id": "627a0d59-60f9-4352-b526-3ce366c19a47",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "ca9d14b9-d198-4398-ac4a-b6c51064d201"
											}
										}
									],
									"id": "c2b73afa-05ac-4bbd-afd7-45d0da652400",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "cf65e1a8-440a-470a-8c1b-89e06d31c623"
											}
										}
									],
									"id": "550d3b94-8b8e-49e2-b155-d5fc9e79ee29",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "93df8023-5e2d-41ae-9a4d-945590b986c9"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "3fc01238-a0e2-41f7-b723-8d5706dae4ba"
											}
										}
									],
									"id": "bb938e09-fce6-445d-93e7-c28c2aaa9013",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "73389287-5814-4d95-8b1e-33431bae5d6c"
						}
					],
					"id": "0ea985d0-3c37-4683-b4cc-5f8f3ce3b4b2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "5f93e831-c9b1-4a46-9da7-88dfaa90f71e"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "400b14d8-25cf-4537-9a6e-61875ab7efb9"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "d8cd7563-8bc0-4982-b02a-1aaf083b69dd"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "1f9b87fc-082d-46d5-970c-34ee6102503a"
									}
								}
							],
							"id": "d84a84b7-b20a-4552-b80f-d4617099f266",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "0cfbd694-8b06-4956-b08b-bb24848be45b",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "5b50fde2-6578-404f-b681-af907dcc79b2",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "beae84f4-513b-4fa7-a928-5db04bec82a2",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "e0e413e2-54cf-4972-a7d3-656c6fbc61a5"
									}
								}
							],
							"id": "92233500-2601-4c73-9260-19d291aea33a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "ab9b08e5-dd61-476f-bfa2-bfdd1c16aee0"
									}
								}
							],
							"id": "0cf1dd5f-cfce-4c9e-992f-338e3497c3c2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "45862676-ea4d-4c1c-b047-138a459c9bbf"
									}
								}
							],
							"id": "7bb6a616-8413-4a7a-ae7b-383fa770ed09",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "aea1b9ec-8a48-4d3f-ae37-9c53109afdac",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "f2183cf6-5480-487c-8e3d-d9f6c7a4509d"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "61269c47-990a-4849-ac5c-4f61d459d214"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "32968fbd-ebd4-4559-94b3-1d66197670e0"
									}
								}
							],
							"id": "b2040fdd-5b6c-4eba-abb3-6ae51f669e2b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "ac06cee6-c8fa-4ff4-ba16-33e9d5ed10a3"
									}
								}
							],
							"id": "92dcfe35-41b5-41e5-b3f0-23cbb77103b6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "27a6cb97-c1cc-4b40-9c0d-721f96397418"
									}
								}
							],
							"id": "446c77f9-7f05-43d0-a025-6261d1ffbbee",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "01bd7292-ef6a-48d7-8f3b-6be8d7a4a994",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "0e33fa68-205a-418f-866c-f68e7bdfc482"
									}
								}
							],
							"id": "250a6b3a-128d-4d49-977f-cb60fa3d09c6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "7d0bb8ed-6382-4ae8-a675-d5f64a14d700"
				}
			],
			"id": "9940e24d-4056-4c56-a125-2f4d11a976f1"
		},
		{
			"name": "Tests Copy 5",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "42537880-de48-4374-b598-f7092173c7df"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "5d00bdd8-6d5b-45e5-9c48-cef1b700e211"
											}
										}
									],
									"id": "c3fc666e-1d00-46ab-8c31-09252095adea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "fee4861a-bba8-43bf-8b3e-b32ed3cce96a"
											}
										}
									],
									"id": "8dbde3d5-7cbb-49b4-99be-5d2a7fa55acc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9feae694-c53a-4908-8017-091558f6ee9a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "93966319-1ebc-4eed-90cb-083ac236d719"
											}
										}
									],
									"id": "5e5bce71-03bc-4885-b493-32adc5dafe6b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "620f129b-ced4-40cc-8b70-1e431f56c0e6"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "bf4a0d71-0f9c-4ffd-ac91-0f8cbe41467d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "47cf4c32-5b56-43df-8035-e880bef722bf"
											}
										}
									],
									"id": "7433c37a-5c3d-40ec-87bc-b3910c9c8bc6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "dbc334dd-c69c-4703-ba26-c24b72aab22d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "01315d05-da5b-4e18-b0a7-ecc36564480b"
											}
										}
									],
									"id": "faab5ad4-ab33-4eb3-98d6-86b8fb0283ee",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "16cb8133-3d14-4ef7-a2cb-75eb013a0340"
											}
										}
									],
									"id": "23045732-49f7-46fb-b606-89b9c4d063a4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "120af6bc-d3b7-4a1a-b030-bce945d146eb"
											}
										}
									],
									"id": "8d663592-27f3-40cd-b35b-2a1de6cb0db4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ba668472-d2c9-4470-aedd-31bf6bca66e5"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "15a5202d-1643-45e5-bde2-018fb97f6a64"
											}
										}
									],
									"id": "4ae825f7-a8c2-469d-a51c-58834c1db1ee",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "b1ddb9ee-7676-4df0-965c-847913c9c2b2"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "c1ffcfeb-b6ca-4c4f-8e89-e17dd77bbf15"
											}
										}
									],
									"id": "1799dd78-cfbb-404d-9423-185fd46ee559",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "6327ec96-f6b0-4133-a3e2-b63abb5f34ff"
						}
					],
					"id": "2b9a70ef-bf34-46b3-98ba-afdd2deec805",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "39e13976-1b8b-411b-b590-2a8fb00d0ea2"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "bd9cf488-8de1-4685-8ac1-f11f5c28d1ce"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "09007265-0f84-4699-956d-57b522e5f775"
											}
										}
									],
									"id": "0f86be9a-f94e-452e-bee2-2cb23eb9e0c8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "df44747f-2f78-43a2-ad0f-4966660213d0"
											}
										}
									],
									"id": "932b8316-d03e-49bc-98af-5a5b24fa3234",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "ebb8968e-6e06-4b1b-b41c-cb2cb99503ba"
											}
										}
									],
									"id": "8fde6c1d-e304-4acc-8b56-88c29a1d38f0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "b4341333-8e65-41b4-832a-06b2ad6613ce"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "b1172edb-2548-4c76-92fe-6dee04f87891"
											}
										}
									],
									"id": "26a401c5-7376-42c1-9c1d-3d20d52a06b9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "adce48eb-0952-4c2c-b0f6-b8c372d26dbc"
											}
										}
									],
									"id": "3ca198d3-0c48-46d7-a623-900e74591a84",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "6f6fd3a8-afbd-49e5-8ed5-c20c155a8b5f"
											}
										}
									],
									"id": "2719f79e-4e54-4fdb-b788-ee5b7dcf1c61",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "6e4f9393-9d40-4d2d-8bc1-5ffe9bdf1231"
						}
					],
					"id": "23c21df2-2a3d-49b6-a839-ff14ccc62482"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "91bcbe0a-b9bc-4dd7-b8d0-f0ac630565af"
													}
												}
											],
											"id": "ccc2406a-0099-4c64-aa65-3f67a2c5873c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "addc1c83-b137-46fd-b8d7-4138686ecbe1"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "ec06d91a-c36d-4074-84d3-a4bcb423bd16"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "2063cd57-7887-4d38-bb9d-d64577b78ffc"
													}
												}
											],
											"id": "daeb0821-1a61-4eeb-8a0e-0d3572881d65",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "18b0d365-0a4f-440b-85d8-b6c81c351e8c"
													}
												}
											],
											"id": "a4041941-c6d6-4a5d-947d-de30d02788aa",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "ac3af2d8-8622-4bac-8825-3eca254f92c3"
													}
												}
											],
											"id": "7b2dea71-6446-4e07-9589-76fa9dad00f6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "3e1040b2-33b8-48c3-8271-7860841e413f"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "800f0fcd-2200-4ad7-8fa8-9678018ed6ab"
													}
												}
											],
											"id": "b9654bc9-d6a6-4b1b-b8d4-5f1d393f1be2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "2fd1a076-ef4b-47ba-bdb0-60f95086e559"
													}
												}
											],
											"id": "88fe4b57-c837-47c2-abb4-4b40393ed63d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "10062283-e3f6-4482-9b50-a246e3091bdc"
													}
												}
											],
											"id": "57f89c80-9d4a-42ac-9849-d607b1ce45f3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "7b5cda44-f640-4672-afa3-a8c762bd404a"
													}
												}
											],
											"id": "a6af4cb2-69c9-43bf-8d49-51d090b69040",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "06211d32-bf38-4590-aeec-4a294bad87ec"
													}
												}
											],
											"id": "ffff3ba7-ecd9-4742-9437-552d4f1b3c51",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "c97d4b59-5773-4e83-8e2f-438221e30b20"
													}
												}
											],
											"id": "ae2f8429-01f2-41ac-a4f9-2968f4f087c8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "d8fc20bd-7caf-4bec-91d5-9c8218d61e1b"
								}
							],
							"id": "eb33fd87-1035-4303-b955-2a34bb8c906a",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "54ad73d7-13eb-4f23-b830-24f695eb9c0f"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "002142fb-f53c-41b3-ab88-cf7da0e73395"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "dc9d174c-8be5-4335-9f06-0f3d77d35df4"
													}
												}
											],
											"id": "dbc317cd-8aff-424d-93d3-b280677f0f8d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "418450b0-6e8d-464a-bb7d-f759e8222b5c",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "3be494ed-c751-4cb9-aee3-b55791726672"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "2a47804a-1f32-47de-814b-67bde2f85947"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "44427161-92c9-49a5-820e-a44c66558026"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "e018cff5-3bea-4a6a-ace0-87e82dcf6fca"
													}
												}
											],
											"id": "c211a937-65aa-406c-880e-cf0e879ba4f6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "d861e8e7-2f80-4358-869c-888de915ce95"
													}
												}
											],
											"id": "2eb5fcf1-a5e3-400e-983a-111c6cbccf97",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "c7d73b0d-88d3-434a-a0d3-e473f133b574"
													}
												}
											],
											"id": "cfc80b4b-a238-46e9-93df-11300bb43319",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "84e29e39-cc9b-4af7-83bc-1d1420d5935a"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "9b71234a-dc5f-47c2-b3fe-2b4e2cefbcb0"
													}
												}
											],
											"id": "672a927a-6115-4ea5-9996-d3d3172013eb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "15cd4183-e73e-48d5-96ae-64b34c610835"
													}
												}
											],
											"id": "29d72d83-0a1e-4a35-8eca-e5bbbe2c913b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "c22b6c67-2214-4a72-8dbf-9e5deb26decb"
													}
												}
											],
											"id": "53f3435e-0171-4377-92fa-a85874ac7db0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "eeb4de2d-3f16-492b-90a4-bf50786bdc76"
													}
												}
											],
											"id": "23fd108b-1f4e-4beb-91c7-db3b10b8978d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "2f685573-6fb2-417d-b6d1-39dd15af00aa"
													}
												}
											],
											"id": "48473b61-3fd8-45e4-9637-6c296b80263d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "f3d1fda5-1f88-4d01-8b10-a061c1ce292d"
													}
												}
											],
											"id": "ed3f7dff-5a5a-4d9f-9fcc-df5d9631bffd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "dbb3b0f6-570d-4e9a-aa0f-ca9c3d5b33d0"
								}
							],
							"id": "480af22f-6c03-4266-8819-12b0206ba99b",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "f2d7b0e0-cb63-4ca0-937a-10c563e4d4d3"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "4fe41985-8612-466f-aa33-38e4c3b2663f"
									}
								}
							]
						}
					],
					"id": "d2fff356-bb1b-4765-8bd1-45ce8a28c4df",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "4805858e-2adb-4aa9-9bbd-0b0199a12c3c"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "8d054e93-65da-4b66-aa62-d2668b745f47"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "f57b0390-1af4-436b-b6fe-59a066fc6766",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "7657c59b-84c3-47df-869e-6c67d9ad4bd3"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "35cdcc2b-b8b3-4da6-8972-45c23fefa3e2"
											}
										}
									],
									"id": "db9a9f9c-b1bc-411e-85bd-db9fbd4e49fb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e6f60240-bb3f-4022-9a08-9f36d6975fa2"
											}
										}
									],
									"id": "9b76e22c-e5ad-417e-aa01-e834f26ca465",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "dda366e5-1b1e-4d74-a85f-ea32b289a254"
											}
										}
									],
									"id": "9fb61a06-6fec-476d-bff8-76c1fcab8250",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "bc522880-b1fe-4f46-b193-428d36983812"
											}
										}
									],
									"id": "c64ac99d-96b9-4035-bd30-2c87d19fcbac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "e1c78569-486e-491d-a569-81a1669abc57"
											}
										}
									],
									"id": "3f8474d9-cab6-4801-bb97-5ed0d49a6aa2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "30c6f383-97c8-46db-bd2c-e65fbaf80aa7"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "fe23c04b-c7d1-4748-819a-e70cc9d03755"
											}
										}
									],
									"id": "4fccf8d0-d184-4bcd-af76-b140d481c02c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "6ceceb78-9e83-4af0-904b-5cc1ea43aa35"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "b3709ae1-43e5-4d31-8d21-c8550d9b01b9"
											}
										}
									],
									"id": "6a516dc2-ed88-49fb-956d-9204c69f9eb6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ad412d38-f3bb-48e3-833d-5bcb7abc0f88"
											}
										}
									],
									"id": "3ef3314b-e1b0-4346-85ab-d8d8ac4495b1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "18ba8652-d112-4bc8-b2b5-85296c0933b7"
											}
										}
									],
									"id": "1c5a228f-5f49-4cc3-a255-96810d7ecc13",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "bf0fa8a2-95f4-42d4-bc07-27bf595225e4"
											}
										}
									],
									"id": "89688852-d89e-4c4e-a8f5-6b31780aec3e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "cb38f1a6-8146-4cdd-9f0f-ca1b14a9ccf2"
											}
										}
									],
									"id": "5c2fa189-a898-4197-aabe-d783cea37219",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "725cbcc9-dd78-4062-88de-b0d6fc4dd2e7"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "d7f6953f-223e-4055-b839-553c610ff321"
											}
										}
									],
									"id": "0603610d-93db-4bf1-aa79-3b70d89f2db2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "150231db-632d-4679-88c9-c69e62cdbbbc"
											}
										}
									],
									"id": "671fdb39-8260-4980-aa29-243ca4a5e308",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ef72faa4-7914-4f1e-a790-2cdc156c9cd4"
											}
										}
									],
									"id": "228a74b6-35a3-48f6-ac3a-d2560d508035",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "a6eef12b-7760-4a63-adb6-d467b0313bde"
											}
										}
									],
									"id": "48b19738-9bf5-4b0e-9139-c4d407131571",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4791e9c2-e112-4f99-9a77-c5a1afb8eb96"
											}
										}
									],
									"id": "9b6cfa3a-c6c5-4de8-b560-785cb5b3bc8d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "293f8dd8-a7e9-4b7e-90a3-0e8156040398"
											}
										}
									],
									"id": "7aa352eb-9fbe-4bf4-a7cb-487b5b5e3b44",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "dea6007c-ddc8-4af8-84d0-1698ed677d64"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "949b1ac3-8459-4de2-bbd2-c4cc7fbbb159"
											}
										}
									],
									"id": "652d3ace-f553-4855-b948-3d68db8505ea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "6f2d50a4-a03d-4cf5-a205-23e75fcd83cb"
											}
										}
									],
									"id": "5a52bf69-917e-461f-8bde-e2cd17ec950c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "ae3aa170-060a-48ad-a8ea-a9dbf6a952f4"
											}
										}
									],
									"id": "433d1cea-85ae-4c21-a727-c28534e58d46",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2d0d8dc2-defc-4e99-8715-1c3c13125fed"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "003ece45-071c-4d52-a755-b030b99a828b"
											}
										}
									],
									"id": "558cc522-7a5b-4cd4-a0ef-a4c357fce8ff",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "30dcd10a-f286-4667-8b0d-7e027014b823"
						}
					],
					"id": "cca48b77-48ae-495e-9e0a-c48e750fa9a9",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "7cc7e2ba-5c7a-4283-bfa4-57c6b136bb37"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "51d87a61-4fa0-4db1-a192-4dfdc1648e20"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "6a1e4afb-e5c8-4be4-8376-dc0ec9941865"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "2e911c26-2c84-47bc-bc61-5798d462e393"
									}
								}
							],
							"id": "a4d4bb9f-db5e-4746-843b-269521cf9816",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "80e50bda-9470-4de0-bdd3-b1434a18f2f3",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "ea2957be-2183-4bb2-8680-760e29c226c9",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "e46a92b2-59d6-4c41-b750-9dd348438aaa",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "3eb7c0ff-4daf-4282-8fdb-d192be2ad3f7"
									}
								}
							],
							"id": "04d0dff6-f5a8-4d98-b004-95daef0678a6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "c2f4855d-c91e-4d11-abf2-d7f25f109b5d"
									}
								}
							],
							"id": "d16f11d1-ee6e-49df-a308-d2d08d8330c4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "60ad6bcf-1e6c-4002-aa25-4850ebb1e5fc"
									}
								}
							],
							"id": "5ab2d194-da88-4b7f-b468-6282788bbc94",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "65690e98-ac6b-4ff0-ac92-771a9a8c4026",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "6986fd40-f39c-4ea3-9c52-565ec97bedbe"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "4259e7f7-15bf-463c-b855-d1d3564bc2f4"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "554ca0e5-45bb-44c4-aae8-6ac51ddd4640"
									}
								}
							],
							"id": "881d7d74-cf02-48a7-94cc-7d2229b2f335",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "97d0874b-d901-401a-9044-6973597c5ff7"
									}
								}
							],
							"id": "f4f1ddbb-33d4-49bb-b16a-924de1de07a3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "03960984-1df5-4ad8-9e5c-69dbbea15e57"
									}
								}
							],
							"id": "70e93535-4d34-4d4f-851f-1ea2ae82e173",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "8468ffbf-9b30-4024-b53d-cdd3f8adddb3",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "e6cad004-230d-464c-b81c-90546d703a06"
									}
								}
							],
							"id": "a00dfe92-27bf-4713-ba7d-c20fb75bbd53",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "e302b7b3-a099-46f3-97e5-88a687cdd314"
				}
			],
			"id": "ab656ba7-4117-46ba-be9c-9aa0f51f4541"
		},
		{
			"name": "Tests Copy 6",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6f7152ff-ad19-4f44-b054-100ed7932ce4"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "718d4977-2355-4713-a385-eedbd506fb75"
											}
										}
									],
									"id": "830ac80d-70e1-49a6-8a42-125c2778da21",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6d397f3c-4fda-4942-adbc-5938f9b75497"
											}
										}
									],
									"id": "1bae7180-be5a-4cf2-a60d-45f92ab80520",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "008f06b6-5a0e-490c-a601-216b2662ab34"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "8cbf4558-5f50-4412-b54d-b3fed2b47c6f"
											}
										}
									],
									"id": "1fc2fe08-3678-4cac-b6f2-e45b89dba084",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "feca01cd-68ba-42e1-b958-bf772f3dc889"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e9e4da7c-8739-46dd-89fa-24b74f0fcc48"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "c0a000a5-7661-47a8-a6db-786c54f963ad"
											}
										}
									],
									"id": "d77c87e9-2bc0-4085-8535-2ae787c82dbc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b6f32689-5079-4d9a-8467-fcc291aa8d9b"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "c44aeddc-2cf0-4222-9a22-def97d03d6e9"
											}
										}
									],
									"id": "137828b8-ca2e-4373-8880-efaec0806298",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1bc59e7f-c73b-46d2-9225-71fbd1c53b85"
											}
										}
									],
									"id": "ba67074a-e8f2-45c5-ada3-ff2824383fe6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "45bbdca2-4536-46be-8e5c-7b0151e439c4"
											}
										}
									],
									"id": "a22775f4-4ade-40bc-b994-9e71aa0900b6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3296a07e-fad5-48fc-9935-615215ef4ca2"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "5e096bce-0d9d-47fc-bf75-3f9960e674ae"
											}
										}
									],
									"id": "e5535dd0-76da-4686-ad89-fa3eef6f1be1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "20207fd5-6083-48e8-8280-be3e42e41037"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "f711f834-fe07-4b33-8f6b-d7a9be944894"
											}
										}
									],
									"id": "e42ac0e6-6ad6-4e33-8244-b679780895e3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "5925d388-b165-4d1c-ae35-c25df1452f04"
						}
					],
					"id": "e29ed474-2777-4ffc-824e-f8b86ae6e808",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "ca07065b-897e-46b8-a6ef-ba70fefe4e0e"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "d27ab584-46e6-4a98-95a2-681b5efff582"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "fa67b2ed-2071-47e1-b904-7e1b6b9b09fa"
											}
										}
									],
									"id": "93ee3982-ebbd-4a4c-b943-5bdf40005061",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "9300b861-c65a-43ae-bf75-ae7f445b3452"
											}
										}
									],
									"id": "66aa3263-694f-4069-9858-63523616299a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "80dc64b9-7633-43df-a197-c43977e0a614"
											}
										}
									],
									"id": "06db81b9-7415-4b80-9dfd-68761fa4a2a6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "5a339208-4ac8-4e42-b31b-920213a0ae1f"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "417e9456-96f5-41e4-b915-27cdf2615054"
											}
										}
									],
									"id": "e51bcd89-b9b6-4768-93b3-c7db5538b76b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "ffbcecb1-2beb-406f-89b2-4355ff64f648"
											}
										}
									],
									"id": "91919a99-de8c-4d9e-9488-bccb10a851f3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "275aecee-3866-45bd-bcea-92647500a86b"
											}
										}
									],
									"id": "7ef0913d-15dd-4d6a-927c-6841e6f42d0b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "9af476c6-5d42-4354-baac-2712f3e3644b"
						}
					],
					"id": "731d02c5-c8bd-4efb-8e9c-693e537690c9"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "ca66e02b-493b-401d-99de-e45af1fe61fa"
													}
												}
											],
											"id": "e482528c-ecf7-4e9e-a372-f219e13f3a23",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "e94d3d2d-a644-44a7-aea5-27ae1841213e"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "2966432e-18ad-4f36-b19d-d2cd21d473b0"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "73adec3e-b8c9-449f-917f-4327ceb47890"
													}
												}
											],
											"id": "6b8efe0a-e847-434a-8291-be0bb783550e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "31112bb2-58be-4188-9d70-0344d77eb4ec"
													}
												}
											],
											"id": "61b601e1-78fb-4b5c-ab7c-9ca774c99245",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "a438f476-66e6-46e2-b6b1-8b357698301b"
													}
												}
											],
											"id": "a959acb3-e5dc-4b4b-920a-2613eaa9d699",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "100fad7a-bc2a-46f3-aa3c-351a8ae3c839"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "2ef20214-a20c-4d11-b946-055f99440141"
													}
												}
											],
											"id": "72dee6d5-2272-4395-8692-e5ee70f2ee51",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "4e410231-e4a5-456b-8b93-9f7d980d6735"
													}
												}
											],
											"id": "84ddb55d-bb04-4d89-abdd-56bfa8a46a59",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "75b601d3-acd5-4426-be78-e7ccc39e14d9"
													}
												}
											],
											"id": "37195f09-9a33-4657-ae53-ec6ab2214614",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "fcdd94e1-5ceb-4a67-bceb-101f83e5a4db"
													}
												}
											],
											"id": "f8a677ce-586f-454e-b67f-21159dabb69a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "eed369f8-d06e-407b-9fe4-fce9853d9e1e"
													}
												}
											],
											"id": "02e4f3a4-d268-45b5-a806-53bd89a87257",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "35ad7b94-075f-411a-a23b-493c60efaea6"
													}
												}
											],
											"id": "940e85a5-f964-4b12-a3af-365a7e5966b1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "74a106a2-f7ab-4054-b0b4-7f0159ebacf3"
								}
							],
							"id": "3f51260b-7858-4317-8069-419db07e77d7",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "a2802535-54ca-448d-87b0-fb2a9754b7f9"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "4007bf37-6d1c-43ac-920b-f63caab0b0c6"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "aba2f2c3-07b5-4cd8-ae32-674119f923ec"
													}
												}
											],
											"id": "47e1743f-3ef4-42f0-9c2b-d8714d364ca8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "a20d6b97-e699-4d5d-bcc9-ce05ffd747be",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "e1908f97-12ea-4cc6-9dc5-71fbe883c7cb"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "86d25d69-d5fa-4338-ad1a-44e1fe1ac4f9"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "4157dee3-667b-49c7-aa23-a5ddb9ce2587"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "06e5623e-41ee-4171-b995-6c5bb8c1e2d9"
													}
												}
											],
											"id": "e906d478-688d-4e4d-8dbd-15961cb4ba80",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "405d2232-c69d-4acb-92ab-4da3e44d8477"
													}
												}
											],
											"id": "09802355-9475-4ae0-a35a-07f06e7521e4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "b215ec89-56ed-4ee9-945e-8e71cbf79a92"
													}
												}
											],
											"id": "1ae19f98-4827-4f59-8b22-0a00c6d03479",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "7e160e70-a549-45da-b438-cd3354cbb2c1"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1133178c-25d0-4d04-84c9-2d1a4d3f1d30"
													}
												}
											],
											"id": "a75f02ff-3350-4027-8965-c567cb78ce45",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "dbbe3df2-1115-43ce-8adb-6fb258ac4f07"
													}
												}
											],
											"id": "9b87d661-6644-4c3f-8b82-29210ad1347e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "bdd926b4-22d5-4834-b22d-ec5650e30501"
													}
												}
											],
											"id": "a4ad4f43-80f7-4138-b1c1-7fe4f160a1f1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "a0c316b0-ada4-4d07-a150-cf5ef0085b3c"
													}
												}
											],
											"id": "3cbdde70-c818-46a2-926b-4715e53e0e64",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "6f7f7a03-1e1a-4790-ab4f-ffe01fab5b82"
													}
												}
											],
											"id": "1ddc4833-babb-476f-8290-4ed0015ef90e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "40e73134-3a68-43ff-87a9-23b8307ad5da"
													}
												}
											],
											"id": "58be6723-5c68-440a-83a4-169657ea2f18",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "b4b6a2ca-d69f-4e1e-8d63-793bfc24a55a"
								}
							],
							"id": "bf4cd7ca-061e-4335-ba01-e890525aa257",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "de8b04fd-d63a-4964-b732-a42b075fbf5c"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "3a659996-a405-41b3-adaa-31b73b4778b7"
									}
								}
							]
						}
					],
					"id": "1e7c4e76-22ea-40a9-86a7-c3251d03b771",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "70ca1a86-344f-4ec5-914e-327e11b9a7d7"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "dc022060-c6ad-4b0f-a4e5-40fbbc8e965f"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "c0c6aa8c-15bb-431d-804c-8c758d8b1e64",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "ba80e5bf-8aa5-4739-b33f-cc1ec68670a2"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "08f99385-3f7f-4705-8e22-fb56ef625f05"
											}
										}
									],
									"id": "29c3550b-1263-40a9-ab57-76840ecb3374",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c5b3bce2-8e91-45b8-8b29-ce829f44aed1"
											}
										}
									],
									"id": "d16dd094-b307-497c-a0a3-94c332e58f98",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "c1892fbe-d058-42de-a912-248c45570847"
											}
										}
									],
									"id": "c3c97c98-cd53-4710-ae2f-6a25df05a8cf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9685dcb3-4b6b-46df-bdcb-8a839d3d250c"
											}
										}
									],
									"id": "8db7eb88-facb-4aec-9aaa-034d78755192",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "11a589b0-7b64-4d17-89e2-61cb6ecd986e"
											}
										}
									],
									"id": "5534a0b4-f165-4c6f-8ad4-50e5cc7381b7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "77924bb3-daca-44bd-b3ec-2932cc4c6025"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "ddcace71-edb5-47fc-8235-da06f319b947"
											}
										}
									],
									"id": "bf6bfd9e-093e-4c60-b9c1-839c3a32b6b9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "4ccb4210-529b-421f-b26c-811d1416837c"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "3ba78698-03e2-44fc-8e61-d746a357ad02"
											}
										}
									],
									"id": "2e132044-c89a-4858-84f2-dcdbf7a3e559",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "669ed091-c41c-4fef-84fb-b55a3c033f3e"
											}
										}
									],
									"id": "cf019640-d764-4b29-8ecd-90099f1da457",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "ee5a6ff4-47b0-4b5b-b0bc-0e540e1bd068"
											}
										}
									],
									"id": "d5a0373d-e269-43a2-9eb2-64fed0d7407b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "eac24455-f582-4f71-88c7-a4454537bd8d"
											}
										}
									],
									"id": "e2fd3b0d-ccc1-4ca5-909f-d66b1e8a93a1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "5d1741a3-0afb-4335-9e8d-5d0ba01e921d"
											}
										}
									],
									"id": "ea0bebd5-9ab4-4a32-80c2-6ab00713b3a9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e1a98bc8-bcb0-4749-942d-6bd3202911a8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "fc10f379-7dfc-4077-a170-3d99a4ac7a5c"
											}
										}
									],
									"id": "75fee6bc-67c8-4155-9f4d-aaec8f882deb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "36c8ea60-3916-4482-a6f9-ac9192a4e316"
											}
										}
									],
									"id": "b06b2e94-8205-4cb7-b126-079b5d5ea4ac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "085eb8bf-6a44-42f3-9d4d-305232a67c41"
											}
										}
									],
									"id": "ef04a6e7-5dc4-4697-9055-765cbb051efd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "70b43819-7c67-46ad-aeba-e9796cfdbb76"
											}
										}
									],
									"id": "d459ce14-bd08-41bf-bc27-2a7ed13d742c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "699e261a-1e26-4c9b-9114-7a9a34ad280f"
											}
										}
									],
									"id": "5b0522d3-6dd3-4933-a0af-08bf7499deef",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "c2385b58-6d7f-4602-bdfa-22f3823890bc"
											}
										}
									],
									"id": "a84bd516-3faa-47e8-ab8a-fd98ac696e4a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "21e4bee9-5abf-43a3-88b7-7ff3f41d3a88"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "a7dda02a-3db6-4a45-9f75-bcc3f46a4004"
											}
										}
									],
									"id": "3c147a2a-a6cd-4b1c-a591-63c2676071f4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "6f355f9d-9fd3-47ad-be78-cfafc5a47878"
											}
										}
									],
									"id": "bf8fe499-c51b-40f5-b7c9-be45b0ad0ea3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "92792265-cf10-469e-a906-343eceeb9a95"
											}
										}
									],
									"id": "97f59b3d-1a90-4fa7-bd59-ae70f3526166",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "594f7519-c2f0-496f-b0fe-5a894761e7c8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "54ea0bea-25e8-499d-93d2-c2ed47e4e1b8"
											}
										}
									],
									"id": "5647c479-152d-4cf1-b407-5d3c47e5edd0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "8604a517-3029-441b-a9a7-ddaefaa51575"
						}
					],
					"id": "10fb5647-b410-43ef-b799-42e58026bfda",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "b259e3cc-4ef8-45b5-875b-e9f28eb625ec"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "775e9c27-b26f-49b4-a0f9-c632e727909b"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "7d7c2e92-a2fb-4284-bfbc-1296d920ba8b"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "41c2dc72-1d00-4814-a55c-0ccc86658b54"
									}
								}
							],
							"id": "f7b54905-b28f-4766-822b-958757690baa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "08aeafa2-ae75-44d6-bb7a-21dbf1bf7fac",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "3049da13-8c10-4fa6-81a5-8200298527ab",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "fa683322-3b34-4fbc-b5fe-a1d1a721ee6d",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "662a5c22-4d91-421c-acdb-aa3733cedc81"
									}
								}
							],
							"id": "c46dca8d-53ea-45fe-b96a-d23bbfd19eb6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "2b9d23a8-fe78-46cd-9dc7-770fcea36c2a"
									}
								}
							],
							"id": "3c5fab94-ec1c-4f56-bd4c-db58cdc0135d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "46ad633c-19e8-4a59-83f7-42ef1e8e6b7f"
									}
								}
							],
							"id": "997023e7-c0ac-4a9a-bd4d-94bfa40f49ec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "fdeab58d-d8fa-4451-89ad-a128af82fbcf",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "83658876-61a0-4531-a674-ba6bc9bba384"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "c5faeeb2-1c06-4dbe-85ef-0c7c4aded1e1"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "cb4523db-e3b3-43f8-9864-a3d917790c14"
									}
								}
							],
							"id": "7abd190f-cbb5-464f-a23b-66f47f3cf98a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "374c70be-fd67-4dd9-8792-922a4992dde4"
									}
								}
							],
							"id": "0caa612e-e1ca-449b-b758-c80f5141f3c5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "cad1e4ed-6725-4b69-b3fd-302d1d0769bb"
									}
								}
							],
							"id": "ee047e1c-d7d7-4639-9573-2747abf02485",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "bf0e9e01-4a4a-4dbf-a28f-b547d2241e77",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "bd07fe5c-25ed-43bb-824d-9aad76ceee35"
									}
								}
							],
							"id": "4b864b32-963a-4c40-89d5-ff0e35abdb9c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "9fa6cc2a-6c44-4ee8-9bd8-378dc32655d4"
				}
			],
			"id": "c9e66201-93b9-4c1c-842f-75d61853b97b"
		},
		{
			"name": "Tests Copy 7",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5a5fadcc-5422-4a2b-ad81-f6fa1273eb95"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "52bae9f9-57ba-4300-a73b-86349261e50d"
											}
										}
									],
									"id": "29d49a6e-70e6-422b-8df4-f8c1c570643d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "268af2cc-a1fa-4889-80cc-09ac0a564477"
											}
										}
									],
									"id": "a78c75b0-af65-4402-9d5c-9aabccf0e57f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0f62e163-9433-4c71-a7d2-6b539e802eea"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "4dc265ed-28b6-48da-a074-6c4a180e66bc"
											}
										}
									],
									"id": "bac73e24-3818-440e-bd2c-0ed217e400a9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "d4b8f478-3ee8-4bd3-bdf5-aedf169f49b2"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c359a16a-fe42-43a4-ba16-3d4719d63e9d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "53c1f646-1176-461e-94f9-b8b861108c42"
											}
										}
									],
									"id": "5070da51-3843-4c72-a7b1-f63105589fdb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "30717be1-ccab-4410-a187-a15ca1f3d74e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "0d60354d-2b03-4840-9127-b2fa4b954bff"
											}
										}
									],
									"id": "83b6a15e-87a7-482d-9470-e40ae375b130",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b32dabaa-5c96-483e-87b8-b162acc69d45"
											}
										}
									],
									"id": "84593978-cf30-4709-96bc-517fab3d7854",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "16423973-3ed7-4cbc-95b5-d5b327ad0ebb"
											}
										}
									],
									"id": "563f74b3-320f-4614-82c5-fb38e78a6e9c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0eb78af2-a4a3-43ca-b211-01fcd59ff2f4"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "b66abdc1-f3ee-4659-a3e5-f76d6ca8cedc"
											}
										}
									],
									"id": "aa2c5d9f-172d-4615-81a7-f736ca7f60e7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "543815be-d9d7-440c-b64b-a410e7ee13e8"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "6e07b6e6-0c85-465e-9bb2-a55bdd3e823a"
											}
										}
									],
									"id": "116d0aed-932a-473d-8190-fd54deb6b43e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "b3869ed1-fa38-46b5-960e-0c299f4b176c"
						}
					],
					"id": "9a3a3708-48b2-4c9c-8e5e-247e5b463dd4",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "bb85c651-5a67-4795-9e3d-b584607c0ed5"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "1ba3cb00-e4b3-4b7f-9921-35612d25df8e"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "6bfdef02-5604-4a55-abf9-7ccc4f111dc6"
											}
										}
									],
									"id": "aa4fefbf-815b-4f11-87b6-b807f873c3b0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "6bcbf42e-93c4-4ae8-a3f0-b55197096bf4"
											}
										}
									],
									"id": "143b7ef9-2154-40f4-837b-ab919bfc9820",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "96dc5f87-23d7-48ec-a415-85d2ed92779d"
											}
										}
									],
									"id": "f5b05c4c-2aee-4ee9-ab05-d45584d0d23b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "38d11d54-6b2d-4df4-9e6a-6ff1024ce2f8"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "34d958da-e5c2-4740-8345-6cf7b35a91c2"
											}
										}
									],
									"id": "1cb3dc66-4a80-438b-93d4-797b92979364",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "46d1f2ab-6e4b-4a06-860b-99c2ec6bec33"
											}
										}
									],
									"id": "b0f54703-e5fd-4d1e-b93b-e01c793b4378",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "25d7592c-ebc8-44ba-9203-fe2a187a3fe1"
											}
										}
									],
									"id": "d9120be8-f5af-49a4-a71d-45e1791aff71",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "d8d03c45-f686-409e-8bc9-ae64ade2101e"
						}
					],
					"id": "3d0beb8a-3ead-4c56-bec1-e1caa69bbb69"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "7fe7dc75-3500-4528-ad1a-919df9d3b42c"
													}
												}
											],
											"id": "1e848b3e-0488-482c-8e0a-46d87e39186e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "9828c31a-d333-4892-94e4-e2f1325abcfe"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "7a57cfdb-be65-4abc-86e2-33c96508ec97"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "7231b63a-f3de-423f-b8c4-d0722016ee0a"
													}
												}
											],
											"id": "00629992-8b23-4a13-919d-640aecfdd006",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "f7728d7d-f9e6-4635-abe9-8fd351cbd797"
													}
												}
											],
											"id": "e06046b8-1634-4eac-8f7d-d70f4b17b272",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "613749fb-bde9-4088-860d-6b71818c6079"
													}
												}
											],
											"id": "82935ee4-7525-4eed-adff-9c1cf5639ace",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "a45b3fb9-99de-449c-b1ba-02b5f62a1229"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "236329b7-8395-49d3-9d1d-6556e9a3edde"
													}
												}
											],
											"id": "78927026-f0bd-4fe7-b6ee-ecf8f48eaf0a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "cda6a2ab-d18e-48a4-809d-2455b6292f4c"
													}
												}
											],
											"id": "ead30aa6-b394-4fed-a4fa-5015ed399e70",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "03a7f677-d5ca-4682-bc54-a32725bd50b6"
													}
												}
											],
											"id": "7e3b4306-bf9f-4b74-acc5-c23551942851",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "de5788be-39ba-4b38-98fb-3288234295a6"
													}
												}
											],
											"id": "fb0d99b6-f81a-4222-a117-d3c831aee436",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "b8d45e34-f35c-4131-a0c3-4fb53fd7e8e7"
													}
												}
											],
											"id": "eb19ba98-6565-4e65-92aa-ba21ac28d53c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "b6c04f18-5dcc-4b48-8894-9fe2c714d88d"
													}
												}
											],
											"id": "f91ba69a-0cc0-4622-9682-402782d83a6d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "53e1168f-9401-4730-a9cb-baa1ba618603"
								}
							],
							"id": "e00313a3-2bc9-47fa-82c3-c31833bd6352",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "7b9c3581-0348-41e6-841d-c070a4450b07"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "17b2a6e1-b106-4473-b7fc-e2a47b6b0a3e"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "37da4d81-d2fc-498b-b972-01189189100e"
													}
												}
											],
											"id": "de401726-7015-47a4-b8a8-7d73d0526d49",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "b7cba5c6-d03c-4ac1-a68a-117270df48ef",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "ac61dbfd-d4c0-465f-85a0-bdda3da09a3a"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "a2ce8d00-c7d4-44d5-9902-5b74bbfbf9e7"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1bbe3afd-06fd-45f5-98a8-2d584b150bc7"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "81fdb721-ca9b-4a51-aee9-f7192bb0f50b"
													}
												}
											],
											"id": "21f17d0d-f49e-4905-842a-c47a0f2bbefc",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "18007222-eead-4e62-bbd9-9673091a7e12"
													}
												}
											],
											"id": "f15e59e8-f364-44c7-93d2-e3e3f412b6f9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "46e955b6-09f3-4d76-9ce5-fff72d17e614"
													}
												}
											],
											"id": "a9d0a3c8-2f23-4f98-a896-cf0620177a81",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "750f7155-4100-4e75-8c77-d762eaed4928"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "9baca24b-1a9f-41d6-a282-a1a70c9b3433"
													}
												}
											],
											"id": "0cc264aa-b70e-44ea-81ff-5af350f07a69",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "8f204259-9e62-4655-8e75-12a9120dccd5"
													}
												}
											],
											"id": "83d84e92-665d-4bd6-bc6e-ee9bf3996722",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "12bf2781-9798-4875-a9f5-3eeaceb6f9be"
													}
												}
											],
											"id": "5ba65883-a8e2-4313-87a8-ce8d81ad4480",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "6e22ba87-fe63-467d-a821-f4b7c961ab31"
													}
												}
											],
											"id": "3366aaec-721a-4f21-8746-e379474354bb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "88b1f61d-bdec-424c-873d-e965348aec34"
													}
												}
											],
											"id": "631643c8-1e00-4d24-9164-46830a8c9848",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "a38d8a10-b3fb-4fc8-9362-74662ea548a2"
													}
												}
											],
											"id": "cbe7c1eb-db64-4fde-95c8-22e31b228990",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "4290a151-27bc-4c90-a791-e5c2a6954263"
								}
							],
							"id": "d2bb2daa-6180-4a7c-9962-f7cd0dc99217",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "e4bd3108-9bee-4bc1-8429-3f8ac4d9ba45"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "67dd289c-feaf-45c9-9e5c-ddf49e396d36"
									}
								}
							]
						}
					],
					"id": "1512d06f-0dd8-4142-a215-5de0e73e0e23",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "6bf4c47e-14bd-4cca-8ee7-fffbde17944c"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "7544705e-2027-4777-81aa-981ebadd6429"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "6b669f88-9ff9-4f33-9ebf-c9ee7edd2541",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "b3e05fdb-c64b-4722-bebf-12d229e7cad9"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e7911f72-f11a-418d-a4e7-ae2b7e2158f1"
											}
										}
									],
									"id": "e35d4bdb-75a4-44c0-97d3-92563cdb9594",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e6ff477f-cc64-4f28-ac8a-e313acf381cf"
											}
										}
									],
									"id": "d7deb1d3-15e9-4781-99c1-7932a0027801",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "42f02af5-8e01-46d2-905f-db91d9fc127b"
											}
										}
									],
									"id": "662be803-0140-4a9f-ab09-2a51dd96b37d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4998b02d-6904-425f-bc5d-2a9e3fe86e6c"
											}
										}
									],
									"id": "05573e32-fff9-47eb-88bd-d0a07ca93caa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "de30ae60-4d09-41d3-b7f3-a7c805369db1"
											}
										}
									],
									"id": "6458ec0a-e992-4db6-8419-6237807e4d19",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b6c58a73-2989-4d95-ac75-8b9f863867a7"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "bc6f30f3-ee0c-47c6-b8a1-721bb86006c5"
											}
										}
									],
									"id": "a39e0885-2943-4b14-b009-9d354a8f33e3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "db3626e6-47ee-4314-b19e-53611236fa75"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "80deb443-9ecd-4f43-9f94-4928c5f877cc"
											}
										}
									],
									"id": "18c50325-b366-42a0-815e-8bcfcecfd0d0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3035b994-35e7-4dc1-9b68-b444b9b13ff6"
											}
										}
									],
									"id": "662cfdd8-6b41-4cf4-8123-5560e44472d0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "297321a8-2c5d-4a84-b9f3-a1815d8746f9"
											}
										}
									],
									"id": "7af83a94-22c2-4289-ad15-abdf03dd14a9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "742dcbe2-dd35-49d3-91aa-166e5dd51d8a"
											}
										}
									],
									"id": "f32192df-5515-4a62-8a0c-0a2570c79e3d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "64b1b8eb-c58b-4dc3-bf3c-aab829b7c7c6"
											}
										}
									],
									"id": "a38a5efa-3cb9-470d-85f1-be4ddbd47853",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0157c25f-502b-42f7-9988-57844bb516bd"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "f56a1486-ec40-4d6f-b474-88377044ad0b"
											}
										}
									],
									"id": "e7ee5d68-5095-4534-81ef-8cc33be8d233",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2568ebd7-3b4b-43fd-a882-8d8b9a600aa8"
											}
										}
									],
									"id": "0cd25c3b-162d-4056-bd2e-8177070ca192",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "658f063f-5f1e-426e-b3f0-da773a423e98"
											}
										}
									],
									"id": "33a08f1a-c56a-42ac-9b3d-c59663d065d7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "fbcadd45-5bda-4d94-b078-14a69975ab6a"
											}
										}
									],
									"id": "6bca0624-1860-4d17-b09c-44514eebf751",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5f7e492c-b01e-4d4c-9f4f-be223834cb46"
											}
										}
									],
									"id": "2a0ef683-60d6-47ff-8776-faa286343a87",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "78397e49-8598-42b3-b9fa-e7410c753f97"
											}
										}
									],
									"id": "87a37ace-c573-4f45-aa8b-d850a615aa66",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2ccdde97-5392-4fef-93f9-f2000300ed01"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "61b27d7f-4f3a-46b6-8199-6a7faeeb5f77"
											}
										}
									],
									"id": "07ee3043-60e9-4836-b580-71fd0b267066",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "d0349290-ac18-4e94-8722-9614039cd785"
											}
										}
									],
									"id": "1e95c8e1-3c5f-4db0-be20-2d6110c9b605",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "4b8c86da-5026-4dd4-9686-35f66255cb4c"
											}
										}
									],
									"id": "2bbddbe9-7d60-4a06-b4a9-e966acd0dbe0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "12d399fc-567c-4238-91d0-337946235b83"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "1039034d-11fd-4499-8ae3-d52f3167bd6a"
											}
										}
									],
									"id": "36b4629b-4b07-47c5-8f22-99178b4dc082",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "67a2dc4f-3b55-4377-8edd-e660d189af8c"
						}
					],
					"id": "b41e4e1c-5a80-49c4-bea1-f2c85025a46e",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "fb1f6523-1646-40e4-91c8-e315e1bc8daa"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "f88d7146-bdd3-44b8-b81e-a09285c988c7"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "3fc9e64b-3975-41a0-b053-148c0c2eb885"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "add3db41-93eb-4e21-824d-c4927884652a"
									}
								}
							],
							"id": "784d416d-4e25-4e0d-af7f-093064907e99",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "bc623cb8-e389-40a5-9627-5e57b54c2f8c",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "4a1e68cd-df59-441c-ab2b-e5f2491dd8e6",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "0af42c95-f97b-413e-9a1b-60d5fcddbe7d",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "f9a81095-9842-4020-88d3-f5a767130d54"
									}
								}
							],
							"id": "44d6c22e-b653-4473-b577-5e204b80deda",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "e0c0144d-6382-43b4-a142-5dd63242bf95"
									}
								}
							],
							"id": "12119331-7609-4c3c-b826-7fd5e51f80c1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "b85b0a1e-95ef-42da-8158-bf0407288cb9"
									}
								}
							],
							"id": "c7f59b04-14c8-40ce-a6b8-16ad523c18e0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "4749c005-38a3-4047-83de-c7bc536992d8",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "09378892-abfb-42fd-9ca7-6bb8bc63108b"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "013f4275-6130-4430-bd8a-16cd052427b3"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "51b0c903-1391-4934-85a0-ed3a143a72b9"
									}
								}
							],
							"id": "3490a77c-58cd-4c2c-8e67-38181949998d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "a70c4e7c-9509-40c1-b980-967dfaed75a9"
									}
								}
							],
							"id": "594367e4-b402-4743-8bd3-4da340ef961c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "47102097-eda1-4c20-ac1f-1af77db4a8e8"
									}
								}
							],
							"id": "2e6c7687-852d-45f1-a3e7-f51a07770669",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "051e0077-c3cf-47e3-aebf-66ce8c3dd7a2",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "6ed0ac1a-c869-40af-bc77-59184b6f4804"
									}
								}
							],
							"id": "c1b14153-26b3-4e7f-9d33-2d5d762a5b1b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "038fd525-b027-4e59-934c-71be5458cded"
				}
			],
			"id": "41c0d4fe-8e4d-4aa9-aa20-1fa6394aed17"
		},
		{
			"name": "Tests Copy 8",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0aa34a5a-65a0-4622-904a-bace0003f544"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "f8d92101-2692-47f1-aa41-bc030a5908e0"
											}
										}
									],
									"id": "15a80e9d-3bcd-4a06-a03a-6e79c118a8bf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6580294a-ee1b-4a9f-a7f1-3d1eb6328f39"
											}
										}
									],
									"id": "4793b50a-6f32-4192-a4e3-3430104af927",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b10161a1-35dd-46ae-aca2-0580ec1adc7f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "c00cf842-954f-49d2-92f9-e17b05496b4d"
											}
										}
									],
									"id": "bd41627e-117b-4274-b277-69261852d8b9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "d7cf4da5-5a91-4aed-86ef-895ab0729f3a"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6b800fa5-7276-4e25-8dc7-b9f5aa7b2f72"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "937488f6-3574-4b64-a48e-d44654ec4ec5"
											}
										}
									],
									"id": "a9480a2d-9127-424b-9610-3c14b87e5cae",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a526c891-285b-41e7-a961-f3cd1d53bdc3"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "51e0f897-ba5a-48cc-a2d0-153b4f69bdff"
											}
										}
									],
									"id": "d4da0e58-e44b-4448-856e-4deaaa89aefc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "608a1d38-8214-4dc8-87da-7e09804fbddb"
											}
										}
									],
									"id": "5e4bb946-9c9b-4589-b6b6-28d19bd364cc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "bfb7b5f6-90be-45c8-a7b5-dc31a9fad9c2"
											}
										}
									],
									"id": "d441af5e-6d2d-4bcb-8ce9-ef1ba0cdc914",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ebf22f95-204a-4d17-ad08-e14627762da7"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "080cebf1-bbaf-406d-8e20-5f58a10b3d67"
											}
										}
									],
									"id": "02645b5e-3b47-433c-be14-cc408794b178",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "f8a3aaf3-cebb-4e94-a71b-e5ed93d847a0"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "b051d0a0-4a45-41c9-bef0-856144a3dab3"
											}
										}
									],
									"id": "7ff9d66f-3fae-4fff-94d4-010698b0dec6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "39ad1725-1f15-4dfb-828d-24d1904ae352"
						}
					],
					"id": "e0c2415e-ef3c-4dfd-919b-ef76c79db223",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "5304bab4-1361-465e-a348-4de7fd26da47"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "3836b4bd-6c55-44e7-8718-3d46660c6d43"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "c8429f81-4d19-4467-aa80-6fbcad606bbb"
											}
										}
									],
									"id": "117cdd2e-a26a-4d03-a53d-aa4d48677f2e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "ff1e2de5-5505-4098-9b1a-235fa88bda1f"
											}
										}
									],
									"id": "c7adaccd-5452-4b94-b094-1a27db26fb25",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "0493926b-f040-4dbe-a9bb-66d2585f8911"
											}
										}
									],
									"id": "7cf98448-2da1-4b87-9a1c-b0c8fb7c50fb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "b99bd64a-b5f5-4fc8-9a44-38b4830893ab"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "933f70e0-7a59-4c5c-bdb6-21e928aab4a3"
											}
										}
									],
									"id": "87f3a11d-0d74-40bb-a40c-564049cbd687",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "745189ea-ca41-4d49-8883-f10f49075651"
											}
										}
									],
									"id": "838c509a-56a5-4cdd-b893-3c73207c5a03",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "70864bd7-4933-4a3e-88fb-f7049c30e996"
											}
										}
									],
									"id": "3cfac09d-501d-4e48-a113-b579b7ac20d2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "88b57393-9cea-44c9-ae57-87dab95e5494"
						}
					],
					"id": "32bb7e58-3c8a-4cda-affd-846ae9438403"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "5231f217-e46a-4172-9eb5-df8c47642f94"
													}
												}
											],
											"id": "334a037d-e14a-4ba5-8b42-bfae65211b0e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "c3ceb977-d02e-4e90-b26c-3d266e6cfc4a"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "f63ef942-34d5-4dcb-a023-513017ec6a7a"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "f1a440e0-0562-4f4f-8b66-0e573a5ca645"
													}
												}
											],
											"id": "c964fe7e-06b6-40a3-8c29-dc90cb7e2d6b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "27feba22-c007-4e1d-abe6-2b136916fd95"
													}
												}
											],
											"id": "8fe5aa62-5e2d-4e79-bde4-09c7ca4eff03",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "af2d375b-0d81-42ee-be43-ba949dded518"
													}
												}
											],
											"id": "f2600c03-d05d-437e-a70d-33d925ef1f06",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "1f63d271-4253-4da8-80ab-984e2e24d2fb"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "a27b0d52-5f19-4466-b4ca-5883a636fd84"
													}
												}
											],
											"id": "368e7f42-0338-4540-a3a5-66564adfcbd4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "e7b3f95f-237a-4224-a452-b83f85a5b168"
													}
												}
											],
											"id": "6193c7ee-2305-49e8-9d01-1092735b7b4a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "af4b311a-ce32-4263-acd8-37a8ec17f9b9"
													}
												}
											],
											"id": "058bd732-7fed-4f7d-9657-69efcb159551",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "0d6f085e-a99d-4a4b-89dd-d086d37f7db5"
													}
												}
											],
											"id": "80db84bd-1739-483f-87c8-d2767a5597ee",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "f7ec8e43-158e-4083-9e31-50cd7a1f2e89"
													}
												}
											],
											"id": "eba1aecd-8049-4ac9-9f3e-f1fea227f06f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "bafb92a4-b695-4279-a367-0fbff4b2ba9d"
													}
												}
											],
											"id": "8a228ff2-d078-4c52-ada4-f9c2e1110589",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "47e7c71d-3393-4483-a888-127222b14b90"
								}
							],
							"id": "68d338d9-ecef-4d41-b149-93e1931867ed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "35ddc2fe-e39c-40a6-a023-d3b5d9f5aa9e"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "8818f473-8205-4e37-ad47-277c89ad0d80"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "a3e53ef7-2125-499b-9768-f60af55fcc51"
													}
												}
											],
											"id": "25451ba6-927a-4c1e-8171-d0b4e98bc5d4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "1a6dbdc2-d73c-4ea2-98fb-d60b7f4eed84",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "3d8087bd-b303-495f-86b2-21e9a403eec1"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "7feaf4e7-25e2-4ffb-9f37-edbae518459b"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "7f1462bf-8c5d-4b34-b5bc-becbb7340197"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "e3942d3f-2566-4dab-9580-0813fc17f6d6"
													}
												}
											],
											"id": "9fa1f366-4659-4870-94d7-3e4e4aaf6d26",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "4b524dae-9061-4a8f-9e93-b3e065f21dbd"
													}
												}
											],
											"id": "4d636eda-9a65-41aa-8200-83e1d78c70a4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "ccddfaf0-e94d-4051-b224-ffc1ef432919"
													}
												}
											],
											"id": "c18e03c6-1e50-4a29-a0aa-7a61f1c1bc85",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "8b1cb160-b55f-4a4f-9b58-c1a9490cca27"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "19cc6585-e002-410c-bb76-88cfcd62beae"
													}
												}
											],
											"id": "af856b6b-67fc-47d5-bcde-7c1fbc3fc9b7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "965a5dec-ba33-4191-aef2-96a1fcf0ec5e"
													}
												}
											],
											"id": "13dc18f3-9b69-4b7c-8884-0890cad69600",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "79c426c1-14a1-43aa-ab96-613759db4f7b"
													}
												}
											],
											"id": "d76c2bde-eee1-4771-bd8c-088c22063541",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "9e7d0914-9a49-466e-9a0f-87d8d9dd55c7"
													}
												}
											],
											"id": "6fe19338-3339-4926-89c9-6ceb7312dd19",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "1d614000-faac-481e-b2fa-b108c6b51c54"
													}
												}
											],
											"id": "16cd59d4-d0f3-4b1d-8617-0e4c8c9a2fe4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "bb4564ce-5b0c-47eb-bb0a-19dce3b11bf9"
													}
												}
											],
											"id": "cecdc3b9-f82b-48a1-8c56-68e885e433f8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "2a42171e-bed4-4551-9681-4d78dc11f962"
								}
							],
							"id": "d347c233-ab53-4dbf-b518-29c3b76a135a",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "0f2a1de6-774a-437c-9c5b-dbfc6faed05f"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "7c350be7-1193-4007-8819-142d4fd3eeab"
									}
								}
							]
						}
					],
					"id": "b4ad9915-6c10-4b09-8e6d-ca97666bf7c1",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "58e512cb-e947-4476-8889-8909ad57c222"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "095178f1-3445-4331-a3e0-d522769f5f1b"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "4d3f6310-6ba3-4fd1-a9e3-f87b3cc3533e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "d9412a58-636e-46d4-9461-6571d029b427"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0342fac4-2eff-4fc5-897e-cd893c49aa11"
											}
										}
									],
									"id": "5f9ec738-1994-4f2c-b521-af55d7cbbe60",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8218fa91-c50d-4dff-9386-4a03240c34a5"
											}
										}
									],
									"id": "b568084a-309f-4472-b9c5-68e2986298f3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "3729b174-94e5-4dab-8a15-993ebab8b02e"
											}
										}
									],
									"id": "f13d3dac-554f-441e-9e58-267c3500d854",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "39f6211d-c1e6-474f-9a8b-82b64e87c175"
											}
										}
									],
									"id": "2b056d4f-8c60-4999-82a0-ae223cdd31a3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "89fd3626-6a7f-46ed-8fb8-1438433f1048"
											}
										}
									],
									"id": "f4f750fa-0cb5-4aea-b686-a9ca5578721f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b721d7ce-1e05-4091-a365-71a6c685ee14"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "fc16cac8-3fa0-4444-a15f-3d823a41c5c5"
											}
										}
									],
									"id": "df32ebd7-7ea7-46ea-9142-230ba60dfce3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "2ebbbdec-a66b-4263-bb05-3bbc29939e10"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "968b2429-f408-4bc0-a6a9-62017acb4c6c"
											}
										}
									],
									"id": "7a25cd85-021c-4756-9616-3a803f0730c9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "58c49aa0-9039-4c8e-b5fe-c48e71b6bb73"
											}
										}
									],
									"id": "fde2c53d-cb1c-4272-b598-980be9279ca3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "6bb5482b-db66-4fb4-a4eb-113caf7e16ae"
											}
										}
									],
									"id": "8be3674d-441d-4186-a36f-4ffbb51f84e4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cb73f2ed-0fcf-4ac3-b384-bb860b7581a2"
											}
										}
									],
									"id": "0824fd02-d9d5-4ccf-a8a0-be494c929d96",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "a04230de-f4f3-481c-87fc-9376c465cc7f"
											}
										}
									],
									"id": "a716c747-267c-4a17-9ed7-2aa1b78f6793",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5b33c0ba-e2cd-4690-9913-9e52382afa87"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "eec0f87e-f10d-4483-bd28-171273005af5"
											}
										}
									],
									"id": "571b85eb-33b7-4460-ad1c-1667d4b7140d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2b556bd2-2c00-4bdb-a4f7-ec9b873eef66"
											}
										}
									],
									"id": "fa8c9e7d-9ccd-4f3e-a88f-a6886c137b70",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "66d5d1ca-e2db-4d95-9326-337861b58f0f"
											}
										}
									],
									"id": "c39a209c-5d99-42ad-9677-919e17a4a534",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "1640e1ab-c6ed-4954-b75b-504d5afacf8c"
											}
										}
									],
									"id": "7e7cd486-c4cb-4b74-bd90-fb839de25e2d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8499efc1-a0e5-48af-bd45-5a455d9e3bf3"
											}
										}
									],
									"id": "17554724-2ef6-4ec9-b60b-66197f7fe527",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "75b8e33f-1f0c-435c-84e7-e50075d5c1b7"
											}
										}
									],
									"id": "e54415c6-3cc4-4940-988d-5217462d5854",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "af92a675-855d-400a-b568-5cbd37e09a61"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "e491fdf1-ee5c-4317-ae64-05ee7c2e18b2"
											}
										}
									],
									"id": "013e068d-0027-4604-be36-0f6985f260c6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "9116046c-8f87-4ef9-9b73-b8f446f4f91f"
											}
										}
									],
									"id": "dce63f63-2938-4890-8026-cea2bbc9cbdb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "5f583daa-ee21-431f-bad8-a5271b7508c6"
											}
										}
									],
									"id": "771c5421-33cc-40bf-84d8-d100fc5ef216",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "81c0491e-5477-40b5-af72-14ac736d91fe"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "3da97abf-31b2-4449-8bbc-f2f19cedc8ef"
											}
										}
									],
									"id": "4c94d3f2-a064-4bfc-88e2-c18a1b6d7298",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "71255387-91fa-49bf-a4da-93f1c739fd70"
						}
					],
					"id": "18b85bac-e629-4416-bc5e-0a4571ac0b81",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "182abf68-3e91-41d7-9e4d-46fed5a71bc8"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "51bb0c94-f5e9-4725-a53f-80dbcadd5e60"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "f8157034-4331-4e8b-a092-4be9c7cdbbbe"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "2091d654-c269-4af9-9b1d-e58f19f0c1c5"
									}
								}
							],
							"id": "ae215646-1e65-4798-b2cd-2f909eb62169",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "61bf35f9-a36d-4d97-9e05-3298fbfa428b",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "f1f5c18f-2d9c-4e9d-9ce7-05e0528f3164",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "a9b95f6c-efb6-42b7-9f76-2b480173f195",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "5d057b2a-30ee-4541-aa06-8eeb55bbb9b2"
									}
								}
							],
							"id": "9ed65ca3-a73f-43e9-900f-9e8865120611",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "c9aae83c-e3e3-4261-a610-da4c0599a7e3"
									}
								}
							],
							"id": "bcaa6951-73b1-40b9-a813-93c9b7dce757",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "b71b2685-b6c3-4f27-8d5b-3d91cb41f38c"
									}
								}
							],
							"id": "4a47bc35-1b08-4500-b338-2c64153b6f46",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "03fc5f57-7201-4ce5-bf67-4f15200d79d7",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "b9ae2153-85f7-49ac-9f0d-eca6cc7e2daf"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "e18f5653-62f0-4013-a1e0-7ea09ffff5a3"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "67db2f2f-e950-44de-8905-031aa7a66d7e"
									}
								}
							],
							"id": "3bcfa106-532a-48e8-b609-03f7a9873a60",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "7effe8e1-1e26-4d13-ad86-dc5327be5741"
									}
								}
							],
							"id": "05f4fe5f-ef90-4942-a8f9-1e2652a14273",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "7cd890ba-fd28-43f5-b0d6-2a7836353b69"
									}
								}
							],
							"id": "9d2a8f47-c7f7-44eb-a47a-bb9073b0a10c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "be479028-e0cd-404a-a9e5-dc6f78cabbf0",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "74cfaf87-b692-493d-bdfe-377f92c8d2c7"
									}
								}
							],
							"id": "d25e4b0a-0482-4454-8126-3911ac9725f6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "2b7ce082-f876-4f6d-ac5c-2570b609f5c5"
				}
			],
			"id": "45440f78-fd96-4fb0-8acc-1548667cf5d6"
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "baeea7b4-1714-48b3-acf1-d38574196030"
							}
						}
					],
					"id": "605a51be-04c7-45b3-94c1-ea72f6b8e64c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "a9f01c1e-eb6c-4bbd-aa1e-e2c3fd9cb864"
							}
						}
					],
					"id": "43843619-5d89-440c-9925-b270867134ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "0981bf94-b17a-407d-9437-d136d8bad8ed",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "ca038ff0-1c02-4488-bbca-1043bbaa6112"
							}
						}
					],
					"id": "42be65d3-915a-4c08-8b22-9d90f172fc5a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "1dcc09bd-ba13-4e9c-82ef-ff75c11067a7",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "9b9269e7-5f32-4458-a7ff-c9347590a5c2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "6a507420-705a-4d64-bcf0-9abe1d492c77"
							}
						}
					],
					"id": "feac2257-53b7-41ba-aef4-4c9560777fd5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "6b25d92f-bf02-4029-b9a3-419d3431a224"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "7158f753-3aca-4896-8bc4-1f2ea2041ba0"
							}
						}
					],
					"id": "b564cd8b-d655-4c82-abb8-2cb06c19cdbc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "0eeab2e8-9c68-42bb-bb8b-70696fcf5136"
							}
						}
					],
					"id": "bf88bdde-178e-4bd8-815e-aa60471cfc24",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "7026d63d-9879-4962-af2b-a5e77b1230f3",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "478f1842-5af5-441a-a6b5-98ee2b6bad42"
							}
						}
					],
					"id": "2319324a-8fba-476f-9da9-a0f6af84b2de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "c648809c-8a7b-43fd-8f00-73e1a950d1e0",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "aa75a33a-eaf1-460f-a053-85f3ed8ca796"
							}
						}
					],
					"id": "3690db47-d582-4371-a320-e3382ba73435",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "5cd74774-0616-4926-9edd-a4e901cbce2d"
							}
						}
					],
					"id": "088311db-1243-4355-ac03-a64e9bd84122",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "f25dca60-0664-4d7b-8724-c54a377e5295",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "cc02072f-b169-469e-85bd-4725a6a6e0fb"
							}
						}
					],
					"id": "97b849e3-0a6d-4e6b-bf9a-d57bcfc64ae6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "154bccde-2dd0-4602-8651-f18b468d300d",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "f840eca3-3513-4206-9719-47e59ed3ae1b",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "dc1b9ffd-1cf4-4982-844c-464a573c68c5"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "5089e224-ae15-4b55-8304-03b1f73d7675"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f0c41667-ab71-4acb-b890-d4c16a26072c"
							}
						}
					],
					"id": "7213e2c5-a991-41e3-a877-4bf12e02a10d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "e4dc5fde-ba50-4544-9fd5-f103862ee184"
							}
						}
					],
					"id": "a1762ee2-feda-4158-9bfa-253c3f545298",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "e41a0e2d-d33e-4475-9155-3737bed9fba0",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "96cc563b-811e-4d2b-aea4-d25387e5b567"
							}
						}
					],
					"id": "af88301d-3c92-4c30-9d6a-641594415025",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "f4fcdf0f-9a28-431a-b96d-dbeff074219f",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "aae35550-e548-4aa4-8e31-657b79036138"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "4d2b9d2d-2e89-44e6-b5ff-df6ae163bc58"
							}
						}
					],
					"id": "32e60ec4-ea4b-4e9e-8e08-b55b1b6133c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "91c7def4-9adc-422d-93c0-3e8282174d0e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "8d03609e-70cf-438c-8bd5-d1b3fe1a1eb9"
							}
						}
					],
					"id": "d5eb9e3b-9547-46e2-84a3-6e7b3dc30467",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "3689425b-d0b0-48cc-81d7-4057c0386d41"
							}
						}
					],
					"id": "5f2eee15-54f6-4874-90d1-63efb835225d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "af6df228-0bfd-4769-8566-b058739a4912",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "30bdc7af-ba8e-4fb6-96cd-b677cd21588b"
							}
						}
					],
					"id": "24bdb8ea-6bd6-47d0-82f5-6563dd2688d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "23a12d35-cb80-4a38-9770-4d0a539077d5",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "58652a50-9213-4cd2-b892-56de2717594a"
							}
						}
					],
					"id": "d6da97c3-b5eb-422a-a1a8-9eb60d894ae5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "fee975af-22be-46ac-86e5-37d6d8e804c7"
							}
						}
					],
					"id": "4b7985a7-60e7-430a-afe8-828c9775547d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "6b0e43a8-eab6-49f6-bfc2-d0f04f44a104",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "90d86e2e-6e14-435b-9554-f1fddc420010"
							}
						}
					],
					"id": "849c5a88-6b65-4f3d-8e66-89bb0335e737",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "4b0fe967-3eb7-4312-b6bc-60ee752617d8",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "af46bca4-5a90-4df7-a4da-7857904accac",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "be1ff4c3-ba6a-422e-8e7a-89fc3e3e4499"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "8eaec2dc-7897-414f-87e7-4c9c0ce74fc3"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 2",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c1858b70-e1e3-447d-b2c4-5b407f92c5fd"
							}
						}
					],
					"id": "7dee7fec-c61d-4b04-b5d7-1ad443aa598b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "f307ead5-1baa-4515-901f-ccbf42a45934"
							}
						}
					],
					"id": "7d3045a1-9e27-4f8f-93ab-3ce1a472b1ad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "4373f1a3-2bad-44b1-b61a-8e1f4081d751",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "911c9af4-621b-4ed7-8456-a584d4ee1f4a"
							}
						}
					],
					"id": "529cab67-7d45-4e01-97e4-db8702738ae7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "8c4217b7-ac70-4d8d-b748-55f95b1dc2bc",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "c8687eb0-0e6b-4cf3-a443-15188a6aa02e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "bddc4071-5851-40ca-b51a-8951101c5823"
							}
						}
					],
					"id": "8ab4b8b7-1dd5-4e4e-a5aa-27b88e9741fa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "71941c05-8ab2-4345-81dc-e6d0b9625b90"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "7465f85a-6fc6-4755-a786-c3915f43946d"
							}
						}
					],
					"id": "72efd3dc-5aa4-4adc-8d79-f40d72ab5d9b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "285f55ad-8969-45e4-a17c-9aeac003580a"
							}
						}
					],
					"id": "086c7ac4-4acb-49f3-9087-5c9c64d10451",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "415b92b3-d3c6-463a-812c-1ee2ff32c9fe",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "28f7a0fd-1719-4322-956c-36ea8d9e612c"
							}
						}
					],
					"id": "8867b6f9-2bac-4ae3-a4f5-eddf5bfb7529",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "9776f28d-9d8f-466c-82ec-653259339765",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "09f6d292-b21a-49a2-bdb6-04330e758d20"
							}
						}
					],
					"id": "bea845f6-0f88-404c-8c7f-383bd64fb8c0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "b6888ebd-ebbe-490c-a7bb-88323f96abad"
							}
						}
					],
					"id": "ce854f4a-425a-4cff-b909-e92d67cbe5d4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "2f051060-ec75-4d56-ae2a-a7ec16cbcbfe",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "9941a95e-14a7-415b-b93a-01cac4193196"
							}
						}
					],
					"id": "aa4472d8-52d2-4ab6-9bac-19ab1edfd406",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "fe38ecb5-845c-43f2-b37f-1cb9732bb6fc",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "0e350e74-574f-4abb-9df9-5ffdfb063a02",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "d8ede6b3-770c-4949-9b9e-000c8ac00431"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "ad88190f-eb07-4e0a-9222-5d8a1dead7d7"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 3",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b725dc2e-78e6-48bc-820d-d6d70540a0e5"
							}
						}
					],
					"id": "8e209322-11fc-458c-b662-e52c4bd06d92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "ad32d493-9cf6-4482-bda3-f5fa4ac9753f"
							}
						}
					],
					"id": "6c70e50b-5fea-43af-8b4f-e2aad35024ea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "43167eaa-65f9-4ccb-bff7-ed5988263351",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "d1d17725-e80b-40b8-a0dd-f7508cf70549"
							}
						}
					],
					"id": "8b7490f6-160a-44df-a4c9-b58488631ea4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "84e9f1bc-ded5-4048-a2d1-35f33622ddf9",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "1a9580d4-04aa-42eb-b58d-0290ac97f70b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "8c739f38-5bbe-426e-9ff5-4de17754f65b"
							}
						}
					],
					"id": "36a661c3-7431-41df-915b-2feb3ee67fcb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "e0580a01-11a9-4642-9a57-28b160e95408"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "da6e1000-0614-4241-9201-f99ddba84853"
							}
						}
					],
					"id": "84bf8a07-63aa-4e16-aba7-caacacc32c16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "af4690de-2158-4af5-a099-cda3cd5a6510"
							}
						}
					],
					"id": "be789468-4001-4215-bf33-073d745034a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "c5d6f22c-08cd-4b6a-a2c6-b7f1b669fc51",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "905d88b3-7a22-4bfc-8a0a-97cad5b5d046"
							}
						}
					],
					"id": "ccc854b9-5c23-47fd-a1f7-50b928f4dc95",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "8951e70c-250a-4ff1-a549-539712775a55",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "84adacee-807f-442c-b145-6cf00d0c8fad"
							}
						}
					],
					"id": "d8772f26-b656-4976-aab7-bed7bd90fc6c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "b82a116a-b534-4f2e-837c-f92ee375edc9"
							}
						}
					],
					"id": "fb7d33ce-710a-4078-b599-ab3510df1ebc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "8908773a-ddbd-4bd2-8db3-82657f89f8cb",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "ad193d31-d919-4961-96ff-acca5818e6d7"
							}
						}
					],
					"id": "9287119a-23f5-498f-9e74-3948de1503f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "daa8bb27-34e9-4098-877b-8edb02733be0",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "ea43d879-dbc5-43d5-9a8e-47eeea2316a1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "c2201dd9-215a-4948-93dd-0d7e767922b5"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "49395ddc-6943-4a50-aa00-d2867e0b8d55"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 4",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0928361f-d489-437b-a85b-e97d396e1712"
							}
						}
					],
					"id": "eff1589c-2311-4106-beec-fa2e17b5c588",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "2baf18f1-f0b9-473f-92a5-175a5f343fa5"
							}
						}
					],
					"id": "0d2b6663-edef-460d-ab3c-aca6c1a3722c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "0a6cf6d3-f0bf-4257-b8c2-50a962d9ffeb",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "c35f2025-ff53-47a8-8b10-725294c85019"
							}
						}
					],
					"id": "e0e6098c-7f30-4bad-8cfe-1c5c7fc005bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "5d91aec6-7239-43db-b82b-882a428437d4",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "bdd2a721-4f93-4425-9d3b-9b2b2827d99d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "ba81830d-0727-41f6-a5ad-98d964ee459d"
							}
						}
					],
					"id": "c469afea-8e58-4a56-b0d5-8feea10c9dca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "c5ed1c0b-d8ed-49b4-a35b-562329f3ec58"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "541101d4-7fde-4bd3-bfd0-4a0c653a984d"
							}
						}
					],
					"id": "1cdd0398-e522-486c-a111-22775abbbbc6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "822d698a-3cfa-4f7d-9705-fe8414fbefaf"
							}
						}
					],
					"id": "b5caaeaa-46d9-4381-858f-bfc045912d1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "c9ee335e-9406-488f-99c5-436c68d2769c",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "c2e5e038-42cf-43cb-a80f-5cefefcad304"
							}
						}
					],
					"id": "88914456-3a46-4500-9490-a266a8d0a9d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "ae1d0714-bc0e-4abb-b9a8-7ffbbe707e23",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "76d7d52f-566b-4d78-a0e7-233c7af2ec3e"
							}
						}
					],
					"id": "069c4181-dcac-4883-839b-1789d35ba87e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "617127fc-72d2-494d-a3fa-7fb9996b4616"
							}
						}
					],
					"id": "d6ca435f-457b-406e-8abe-4a42acde1b41",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "dfe88be8-1511-44b2-a027-88155d17177d",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "a58eac08-7fe0-4096-9990-4cb814969152"
							}
						}
					],
					"id": "aca38141-3c7c-4bb5-b83c-a896a487630f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "141baae7-80ed-4989-a6cf-9707b3e0fe8f",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "4e812b24-3a66-4381-8b1d-10b01299d6fd",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "0d1d9c81-6665-4722-85ed-96c82c0ef4ac"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "5193d8a9-d631-4062-b13f-094d28b75ac5"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 5",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "faafe9ae-b43c-439a-8111-42c57fa4c2e0"
							}
						}
					],
					"id": "643acfda-8f69-4b8d-bcf4-f67761685361",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "476c1dcb-8980-4320-a5d8-4147a38e8f5f"
							}
						}
					],
					"id": "7dba0376-9627-4745-8dbb-78ab300c29c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "30fb9ad0-9103-47d5-8372-cb19e9d82396",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "a62c2b69-e029-4a2f-99c8-66231b4ac26f"
							}
						}
					],
					"id": "09d92dac-33cf-47f7-a973-62c628f4f885",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "b827f8a9-3b25-4b25-8165-79cf93856b5d",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "7f93bed7-ea80-45b4-81d6-d5adb9f28bd1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "479be311-d2ca-415c-b9f9-f4f18299a391"
							}
						}
					],
					"id": "d7e89421-a335-4c18-b641-d9dbd4e9774e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "428b4923-ec04-4060-a41f-d9e9c34f65bd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "e76493a1-3b89-4ca9-ae3d-856fc6bf229b"
							}
						}
					],
					"id": "b7ab86fe-de0c-4f2f-930f-84e024c49137",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "33e8276f-d958-47a4-84b5-bf0f273a1a1c"
							}
						}
					],
					"id": "4f0486c0-ff84-4599-ba6b-83793bea051e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "44ea89c9-316b-4d15-9e18-fba7865680e0",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "c6d8822c-f62c-4a78-9712-88ec5c951311"
							}
						}
					],
					"id": "bc42e963-69a5-4b91-85ff-619bf3a209dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "2003be60-f05c-4dc0-8700-b3f8d9574992",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "0d2be465-fada-4e9e-b7d9-1a86494560fe"
							}
						}
					],
					"id": "3536f963-b706-41b3-a926-d84c8f77051d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "f86b46c3-8fea-4863-a342-0d4572394717"
							}
						}
					],
					"id": "95055e7e-a8d9-4c62-a59c-a5358ca30e29",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "a5772e0f-8b54-4173-8ca7-2decc2fa7279",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "6634d1b8-f8aa-466c-8960-5768244cd5ca"
							}
						}
					],
					"id": "1621b8f8-cc00-47f2-9f98-9b37c974b163",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "b37425ee-d5e7-4117-8906-71e61d6632b5",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "4a5591c7-638f-4f4e-b5d6-6dce2e80f5a6",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "ba9abdbc-dcb4-4a9e-89ba-a76751593e10"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "946166bb-0a7e-4889-97c6-a9e4e859a6e9"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 6",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c01b6595-9e6d-446d-83a8-97d0c3a37595"
							}
						}
					],
					"id": "13eb20c5-24f9-47dd-96fd-17674a2855fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "a02f3894-45fd-4276-9d88-18c4d93e7878"
							}
						}
					],
					"id": "68a94e31-b605-45a8-a3b3-2ea1cf5ed059",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "7f62ddb2-ed61-452d-8099-c7fd70d8c18e",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "ccfb2aef-74c5-48e7-964a-29b092a03948"
							}
						}
					],
					"id": "28ab747c-f09f-46f5-93a9-8706725763df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "338ba300-0d92-49cc-b969-9d40e1abb901",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "a8efb3a7-75d8-4d55-a8f9-03d894a35a15"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "57aaf88a-3cb1-4ba7-9516-3b341dd3a0e6"
							}
						}
					],
					"id": "1bfc7a70-8f01-4825-9024-0d679e6ea6e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "48ec3137-f85f-401b-9458-f4dab19fb389"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "176ed755-3b82-4d44-9260-520caf13e190"
							}
						}
					],
					"id": "8c755397-2769-4146-a7f1-474fa60d3044",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "f711ac9e-5ed9-4ba4-9670-ede306539027"
							}
						}
					],
					"id": "d54cb520-79b6-4a1c-9fda-77aee84dcc91",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "665dad95-e88a-4f35-979d-8694d7c40e6d",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "7ad0639a-8465-4752-99ca-8f3f75c4d92c"
							}
						}
					],
					"id": "a6e8b4ea-dcad-45e0-adc9-87390c696a22",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "caba4d6f-3ced-4d3b-a6f5-b9e6b476f2cb",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "322d0db2-9728-436a-bafb-3c6b860de935"
							}
						}
					],
					"id": "c4cb562e-b7c8-4512-ad14-61afce8b8c7a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "7d91d6dc-ce9a-4d1b-ac0d-f66124b1aa54"
							}
						}
					],
					"id": "148a2c59-1bf7-4f2a-9a43-6bd7fb85cebd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "5b761f59-8941-409f-82b0-e6fa8874015d",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "9c198a57-7c1a-4202-a2da-150e56814643"
							}
						}
					],
					"id": "f7a2f1bc-a641-4c9e-8747-fdb484b10b67",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "48154de4-7369-45f0-86bf-5deac0006997",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "550604ff-70b7-452e-b510-5d8c71ba4dc0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "46011ff7-d42a-46d9-bb62-032d4a366d66"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "a079057d-1a0a-4e29-9379-fc31ab77e67d"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 7",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "195e725b-a412-46e9-a7f7-08b97c5109b2"
							}
						}
					],
					"id": "a278037f-edba-408c-80d0-25d455583fb9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "cdf6b8f0-a360-4043-8d19-7bccf2197962"
							}
						}
					],
					"id": "0613c1d6-49f7-4531-ad45-e6fb25b3c542",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "0c7b7d8f-6092-4c13-8df2-cf291b05ee1a",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "c43dfd91-2ce8-4aea-8a1b-5a87cc981dae"
							}
						}
					],
					"id": "979a3973-745a-4871-a3e4-083f90bbafe9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "4aa9e449-8f71-45c5-927e-a70b64f3291f",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "70b6cff9-9501-4d1c-9718-4057e15eef63"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "2f33250f-e848-42a9-856f-8b28c3b19d13"
							}
						}
					],
					"id": "80f989f0-feb0-42ac-9a2e-480ca7718b0e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "6bc4d388-5721-4455-b75b-ec669ac5a99f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "55e764e5-2865-4cd8-8388-b1a9db607f9b"
							}
						}
					],
					"id": "269d84c0-c392-496c-bdbf-1b419d1058c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "472910d8-e879-4667-ab59-9c9520c0b7e8"
							}
						}
					],
					"id": "891b3baf-6df4-41fe-b8fc-18f413836ddd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "a40717f3-932e-4bda-923f-c31c5323c120",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "105628e1-9dd1-491f-a2de-5f1151f3120f"
							}
						}
					],
					"id": "8db8a94d-1312-4d64-9009-70d266d984b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "faa851a9-6251-45d1-993d-54a7788655bc",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "f2389ea9-7ed1-438b-b7df-a6b83e537c14"
							}
						}
					],
					"id": "3d107f9d-1f12-4387-9295-ffe9b06f2860",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "3a240f32-c8f6-4c77-847f-128baef35b97"
							}
						}
					],
					"id": "6e894943-cbd8-4d08-a819-36dd65e42fd8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "a91f0da1-c689-4990-bcda-96f79e6a47c3",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "8f626b82-3762-4f00-8263-0ae7792a6577"
							}
						}
					],
					"id": "fe8afd87-fcc2-4575-a36f-afcbfcc177d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "e01c7a23-c90c-4de9-935c-0217909dd0f8",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "b6f3f9da-3977-4e0b-a142-2b4067619dd1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "73a43c7b-2cc0-40f5-acf5-ddf92c2df4c1"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "50f84652-0b4c-47c3-a12d-34c908e2e578"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 8",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e03b214b-9975-4518-a3bf-956c6f92eef6"
							}
						}
					],
					"id": "3bd63c40-c7f7-481b-b8c1-2a33bcc9673f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "0ff478a4-7d16-4672-bb74-e8ae422c2d67"
							}
						}
					],
					"id": "4e80214a-2e3a-4412-a0e3-b53c29450fa1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "612ac9ba-c12c-44a8-96ae-bfd4a12ab1bb",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "693e0478-79c3-4fcf-98da-429ec00f006f"
							}
						}
					],
					"id": "07e4aaa0-9d80-40ed-acde-9d53cf3ed5a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "41bb4802-b73a-4648-a170-e875ee814288",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "813d74f1-82cf-4044-aa10-a590c4a33d3b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "0ffbf9da-bafd-487b-a49c-67b325bb35b5"
							}
						}
					],
					"id": "dc1af113-5eed-46fd-8e24-e30c5fcc24f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "46443b0e-5939-4786-bf51-8ac8672b1f3d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "d05108d3-b544-464c-9ad8-6c4c108a400e"
							}
						}
					],
					"id": "42ae7ea7-bfed-4c5c-b278-33f7075e890a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "8db9fe9f-762f-4bcd-9ffa-72c5fb68a403"
							}
						}
					],
					"id": "dd3d892d-f009-4027-9184-f4c6348a15ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "836436f3-cff4-42ad-8e8e-f9e49803173c",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "e880f0b8-d1f6-4442-89b2-59096bcc9fb4"
							}
						}
					],
					"id": "05c3a238-65d6-41d7-8b09-fe2681e007a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "f7d02ff8-f163-40d9-ad6b-5578a21acfda",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "34a2643c-73e4-42c4-a175-beeb9404a5d9"
							}
						}
					],
					"id": "4a889100-260c-4275-9866-623f988804ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "9f0e0b3d-9356-4779-88d8-14368aa05c2d"
							}
						}
					],
					"id": "6f3d1b82-4c5e-456d-93fd-24b69a97c037",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "157d9ff2-a47b-4a19-a311-7e4ccb83dc3c",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "296f2e99-8c41-4456-9d1b-d94e988e76c3"
							}
						}
					],
					"id": "0fb3c023-13e7-46ed-b668-97e5241628ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "c2c10145-aebd-4e0c-a5f1-c5b759255a96",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "413bcb7d-7fc7-4727-80d6-36f5014d4ff9",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "2ed5a0b9-2522-462b-81be-d18627259d19"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "9b97c5b6-7fbf-4aa2-9baf-86e456caa953"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "aa5f83ba-9de1-40db-b5cc-1cf922ba664d"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (!pm.response.text()) {",
					"  const url = pm.request.url.toString();",
					"  const requestHeaders = pm.request.headers;",
					"",
					"  const resCode = pm.response.code;",
					"  const resHeaders = pm.response.headers;",
					"",
					"",
					"  const req = {",
					"    url: 'https://hooks.slack.com/services/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',",
					"    method: 'POST',",
					"    body: {",
					"      mode: 'raw',",
					"      raw: JSON.stringify({",
					"        \"text\": \"Empty Response\",",
					"        \"blocks\": [",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": url",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": \"*Request*\"",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": `Headers:\\n\\`\\`\\`${JSON.stringify(requestHeaders, null, 2)}\\`\\`\\``",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": \"*Response*\"",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": `*Code*: ${resCode}\\n*Content*: ${response}\\n*Headers*:\\n\\`\\`\\`${JSON.stringify(resHeaders, null, 2)}\\`\\`\\``",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"actions\",",
					"            \"elements\": [",
					"              {",
					"                \"type\": \"button\",",
					"                \"text\": {",
					"                  \"type\": \"plain_text\",",
					"                  \"text\": \"Open AWS\",",
					"                  \"emoji\": true",
					"                },",
					"                \"value\": \"click_me_123\"",
					"              }",
					"            ]",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          }",
					"        ]",
					"      })",
					"    }",
					"  };",
					"",
					"  pm.sendRequest(req);",
					"",
					"  return postman.setNextRequest(null);",
					"} else {",
					"  console.log(JSON.stringify(pm.response.json(), null, 2));",
					"}",
					"",
					"console.log(pm.response.code);"
				],
				"id": "a7da5551-4545-4e20-bfbb-8b5d54fbd41d"
			}
		}
	]
}